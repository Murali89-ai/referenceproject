/*
 * ucd_cregn_v1_api
 * Swagger documentation for UCD Customer Registration Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerregistration;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.JSON;

/**
 * SecurityQueAndAns
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:58:59.701576900+05:30[Asia/Calcutta]")
public class SecurityQueAndAns {
  /**
   * SecurityTypeID Values * 1 - Web Security Question1 * 2 - Web Security Question2 * 3 - Web Security Question3 * 4 - Phone Security Question * 99 - SecurityTypeIDOther 
   */
  @JsonAdapter(SecurityTypeIdEnum.Adapter.class)
  public enum SecurityTypeIdEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_99(99);

    private Integer value;

    SecurityTypeIdEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecurityTypeIdEnum fromValue(Integer value) {
      for (SecurityTypeIdEnum b : SecurityTypeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecurityTypeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecurityTypeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecurityTypeIdEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return SecurityTypeIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SECURITY_TYPE_ID = "securityTypeId";
  @SerializedName(SERIALIZED_NAME_SECURITY_TYPE_ID)
  private SecurityTypeIdEnum securityTypeId;

  public static final String SERIALIZED_NAME_SECURITY_QUESTION = "securityQuestion";
  @SerializedName(SERIALIZED_NAME_SECURITY_QUESTION)
  private String securityQuestion;

  public static final String SERIALIZED_NAME_SECURITY_ANSWER = "securityAnswer";
  @SerializedName(SERIALIZED_NAME_SECURITY_ANSWER)
  private String securityAnswer;

  public static final String SERIALIZED_NAME_REFERENCE_FOR_SECURITY_TYPE_OTHER = "referenceForSecurityTypeOther";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FOR_SECURITY_TYPE_OTHER)
  private String referenceForSecurityTypeOther;

  public SecurityQueAndAns() {
  }

  public SecurityQueAndAns securityTypeId(SecurityTypeIdEnum securityTypeId) {
    
    this.securityTypeId = securityTypeId;
    return this;
  }

   /**
   * SecurityTypeID Values * 1 - Web Security Question1 * 2 - Web Security Question2 * 3 - Web Security Question3 * 4 - Phone Security Question * 99 - SecurityTypeIDOther 
   * @return securityTypeId
  **/
  @javax.annotation.Nonnull
  public SecurityTypeIdEnum getSecurityTypeId() {
    return securityTypeId;
  }


  public void setSecurityTypeId(SecurityTypeIdEnum securityTypeId) {
    this.securityTypeId = securityTypeId;
  }


  public SecurityQueAndAns securityQuestion(String securityQuestion) {
    
    this.securityQuestion = securityQuestion;
    return this;
  }

   /**
   * Security Question
   * @return securityQuestion
  **/
  @javax.annotation.Nonnull
  public String getSecurityQuestion() {
    return securityQuestion;
  }


  public void setSecurityQuestion(String securityQuestion) {
    this.securityQuestion = securityQuestion;
  }


  public SecurityQueAndAns securityAnswer(String securityAnswer) {
    
    this.securityAnswer = securityAnswer;
    return this;
  }

   /**
   * Answer to the Security Question
   * @return securityAnswer
  **/
  @javax.annotation.Nullable
  public String getSecurityAnswer() {
    return securityAnswer;
  }


  public void setSecurityAnswer(String securityAnswer) {
    this.securityAnswer = securityAnswer;
  }


  public SecurityQueAndAns referenceForSecurityTypeOther(String referenceForSecurityTypeOther) {
    
    this.referenceForSecurityTypeOther = referenceForSecurityTypeOther;
    return this;
  }

   /**
   * When the Security Type 99 (Other) is selected. Client needs to send the reference/actual Security type value in this element.
   * @return referenceForSecurityTypeOther
  **/
  @javax.annotation.Nullable
  public String getReferenceForSecurityTypeOther() {
    return referenceForSecurityTypeOther;
  }


  public void setReferenceForSecurityTypeOther(String referenceForSecurityTypeOther) {
    this.referenceForSecurityTypeOther = referenceForSecurityTypeOther;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecurityQueAndAns securityQueAndAns = (SecurityQueAndAns) o;
    return Objects.equals(this.securityTypeId, securityQueAndAns.securityTypeId) &&
        Objects.equals(this.securityQuestion, securityQueAndAns.securityQuestion) &&
        Objects.equals(this.securityAnswer, securityQueAndAns.securityAnswer) &&
        Objects.equals(this.referenceForSecurityTypeOther, securityQueAndAns.referenceForSecurityTypeOther);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(securityTypeId, securityQuestion, securityAnswer, referenceForSecurityTypeOther);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecurityQueAndAns {\n");
    sb.append("    securityTypeId: ").append(toIndentedString(securityTypeId)).append("\n");
    sb.append("    securityQuestion: ").append(toIndentedString(securityQuestion)).append("\n");
    sb.append("    securityAnswer: ").append(toIndentedString(securityAnswer)).append("\n");
    sb.append("    referenceForSecurityTypeOther: ").append(toIndentedString(referenceForSecurityTypeOther)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("securityTypeId");
    openapiFields.add("securityQuestion");
    openapiFields.add("securityAnswer");
    openapiFields.add("referenceForSecurityTypeOther");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("securityTypeId");
    openapiRequiredFields.add("securityQuestion");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SecurityQueAndAns
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SecurityQueAndAns.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecurityQueAndAns is not found in the empty JSON string", SecurityQueAndAns.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SecurityQueAndAns.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecurityQueAndAns` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SecurityQueAndAns.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("securityQuestion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityQuestion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityQuestion").toString()));
      }
      if ((jsonObj.get("securityAnswer") != null && !jsonObj.get("securityAnswer").isJsonNull()) && !jsonObj.get("securityAnswer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityAnswer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityAnswer").toString()));
      }
      if ((jsonObj.get("referenceForSecurityTypeOther") != null && !jsonObj.get("referenceForSecurityTypeOther").isJsonNull()) && !jsonObj.get("referenceForSecurityTypeOther").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceForSecurityTypeOther` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceForSecurityTypeOther").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecurityQueAndAns.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecurityQueAndAns' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecurityQueAndAns> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecurityQueAndAns.class));

       return (TypeAdapter<T>) new TypeAdapter<SecurityQueAndAns>() {
           @Override
           public void write(JsonWriter out, SecurityQueAndAns value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecurityQueAndAns read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SecurityQueAndAns given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SecurityQueAndAns
  * @throws IOException if the JSON string is invalid with respect to SecurityQueAndAns
  */
  public static SecurityQueAndAns fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecurityQueAndAns.class);
  }

 /**
  * Convert an instance of SecurityQueAndAns to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

