/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * This is the request model for KeyLookupCustomerByReceiverLimit service. This is to search for a customer using key elements of the customer receivers data and return the UCD profile of the customer found.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class KeyLookupCustomerByReceiverLimitRequest {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Header header;

  public static final String SERIALIZED_NAME_CUSTOMER_KEY = "customerKey";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_KEY)
  private CustomerKey customerKey;

  /**
   * This field indicates to return MyWu Customers or Non-MyWU Customers or both. This flag will be defaulted to N. * If the flag value is Y, then the search will be for MyWU + Non-MyWU customers. * If the flag value is N, then the search will be for MyWU customers only. 
   */
  @JsonAdapter(SendNonWuAlsoFlagEnum.Adapter.class)
  public enum SendNonWuAlsoFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendNonWuAlsoFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendNonWuAlsoFlagEnum fromValue(String value) {
      for (SendNonWuAlsoFlagEnum b : SendNonWuAlsoFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendNonWuAlsoFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendNonWuAlsoFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendNonWuAlsoFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendNonWuAlsoFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_NON_WU_ALSO_FLAG = "sendNonWuAlsoFlag";
  @SerializedName(SERIALIZED_NAME_SEND_NON_WU_ALSO_FLAG)
  private SendNonWuAlsoFlagEnum sendNonWuAlsoFlag = SendNonWuAlsoFlagEnum.Y;

  public static final String SERIALIZED_NAME_RECEIVER_SEQ = "receiverSeq";
  @SerializedName(SERIALIZED_NAME_RECEIVER_SEQ)
  private String receiverSeq;

  public static final String SERIALIZED_NAME_RECEIVER_NO = "receiverNo";
  @SerializedName(SERIALIZED_NAME_RECEIVER_NO)
  private Integer receiverNo;

  public static final String SERIALIZED_NAME_RECEIVER_START_INDEX = "receiverStartIndex";
  @SerializedName(SERIALIZED_NAME_RECEIVER_START_INDEX)
  private Integer receiverStartIndex;

  public static final String SERIALIZED_NAME_RECEIVER_RETURN_SIZE = "receiverReturnSize";
  @SerializedName(SERIALIZED_NAME_RECEIVER_RETURN_SIZE)
  private Integer receiverReturnSize;

  /**
   * This flag indicates that the search should include Specific receiver types or All receivers types. * SPL - Receivers with receiverTypeId &#x3D; P, X would be returned * COM - Receivers with receiverTypeId &#x3D; P, Q, S, X would be returned * COM! - Receivers other than receiverTypeId &#x3D; P, Q, S, X would be returned * D2B - Receivers with receiverTypeId &#x3D; B would be returned * D2B! - Receivers other than receiverTypeId &#x3D; B would be returned * REG - Receivers with receiverTypeId &#x3D; B, P, Q, S, X would be returned * REG! - Receivers other than receiverTypeId &#x3D; B, P, Q, S, X would be returned * ALL - Receivers irrespective of receiverTypeId would be returned 
   */
  @JsonAdapter(ReceiverTypeFilterFlagEnum.Adapter.class)
  public enum ReceiverTypeFilterFlagEnum {
    SPL("SPL"),
    
    COM("COM"),
    
    COM_("COM!"),
    
    D2B("D2B"),
    
    D2B_("D2B!"),
    
    REG("REG"),
    
    REG_("REG!"),
    
    ALL("ALL");

    private String value;

    ReceiverTypeFilterFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReceiverTypeFilterFlagEnum fromValue(String value) {
      for (ReceiverTypeFilterFlagEnum b : ReceiverTypeFilterFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReceiverTypeFilterFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReceiverTypeFilterFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReceiverTypeFilterFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReceiverTypeFilterFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RECEIVER_TYPE_FILTER_FLAG = "receiverTypeFilterFlag";
  @SerializedName(SERIALIZED_NAME_RECEIVER_TYPE_FILTER_FLAG)
  private ReceiverTypeFilterFlagEnum receiverTypeFilterFlag;

  /**
   * This flag indicates that the search should include only Active receivers or All receivers. * Y - Return only Active Receiver(s) * N - Return All Receivers 
   */
  @JsonAdapter(ActiveCustomerReceiversEnum.Adapter.class)
  public enum ActiveCustomerReceiversEnum {
    Y("Y"),
    
    N("N");

    private String value;

    ActiveCustomerReceiversEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActiveCustomerReceiversEnum fromValue(String value) {
      for (ActiveCustomerReceiversEnum b : ActiveCustomerReceiversEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActiveCustomerReceiversEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActiveCustomerReceiversEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActiveCustomerReceiversEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActiveCustomerReceiversEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTIVE_CUSTOMER_RECEIVERS = "activeCustomerReceivers";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CUSTOMER_RECEIVERS)
  private ActiveCustomerReceiversEnum activeCustomerReceivers = ActiveCustomerReceiversEnum.N;

  /**
   * This flag indicates that the segmentation codes should be included in response or not.  * U - Return USB(Universal Segmentation Buffer) * I - Return Individual fields    * N - Dont send Segmentation codes 
   */
  @JsonAdapter(SegmentationCodesFlagEnum.Adapter.class)
  public enum SegmentationCodesFlagEnum {
    U("U"),
    
    I("I"),
    
    N("N");

    private String value;

    SegmentationCodesFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SegmentationCodesFlagEnum fromValue(String value) {
      for (SegmentationCodesFlagEnum b : SegmentationCodesFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SegmentationCodesFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SegmentationCodesFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SegmentationCodesFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SegmentationCodesFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEGMENTATION_CODES_FLAG = "segmentationCodesFlag";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_CODES_FLAG)
  private SegmentationCodesFlagEnum segmentationCodesFlag;

  /**
   * This flag indicates that the response should include Partial Customers or not. This flag will be defaulted to N. * If the flag value is Y, then the search will be for Full + Partial customers. * If the flag value is N, then the search will be for Full customers only. 
   */
  @JsonAdapter(SendPartialCustomerFlagEnum.Adapter.class)
  public enum SendPartialCustomerFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendPartialCustomerFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendPartialCustomerFlagEnum fromValue(String value) {
      for (SendPartialCustomerFlagEnum b : SendPartialCustomerFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendPartialCustomerFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendPartialCustomerFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendPartialCustomerFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendPartialCustomerFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_PARTIAL_CUSTOMER_FLAG = "sendPartialCustomerFlag";
  @SerializedName(SERIALIZED_NAME_SEND_PARTIAL_CUSTOMER_FLAG)
  private SendPartialCustomerFlagEnum sendPartialCustomerFlag = SendPartialCustomerFlagEnum.N;

  /**
   * This flag indicates that the search should include Convenience Customers or not. This flag will be defaulted to N. * If the flag value is Y, then the search will happen across Convenience, Digital(Full) &amp; Retail(MyWU) Customers.  * If the flag value is N, then the search will happen across Digital(Full) &amp; Retail(MyWU) Customers. 
   */
  @JsonAdapter(IncludeConvenienceFlagEnum.Adapter.class)
  public enum IncludeConvenienceFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    IncludeConvenienceFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncludeConvenienceFlagEnum fromValue(String value) {
      for (IncludeConvenienceFlagEnum b : IncludeConvenienceFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncludeConvenienceFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncludeConvenienceFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncludeConvenienceFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncludeConvenienceFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INCLUDE_CONVENIENCE_FLAG = "includeConvenienceFlag";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CONVENIENCE_FLAG)
  private IncludeConvenienceFlagEnum includeConvenienceFlag = IncludeConvenienceFlagEnum.N;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform = "W";

  /**
   * This flag would indicate to include Customers with level codes - XXC, WU6 &amp; WU7 or not.   * If this flag is N or not sent, then by the search will not return customer(s) with level code - XXC, WU6 &amp; WU7.    * If this flag value is Y, then the search will return customer(s) irrespective of the level codes. 
   */
  @JsonAdapter(SendAllPfcEnum.Adapter.class)
  public enum SendAllPfcEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendAllPfcEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendAllPfcEnum fromValue(String value) {
      for (SendAllPfcEnum b : SendAllPfcEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendAllPfcEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendAllPfcEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendAllPfcEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendAllPfcEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_ALL_PFC = "sendAllPfc";
  @SerializedName(SERIALIZED_NAME_SEND_ALL_PFC)
  private SendAllPfcEnum sendAllPfc = SendAllPfcEnum.N;

  /**
   * This flag indicates to/not to convert the Special Characters to ASCII for Sender &amp; Receiver details (Name, Address, Address in UAB). For Loyalty, this flag will be defaulted to Y and for others this falg will be defaulted to N. * If passed as N in the request, as is values will be returned in response. * If passed as Y in the request, the Special Characters will be converted to ASCII and will be returned in response. 
   */
  @JsonAdapter(EnableTransliterationFlagEnum.Adapter.class)
  public enum EnableTransliterationFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EnableTransliterationFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnableTransliterationFlagEnum fromValue(String value) {
      for (EnableTransliterationFlagEnum b : EnableTransliterationFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnableTransliterationFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnableTransliterationFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnableTransliterationFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnableTransliterationFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENABLE_TRANSLITERATION_FLAG = "enableTransliterationFlag";
  @SerializedName(SERIALIZED_NAME_ENABLE_TRANSLITERATION_FLAG)
  private EnableTransliterationFlagEnum enableTransliterationFlag = EnableTransliterationFlagEnum.N;

  /**
   * This flag indicates that the response should include All Funding Sources or not. This flag will be defaulted to N. * If the flag value is &#39;Y&#39;, then the search will happen for all funding sources including the funding sources added by TMT. * If the flag value is &#39;N&#39;, then the search will happen for all funding sources excluding the funding sources added by TMT. 
   */
  @JsonAdapter(SendAllFundSrcEnum.Adapter.class)
  public enum SendAllFundSrcEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendAllFundSrcEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendAllFundSrcEnum fromValue(String value) {
      for (SendAllFundSrcEnum b : SendAllFundSrcEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendAllFundSrcEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendAllFundSrcEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendAllFundSrcEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendAllFundSrcEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_ALL_FUND_SRC = "sendAllFundSrc";
  @SerializedName(SERIALIZED_NAME_SEND_ALL_FUND_SRC)
  private SendAllFundSrcEnum sendAllFundSrc = SendAllFundSrcEnum.N;

  /**
   * This flag indicates that the response should include All Phone Verification Statases or not. This flag will be defaulted to N. * If the flag value is &#39;Y&#39;, then the phoneVvStatus - Z / T / R / S / V / A / B / U / C / D will be returned if available. * If the flag value is &#39;N&#39;, then only the phoneVvStatus - N / L / M / P will be returned if available. 
   */
  @JsonAdapter(SendAllPhoneVvStatusEnum.Adapter.class)
  public enum SendAllPhoneVvStatusEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendAllPhoneVvStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendAllPhoneVvStatusEnum fromValue(String value) {
      for (SendAllPhoneVvStatusEnum b : SendAllPhoneVvStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendAllPhoneVvStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendAllPhoneVvStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendAllPhoneVvStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendAllPhoneVvStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_ALL_PHONE_VV_STATUS = "sendAllPhoneVvStatus";
  @SerializedName(SERIALIZED_NAME_SEND_ALL_PHONE_VV_STATUS)
  private SendAllPhoneVvStatusEnum sendAllPhoneVvStatus = SendAllPhoneVvStatusEnum.N;

  public static final String SERIALIZED_NAME_NO_OF_YEARS_IN_SEARCH = "noOfYearsInSearch";
  @SerializedName(SERIALIZED_NAME_NO_OF_YEARS_IN_SEARCH)
  private Integer noOfYearsInSearch;

  /**
   * *Note: This field is deprecated. Please use enableCrossChannelFlag field instead.* * Flag which indicates to search across All profiles or only Primary UMN profile.   * If not passed in the request, all the profiles will be returned in response by default.   * If passed as N in the request, all the profiles will be returned in response.   * If passed as Y in the request, only the Primary UMN profile will be returned in response. 
   */
  @JsonAdapter(SendPrimaryProfileFlagEnum.Adapter.class)
  public enum SendPrimaryProfileFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendPrimaryProfileFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendPrimaryProfileFlagEnum fromValue(String value) {
      for (SendPrimaryProfileFlagEnum b : SendPrimaryProfileFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendPrimaryProfileFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendPrimaryProfileFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendPrimaryProfileFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendPrimaryProfileFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_PRIMARY_PROFILE_FLAG = "sendPrimaryProfileFlag";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SEND_PRIMARY_PROFILE_FLAG)
  private SendPrimaryProfileFlagEnum sendPrimaryProfileFlag = SendPrimaryProfileFlagEnum.N;

  /**
   * Flag which indicates to search across All profiles or only Primary UMN profile. * If not passed in the request, all the profiles will be returned in response by default. * If passed as N in the request, all the profiles will be returned in response. * If passed as Y in the request, then   * Only the Primary UMN profile will be returned in response.   * platform will get defaulted to A   * noOfYearsInSearch passed in the request will get ignored 
   */
  @JsonAdapter(EnableCrossChannelFlagEnum.Adapter.class)
  public enum EnableCrossChannelFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EnableCrossChannelFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnableCrossChannelFlagEnum fromValue(String value) {
      for (EnableCrossChannelFlagEnum b : EnableCrossChannelFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnableCrossChannelFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnableCrossChannelFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnableCrossChannelFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnableCrossChannelFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENABLE_CROSS_CHANNEL_FLAG = "enableCrossChannelFlag";
  @SerializedName(SERIALIZED_NAME_ENABLE_CROSS_CHANNEL_FLAG)
  private EnableCrossChannelFlagEnum enableCrossChannelFlag = EnableCrossChannelFlagEnum.N;

  /**
   * This flag would indicate to include consolidated funding sources from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return funding sources from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated funding sources from both primary &amp; scondary profiles. 
   */
  @JsonAdapter(SendConsolidatedFundingSourcesEnum.Adapter.class)
  public enum SendConsolidatedFundingSourcesEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendConsolidatedFundingSourcesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendConsolidatedFundingSourcesEnum fromValue(String value) {
      for (SendConsolidatedFundingSourcesEnum b : SendConsolidatedFundingSourcesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendConsolidatedFundingSourcesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendConsolidatedFundingSourcesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendConsolidatedFundingSourcesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendConsolidatedFundingSourcesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_CONSOLIDATED_FUNDING_SOURCES = "sendConsolidatedFundingSources";
  @SerializedName(SERIALIZED_NAME_SEND_CONSOLIDATED_FUNDING_SOURCES)
  private SendConsolidatedFundingSourcesEnum sendConsolidatedFundingSources = SendConsolidatedFundingSourcesEnum.N;

  /**
   * This flag would indicate to include consolidated receviers from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return receviers from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated receivers from both primary &amp; scondary profiles. 
   */
  @JsonAdapter(SendConsolidatedReceiversEnum.Adapter.class)
  public enum SendConsolidatedReceiversEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendConsolidatedReceiversEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendConsolidatedReceiversEnum fromValue(String value) {
      for (SendConsolidatedReceiversEnum b : SendConsolidatedReceiversEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendConsolidatedReceiversEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendConsolidatedReceiversEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendConsolidatedReceiversEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendConsolidatedReceiversEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_CONSOLIDATED_RECEIVERS = "sendConsolidatedReceivers";
  @SerializedName(SERIALIZED_NAME_SEND_CONSOLIDATED_RECEIVERS)
  private SendConsolidatedReceiversEnum sendConsolidatedReceivers = SendConsolidatedReceiversEnum.N;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO2 = "countryCodeIso2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO2)
  private String countryCodeIso2;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO3 = "countryCodeIso3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO3)
  private String countryCodeIso3;

  public static final String SERIALIZED_NAME_REQUEST_INITIATED_BY = "requestInitiatedBy";
  @SerializedName(SERIALIZED_NAME_REQUEST_INITIATED_BY)
  private String requestInitiatedBy;

  public KeyLookupCustomerByReceiverLimitRequest() {
  }

  public KeyLookupCustomerByReceiverLimitRequest header(Header header) {
    
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nonnull
  public Header getHeader() {
    return header;
  }


  public void setHeader(Header header) {
    this.header = header;
  }


  public KeyLookupCustomerByReceiverLimitRequest customerKey(CustomerKey customerKey) {
    
    this.customerKey = customerKey;
    return this;
  }

   /**
   * Get customerKey
   * @return customerKey
  **/
  @javax.annotation.Nonnull
  public CustomerKey getCustomerKey() {
    return customerKey;
  }


  public void setCustomerKey(CustomerKey customerKey) {
    this.customerKey = customerKey;
  }


  public KeyLookupCustomerByReceiverLimitRequest sendNonWuAlsoFlag(SendNonWuAlsoFlagEnum sendNonWuAlsoFlag) {
    
    this.sendNonWuAlsoFlag = sendNonWuAlsoFlag;
    return this;
  }

   /**
   * This field indicates to return MyWu Customers or Non-MyWU Customers or both. This flag will be defaulted to N. * If the flag value is Y, then the search will be for MyWU + Non-MyWU customers. * If the flag value is N, then the search will be for MyWU customers only. 
   * @return sendNonWuAlsoFlag
  **/
  @javax.annotation.Nullable
  public SendNonWuAlsoFlagEnum getSendNonWuAlsoFlag() {
    return sendNonWuAlsoFlag;
  }


  public void setSendNonWuAlsoFlag(SendNonWuAlsoFlagEnum sendNonWuAlsoFlag) {
    this.sendNonWuAlsoFlag = sendNonWuAlsoFlag;
  }


  public KeyLookupCustomerByReceiverLimitRequest receiverSeq(String receiverSeq) {
    
    this.receiverSeq = receiverSeq;
    return this;
  }

   /**
   * This field indicates to return the customer&#39;s details and the receiver details for the given receiverSeq.
   * @return receiverSeq
  **/
  @javax.annotation.Nullable
  public String getReceiverSeq() {
    return receiverSeq;
  }


  public void setReceiverSeq(String receiverSeq) {
    this.receiverSeq = receiverSeq;
  }


  public KeyLookupCustomerByReceiverLimitRequest receiverNo(Integer receiverNo) {
    
    this.receiverNo = receiverNo;
    return this;
  }

   /**
   * This field indicates to return the customer&#39;s details and the receiver details for the given receiverNo.
   * @return receiverNo
  **/
  @javax.annotation.Nullable
  public Integer getReceiverNo() {
    return receiverNo;
  }


  public void setReceiverNo(Integer receiverNo) {
    this.receiverNo = receiverNo;
  }


  public KeyLookupCustomerByReceiverLimitRequest receiverStartIndex(Integer receiverStartIndex) {
    
    this.receiverStartIndex = receiverStartIndex;
    return this;
  }

   /**
   * This field indicates the index from where the receivers should start and sent in the response. receiverStartIndex field must be 0 for the first call and the value passed in receiverNextIndex in response for subsequent calls.   
   * @return receiverStartIndex
  **/
  @javax.annotation.Nonnull
  public Integer getReceiverStartIndex() {
    return receiverStartIndex;
  }


  public void setReceiverStartIndex(Integer receiverStartIndex) {
    this.receiverStartIndex = receiverStartIndex;
  }


  public KeyLookupCustomerByReceiverLimitRequest receiverReturnSize(Integer receiverReturnSize) {
    
    this.receiverReturnSize = receiverReturnSize;
    return this;
  }

   /**
   * This field indicates the number of receivers to be sent in the response starting from the receiverStartIndex. 
   * @return receiverReturnSize
  **/
  @javax.annotation.Nonnull
  public Integer getReceiverReturnSize() {
    return receiverReturnSize;
  }


  public void setReceiverReturnSize(Integer receiverReturnSize) {
    this.receiverReturnSize = receiverReturnSize;
  }


  public KeyLookupCustomerByReceiverLimitRequest receiverTypeFilterFlag(ReceiverTypeFilterFlagEnum receiverTypeFilterFlag) {
    
    this.receiverTypeFilterFlag = receiverTypeFilterFlag;
    return this;
  }

   /**
   * This flag indicates that the search should include Specific receiver types or All receivers types. * SPL - Receivers with receiverTypeId &#x3D; P, X would be returned * COM - Receivers with receiverTypeId &#x3D; P, Q, S, X would be returned * COM! - Receivers other than receiverTypeId &#x3D; P, Q, S, X would be returned * D2B - Receivers with receiverTypeId &#x3D; B would be returned * D2B! - Receivers other than receiverTypeId &#x3D; B would be returned * REG - Receivers with receiverTypeId &#x3D; B, P, Q, S, X would be returned * REG! - Receivers other than receiverTypeId &#x3D; B, P, Q, S, X would be returned * ALL - Receivers irrespective of receiverTypeId would be returned 
   * @return receiverTypeFilterFlag
  **/
  @javax.annotation.Nonnull
  public ReceiverTypeFilterFlagEnum getReceiverTypeFilterFlag() {
    return receiverTypeFilterFlag;
  }


  public void setReceiverTypeFilterFlag(ReceiverTypeFilterFlagEnum receiverTypeFilterFlag) {
    this.receiverTypeFilterFlag = receiverTypeFilterFlag;
  }


  public KeyLookupCustomerByReceiverLimitRequest activeCustomerReceivers(ActiveCustomerReceiversEnum activeCustomerReceivers) {
    
    this.activeCustomerReceivers = activeCustomerReceivers;
    return this;
  }

   /**
   * This flag indicates that the search should include only Active receivers or All receivers. * Y - Return only Active Receiver(s) * N - Return All Receivers 
   * @return activeCustomerReceivers
  **/
  @javax.annotation.Nonnull
  public ActiveCustomerReceiversEnum getActiveCustomerReceivers() {
    return activeCustomerReceivers;
  }


  public void setActiveCustomerReceivers(ActiveCustomerReceiversEnum activeCustomerReceivers) {
    this.activeCustomerReceivers = activeCustomerReceivers;
  }


  public KeyLookupCustomerByReceiverLimitRequest segmentationCodesFlag(SegmentationCodesFlagEnum segmentationCodesFlag) {
    
    this.segmentationCodesFlag = segmentationCodesFlag;
    return this;
  }

   /**
   * This flag indicates that the segmentation codes should be included in response or not.  * U - Return USB(Universal Segmentation Buffer) * I - Return Individual fields    * N - Dont send Segmentation codes 
   * @return segmentationCodesFlag
  **/
  @javax.annotation.Nullable
  public SegmentationCodesFlagEnum getSegmentationCodesFlag() {
    return segmentationCodesFlag;
  }


  public void setSegmentationCodesFlag(SegmentationCodesFlagEnum segmentationCodesFlag) {
    this.segmentationCodesFlag = segmentationCodesFlag;
  }


  public KeyLookupCustomerByReceiverLimitRequest sendPartialCustomerFlag(SendPartialCustomerFlagEnum sendPartialCustomerFlag) {
    
    this.sendPartialCustomerFlag = sendPartialCustomerFlag;
    return this;
  }

   /**
   * This flag indicates that the response should include Partial Customers or not. This flag will be defaulted to N. * If the flag value is Y, then the search will be for Full + Partial customers. * If the flag value is N, then the search will be for Full customers only. 
   * @return sendPartialCustomerFlag
  **/
  @javax.annotation.Nullable
  public SendPartialCustomerFlagEnum getSendPartialCustomerFlag() {
    return sendPartialCustomerFlag;
  }


  public void setSendPartialCustomerFlag(SendPartialCustomerFlagEnum sendPartialCustomerFlag) {
    this.sendPartialCustomerFlag = sendPartialCustomerFlag;
  }


  public KeyLookupCustomerByReceiverLimitRequest includeConvenienceFlag(IncludeConvenienceFlagEnum includeConvenienceFlag) {
    
    this.includeConvenienceFlag = includeConvenienceFlag;
    return this;
  }

   /**
   * This flag indicates that the search should include Convenience Customers or not. This flag will be defaulted to N. * If the flag value is Y, then the search will happen across Convenience, Digital(Full) &amp; Retail(MyWU) Customers.  * If the flag value is N, then the search will happen across Digital(Full) &amp; Retail(MyWU) Customers. 
   * @return includeConvenienceFlag
  **/
  @javax.annotation.Nullable
  public IncludeConvenienceFlagEnum getIncludeConvenienceFlag() {
    return includeConvenienceFlag;
  }


  public void setIncludeConvenienceFlag(IncludeConvenienceFlagEnum includeConvenienceFlag) {
    this.includeConvenienceFlag = includeConvenienceFlag;
  }


  public KeyLookupCustomerByReceiverLimitRequest platform(String platform) {
    
    this.platform = platform;
    return this;
  }

   /**
   * This flag indicates that the search should happen across all/specific paltform(s). For Phoenix, this flag will be defaulted to A and for Non-Phoenix, this flag will be defaulted to W. * If the flag value is \&quot;A\&quot;, then the search will happen irrespective of platform. * If the flag value is \&quot;O\&quot;, then the search will happen in only OVI platform. * If the flag value is \&quot;V\&quot;, then the search will happen in only VIGO platform. * if the flag value is \&quot;W\&quot;, then the search will happen other than OVI/VIGO platforms. 
   * @return platform
  **/
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }


  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public KeyLookupCustomerByReceiverLimitRequest sendAllPfc(SendAllPfcEnum sendAllPfc) {
    
    this.sendAllPfc = sendAllPfc;
    return this;
  }

   /**
   * This flag would indicate to include Customers with level codes - XXC, WU6 &amp; WU7 or not.   * If this flag is N or not sent, then by the search will not return customer(s) with level code - XXC, WU6 &amp; WU7.    * If this flag value is Y, then the search will return customer(s) irrespective of the level codes. 
   * @return sendAllPfc
  **/
  @javax.annotation.Nullable
  public SendAllPfcEnum getSendAllPfc() {
    return sendAllPfc;
  }


  public void setSendAllPfc(SendAllPfcEnum sendAllPfc) {
    this.sendAllPfc = sendAllPfc;
  }


  public KeyLookupCustomerByReceiverLimitRequest enableTransliterationFlag(EnableTransliterationFlagEnum enableTransliterationFlag) {
    
    this.enableTransliterationFlag = enableTransliterationFlag;
    return this;
  }

   /**
   * This flag indicates to/not to convert the Special Characters to ASCII for Sender &amp; Receiver details (Name, Address, Address in UAB). For Loyalty, this flag will be defaulted to Y and for others this falg will be defaulted to N. * If passed as N in the request, as is values will be returned in response. * If passed as Y in the request, the Special Characters will be converted to ASCII and will be returned in response. 
   * @return enableTransliterationFlag
  **/
  @javax.annotation.Nullable
  public EnableTransliterationFlagEnum getEnableTransliterationFlag() {
    return enableTransliterationFlag;
  }


  public void setEnableTransliterationFlag(EnableTransliterationFlagEnum enableTransliterationFlag) {
    this.enableTransliterationFlag = enableTransliterationFlag;
  }


  public KeyLookupCustomerByReceiverLimitRequest sendAllFundSrc(SendAllFundSrcEnum sendAllFundSrc) {
    
    this.sendAllFundSrc = sendAllFundSrc;
    return this;
  }

   /**
   * This flag indicates that the response should include All Funding Sources or not. This flag will be defaulted to N. * If the flag value is &#39;Y&#39;, then the search will happen for all funding sources including the funding sources added by TMT. * If the flag value is &#39;N&#39;, then the search will happen for all funding sources excluding the funding sources added by TMT. 
   * @return sendAllFundSrc
  **/
  @javax.annotation.Nullable
  public SendAllFundSrcEnum getSendAllFundSrc() {
    return sendAllFundSrc;
  }


  public void setSendAllFundSrc(SendAllFundSrcEnum sendAllFundSrc) {
    this.sendAllFundSrc = sendAllFundSrc;
  }


  public KeyLookupCustomerByReceiverLimitRequest sendAllPhoneVvStatus(SendAllPhoneVvStatusEnum sendAllPhoneVvStatus) {
    
    this.sendAllPhoneVvStatus = sendAllPhoneVvStatus;
    return this;
  }

   /**
   * This flag indicates that the response should include All Phone Verification Statases or not. This flag will be defaulted to N. * If the flag value is &#39;Y&#39;, then the phoneVvStatus - Z / T / R / S / V / A / B / U / C / D will be returned if available. * If the flag value is &#39;N&#39;, then only the phoneVvStatus - N / L / M / P will be returned if available. 
   * @return sendAllPhoneVvStatus
  **/
  @javax.annotation.Nullable
  public SendAllPhoneVvStatusEnum getSendAllPhoneVvStatus() {
    return sendAllPhoneVvStatus;
  }


  public void setSendAllPhoneVvStatus(SendAllPhoneVvStatusEnum sendAllPhoneVvStatus) {
    this.sendAllPhoneVvStatus = sendAllPhoneVvStatus;
  }


  public KeyLookupCustomerByReceiverLimitRequest noOfYearsInSearch(Integer noOfYearsInSearch) {
    
    this.noOfYearsInSearch = noOfYearsInSearch;
    return this;
  }

   /**
   * This flag would indicate to include the number of years in search. For Phoenix, this flag will be defaulted to last 2 years, where the start date will be the first day of the start date&#39;s year.    * If this field value is 0 or not available or field is not available, then it will search across all the years.   * If this field is &#39;X&#39; (greater than 0) then UCD will search for last &#39;X&#39; number of years from the current timestamp. 
   * @return noOfYearsInSearch
  **/
  @javax.annotation.Nullable
  public Integer getNoOfYearsInSearch() {
    return noOfYearsInSearch;
  }


  public void setNoOfYearsInSearch(Integer noOfYearsInSearch) {
    this.noOfYearsInSearch = noOfYearsInSearch;
  }


  @Deprecated
  public KeyLookupCustomerByReceiverLimitRequest sendPrimaryProfileFlag(SendPrimaryProfileFlagEnum sendPrimaryProfileFlag) {
    
    this.sendPrimaryProfileFlag = sendPrimaryProfileFlag;
    return this;
  }

   /**
   * *Note: This field is deprecated. Please use enableCrossChannelFlag field instead.* * Flag which indicates to search across All profiles or only Primary UMN profile.   * If not passed in the request, all the profiles will be returned in response by default.   * If passed as N in the request, all the profiles will be returned in response.   * If passed as Y in the request, only the Primary UMN profile will be returned in response. 
   * @return sendPrimaryProfileFlag
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public SendPrimaryProfileFlagEnum getSendPrimaryProfileFlag() {
    return sendPrimaryProfileFlag;
  }


  @Deprecated
  public void setSendPrimaryProfileFlag(SendPrimaryProfileFlagEnum sendPrimaryProfileFlag) {
    this.sendPrimaryProfileFlag = sendPrimaryProfileFlag;
  }


  public KeyLookupCustomerByReceiverLimitRequest enableCrossChannelFlag(EnableCrossChannelFlagEnum enableCrossChannelFlag) {
    
    this.enableCrossChannelFlag = enableCrossChannelFlag;
    return this;
  }

   /**
   * Flag which indicates to search across All profiles or only Primary UMN profile. * If not passed in the request, all the profiles will be returned in response by default. * If passed as N in the request, all the profiles will be returned in response. * If passed as Y in the request, then   * Only the Primary UMN profile will be returned in response.   * platform will get defaulted to A   * noOfYearsInSearch passed in the request will get ignored 
   * @return enableCrossChannelFlag
  **/
  @javax.annotation.Nullable
  public EnableCrossChannelFlagEnum getEnableCrossChannelFlag() {
    return enableCrossChannelFlag;
  }


  public void setEnableCrossChannelFlag(EnableCrossChannelFlagEnum enableCrossChannelFlag) {
    this.enableCrossChannelFlag = enableCrossChannelFlag;
  }


  public KeyLookupCustomerByReceiverLimitRequest sendConsolidatedFundingSources(SendConsolidatedFundingSourcesEnum sendConsolidatedFundingSources) {
    
    this.sendConsolidatedFundingSources = sendConsolidatedFundingSources;
    return this;
  }

   /**
   * This flag would indicate to include consolidated funding sources from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return funding sources from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated funding sources from both primary &amp; scondary profiles. 
   * @return sendConsolidatedFundingSources
  **/
  @javax.annotation.Nullable
  public SendConsolidatedFundingSourcesEnum getSendConsolidatedFundingSources() {
    return sendConsolidatedFundingSources;
  }


  public void setSendConsolidatedFundingSources(SendConsolidatedFundingSourcesEnum sendConsolidatedFundingSources) {
    this.sendConsolidatedFundingSources = sendConsolidatedFundingSources;
  }


  public KeyLookupCustomerByReceiverLimitRequest sendConsolidatedReceivers(SendConsolidatedReceiversEnum sendConsolidatedReceivers) {
    
    this.sendConsolidatedReceivers = sendConsolidatedReceivers;
    return this;
  }

   /**
   * This flag would indicate to include consolidated receviers from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return receviers from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated receivers from both primary &amp; scondary profiles. 
   * @return sendConsolidatedReceivers
  **/
  @javax.annotation.Nullable
  public SendConsolidatedReceiversEnum getSendConsolidatedReceivers() {
    return sendConsolidatedReceivers;
  }


  public void setSendConsolidatedReceivers(SendConsolidatedReceiversEnum sendConsolidatedReceivers) {
    this.sendConsolidatedReceivers = sendConsolidatedReceivers;
  }


  public KeyLookupCustomerByReceiverLimitRequest countryCodeIso2(String countryCodeIso2) {
    
    this.countryCodeIso2 = countryCodeIso2;
    return this;
  }

   /**
   * Country code in ISO2 format. e.g. AT, IN, US etc. If countryCodeIso1 is passed and if the country is SCV enbaled, then   * enableCrossChannelFlag will get defaulted to Y   * platform will get defaulted to A\\   * noOfYearsInSearch passed in the request will get ignored 
   * @return countryCodeIso2
  **/
  @javax.annotation.Nullable
  public String getCountryCodeIso2() {
    return countryCodeIso2;
  }


  public void setCountryCodeIso2(String countryCodeIso2) {
    this.countryCodeIso2 = countryCodeIso2;
  }


  public KeyLookupCustomerByReceiverLimitRequest countryCodeIso3(String countryCodeIso3) {
    
    this.countryCodeIso3 = countryCodeIso3;
    return this;
  }

   /**
   * Country code in ISO3 format. e.g. AUT, IND, USA etc. If countryCodeIso1 is passed and if the country is SCV enbaled, then   * enableCrossChannelFlag will get defaulted to Y   * platform will get defaulted to A\\   * noOfYearsInSearch passed in the request will get ignored 
   * @return countryCodeIso3
  **/
  @javax.annotation.Nullable
  public String getCountryCodeIso3() {
    return countryCodeIso3;
  }


  public void setCountryCodeIso3(String countryCodeIso3) {
    this.countryCodeIso3 = countryCodeIso3;
  }


  public KeyLookupCustomerByReceiverLimitRequest requestInitiatedBy(String requestInitiatedBy) {
    
    this.requestInitiatedBy = requestInitiatedBy;
    return this;
  }

   /**
   * To identify who has initiated the request.
   * @return requestInitiatedBy
  **/
  @javax.annotation.Nonnull
  public String getRequestInitiatedBy() {
    return requestInitiatedBy;
  }


  public void setRequestInitiatedBy(String requestInitiatedBy) {
    this.requestInitiatedBy = requestInitiatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyLookupCustomerByReceiverLimitRequest keyLookupCustomerByReceiverLimitRequest = (KeyLookupCustomerByReceiverLimitRequest) o;
    return Objects.equals(this.header, keyLookupCustomerByReceiverLimitRequest.header) &&
        Objects.equals(this.customerKey, keyLookupCustomerByReceiverLimitRequest.customerKey) &&
        Objects.equals(this.sendNonWuAlsoFlag, keyLookupCustomerByReceiverLimitRequest.sendNonWuAlsoFlag) &&
        Objects.equals(this.receiverSeq, keyLookupCustomerByReceiverLimitRequest.receiverSeq) &&
        Objects.equals(this.receiverNo, keyLookupCustomerByReceiverLimitRequest.receiverNo) &&
        Objects.equals(this.receiverStartIndex, keyLookupCustomerByReceiverLimitRequest.receiverStartIndex) &&
        Objects.equals(this.receiverReturnSize, keyLookupCustomerByReceiverLimitRequest.receiverReturnSize) &&
        Objects.equals(this.receiverTypeFilterFlag, keyLookupCustomerByReceiverLimitRequest.receiverTypeFilterFlag) &&
        Objects.equals(this.activeCustomerReceivers, keyLookupCustomerByReceiverLimitRequest.activeCustomerReceivers) &&
        Objects.equals(this.segmentationCodesFlag, keyLookupCustomerByReceiverLimitRequest.segmentationCodesFlag) &&
        Objects.equals(this.sendPartialCustomerFlag, keyLookupCustomerByReceiverLimitRequest.sendPartialCustomerFlag) &&
        Objects.equals(this.includeConvenienceFlag, keyLookupCustomerByReceiverLimitRequest.includeConvenienceFlag) &&
        Objects.equals(this.platform, keyLookupCustomerByReceiverLimitRequest.platform) &&
        Objects.equals(this.sendAllPfc, keyLookupCustomerByReceiverLimitRequest.sendAllPfc) &&
        Objects.equals(this.enableTransliterationFlag, keyLookupCustomerByReceiverLimitRequest.enableTransliterationFlag) &&
        Objects.equals(this.sendAllFundSrc, keyLookupCustomerByReceiverLimitRequest.sendAllFundSrc) &&
        Objects.equals(this.sendAllPhoneVvStatus, keyLookupCustomerByReceiverLimitRequest.sendAllPhoneVvStatus) &&
        Objects.equals(this.noOfYearsInSearch, keyLookupCustomerByReceiverLimitRequest.noOfYearsInSearch) &&
        Objects.equals(this.sendPrimaryProfileFlag, keyLookupCustomerByReceiverLimitRequest.sendPrimaryProfileFlag) &&
        Objects.equals(this.enableCrossChannelFlag, keyLookupCustomerByReceiverLimitRequest.enableCrossChannelFlag) &&
        Objects.equals(this.sendConsolidatedFundingSources, keyLookupCustomerByReceiverLimitRequest.sendConsolidatedFundingSources) &&
        Objects.equals(this.sendConsolidatedReceivers, keyLookupCustomerByReceiverLimitRequest.sendConsolidatedReceivers) &&
        Objects.equals(this.countryCodeIso2, keyLookupCustomerByReceiverLimitRequest.countryCodeIso2) &&
        Objects.equals(this.countryCodeIso3, keyLookupCustomerByReceiverLimitRequest.countryCodeIso3) &&
        Objects.equals(this.requestInitiatedBy, keyLookupCustomerByReceiverLimitRequest.requestInitiatedBy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, customerKey, sendNonWuAlsoFlag, receiverSeq, receiverNo, receiverStartIndex, receiverReturnSize, receiverTypeFilterFlag, activeCustomerReceivers, segmentationCodesFlag, sendPartialCustomerFlag, includeConvenienceFlag, platform, sendAllPfc, enableTransliterationFlag, sendAllFundSrc, sendAllPhoneVvStatus, noOfYearsInSearch, sendPrimaryProfileFlag, enableCrossChannelFlag, sendConsolidatedFundingSources, sendConsolidatedReceivers, countryCodeIso2, countryCodeIso3, requestInitiatedBy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyLookupCustomerByReceiverLimitRequest {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    customerKey: ").append(toIndentedString(customerKey)).append("\n");
    sb.append("    sendNonWuAlsoFlag: ").append(toIndentedString(sendNonWuAlsoFlag)).append("\n");
    sb.append("    receiverSeq: ").append(toIndentedString(receiverSeq)).append("\n");
    sb.append("    receiverNo: ").append(toIndentedString(receiverNo)).append("\n");
    sb.append("    receiverStartIndex: ").append(toIndentedString(receiverStartIndex)).append("\n");
    sb.append("    receiverReturnSize: ").append(toIndentedString(receiverReturnSize)).append("\n");
    sb.append("    receiverTypeFilterFlag: ").append(toIndentedString(receiverTypeFilterFlag)).append("\n");
    sb.append("    activeCustomerReceivers: ").append(toIndentedString(activeCustomerReceivers)).append("\n");
    sb.append("    segmentationCodesFlag: ").append(toIndentedString(segmentationCodesFlag)).append("\n");
    sb.append("    sendPartialCustomerFlag: ").append(toIndentedString(sendPartialCustomerFlag)).append("\n");
    sb.append("    includeConvenienceFlag: ").append(toIndentedString(includeConvenienceFlag)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    sendAllPfc: ").append(toIndentedString(sendAllPfc)).append("\n");
    sb.append("    enableTransliterationFlag: ").append(toIndentedString(enableTransliterationFlag)).append("\n");
    sb.append("    sendAllFundSrc: ").append(toIndentedString(sendAllFundSrc)).append("\n");
    sb.append("    sendAllPhoneVvStatus: ").append(toIndentedString(sendAllPhoneVvStatus)).append("\n");
    sb.append("    noOfYearsInSearch: ").append(toIndentedString(noOfYearsInSearch)).append("\n");
    sb.append("    sendPrimaryProfileFlag: ").append(toIndentedString(sendPrimaryProfileFlag)).append("\n");
    sb.append("    enableCrossChannelFlag: ").append(toIndentedString(enableCrossChannelFlag)).append("\n");
    sb.append("    sendConsolidatedFundingSources: ").append(toIndentedString(sendConsolidatedFundingSources)).append("\n");
    sb.append("    sendConsolidatedReceivers: ").append(toIndentedString(sendConsolidatedReceivers)).append("\n");
    sb.append("    countryCodeIso2: ").append(toIndentedString(countryCodeIso2)).append("\n");
    sb.append("    countryCodeIso3: ").append(toIndentedString(countryCodeIso3)).append("\n");
    sb.append("    requestInitiatedBy: ").append(toIndentedString(requestInitiatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("customerKey");
    openapiFields.add("sendNonWuAlsoFlag");
    openapiFields.add("receiverSeq");
    openapiFields.add("receiverNo");
    openapiFields.add("receiverStartIndex");
    openapiFields.add("receiverReturnSize");
    openapiFields.add("receiverTypeFilterFlag");
    openapiFields.add("activeCustomerReceivers");
    openapiFields.add("segmentationCodesFlag");
    openapiFields.add("sendPartialCustomerFlag");
    openapiFields.add("includeConvenienceFlag");
    openapiFields.add("platform");
    openapiFields.add("sendAllPfc");
    openapiFields.add("enableTransliterationFlag");
    openapiFields.add("sendAllFundSrc");
    openapiFields.add("sendAllPhoneVvStatus");
    openapiFields.add("noOfYearsInSearch");
    openapiFields.add("sendPrimaryProfileFlag");
    openapiFields.add("enableCrossChannelFlag");
    openapiFields.add("sendConsolidatedFundingSources");
    openapiFields.add("sendConsolidatedReceivers");
    openapiFields.add("countryCodeIso2");
    openapiFields.add("countryCodeIso3");
    openapiFields.add("requestInitiatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("header");
    openapiRequiredFields.add("customerKey");
    openapiRequiredFields.add("receiverStartIndex");
    openapiRequiredFields.add("receiverReturnSize");
    openapiRequiredFields.add("receiverTypeFilterFlag");
    openapiRequiredFields.add("activeCustomerReceivers");
    openapiRequiredFields.add("requestInitiatedBy");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyLookupCustomerByReceiverLimitRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyLookupCustomerByReceiverLimitRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyLookupCustomerByReceiverLimitRequest is not found in the empty JSON string", KeyLookupCustomerByReceiverLimitRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!KeyLookupCustomerByReceiverLimitRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyLookupCustomerByReceiverLimitRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KeyLookupCustomerByReceiverLimitRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `header`
      Header.validateJsonObject(jsonObj.getAsJsonObject("header"));
      // validate the required field `customerKey`
      CustomerKey.validateJsonObject(jsonObj.getAsJsonObject("customerKey"));
      if ((jsonObj.get("sendNonWuAlsoFlag") != null && !jsonObj.get("sendNonWuAlsoFlag").isJsonNull()) && !jsonObj.get("sendNonWuAlsoFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendNonWuAlsoFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendNonWuAlsoFlag").toString()));
      }
      if ((jsonObj.get("receiverSeq") != null && !jsonObj.get("receiverSeq").isJsonNull()) && !jsonObj.get("receiverSeq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverSeq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverSeq").toString()));
      }
      if (!jsonObj.get("receiverTypeFilterFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverTypeFilterFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverTypeFilterFlag").toString()));
      }
      if (!jsonObj.get("activeCustomerReceivers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeCustomerReceivers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeCustomerReceivers").toString()));
      }
      if ((jsonObj.get("segmentationCodesFlag") != null && !jsonObj.get("segmentationCodesFlag").isJsonNull()) && !jsonObj.get("segmentationCodesFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentationCodesFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segmentationCodesFlag").toString()));
      }
      if ((jsonObj.get("sendPartialCustomerFlag") != null && !jsonObj.get("sendPartialCustomerFlag").isJsonNull()) && !jsonObj.get("sendPartialCustomerFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendPartialCustomerFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendPartialCustomerFlag").toString()));
      }
      if ((jsonObj.get("includeConvenienceFlag") != null && !jsonObj.get("includeConvenienceFlag").isJsonNull()) && !jsonObj.get("includeConvenienceFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeConvenienceFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("includeConvenienceFlag").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("sendAllPfc") != null && !jsonObj.get("sendAllPfc").isJsonNull()) && !jsonObj.get("sendAllPfc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendAllPfc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendAllPfc").toString()));
      }
      if ((jsonObj.get("enableTransliterationFlag") != null && !jsonObj.get("enableTransliterationFlag").isJsonNull()) && !jsonObj.get("enableTransliterationFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableTransliterationFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enableTransliterationFlag").toString()));
      }
      if ((jsonObj.get("sendAllFundSrc") != null && !jsonObj.get("sendAllFundSrc").isJsonNull()) && !jsonObj.get("sendAllFundSrc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendAllFundSrc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendAllFundSrc").toString()));
      }
      if ((jsonObj.get("sendAllPhoneVvStatus") != null && !jsonObj.get("sendAllPhoneVvStatus").isJsonNull()) && !jsonObj.get("sendAllPhoneVvStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendAllPhoneVvStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendAllPhoneVvStatus").toString()));
      }
      if ((jsonObj.get("sendPrimaryProfileFlag") != null && !jsonObj.get("sendPrimaryProfileFlag").isJsonNull()) && !jsonObj.get("sendPrimaryProfileFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendPrimaryProfileFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendPrimaryProfileFlag").toString()));
      }
      if ((jsonObj.get("enableCrossChannelFlag") != null && !jsonObj.get("enableCrossChannelFlag").isJsonNull()) && !jsonObj.get("enableCrossChannelFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableCrossChannelFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enableCrossChannelFlag").toString()));
      }
      if ((jsonObj.get("sendConsolidatedFundingSources") != null && !jsonObj.get("sendConsolidatedFundingSources").isJsonNull()) && !jsonObj.get("sendConsolidatedFundingSources").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendConsolidatedFundingSources` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendConsolidatedFundingSources").toString()));
      }
      if ((jsonObj.get("sendConsolidatedReceivers") != null && !jsonObj.get("sendConsolidatedReceivers").isJsonNull()) && !jsonObj.get("sendConsolidatedReceivers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendConsolidatedReceivers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendConsolidatedReceivers").toString()));
      }
      if ((jsonObj.get("countryCodeIso2") != null && !jsonObj.get("countryCodeIso2").isJsonNull()) && !jsonObj.get("countryCodeIso2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCodeIso2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCodeIso2").toString()));
      }
      if ((jsonObj.get("countryCodeIso3") != null && !jsonObj.get("countryCodeIso3").isJsonNull()) && !jsonObj.get("countryCodeIso3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCodeIso3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCodeIso3").toString()));
      }
      if (!jsonObj.get("requestInitiatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestInitiatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestInitiatedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyLookupCustomerByReceiverLimitRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyLookupCustomerByReceiverLimitRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyLookupCustomerByReceiverLimitRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyLookupCustomerByReceiverLimitRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyLookupCustomerByReceiverLimitRequest>() {
           @Override
           public void write(JsonWriter out, KeyLookupCustomerByReceiverLimitRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyLookupCustomerByReceiverLimitRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyLookupCustomerByReceiverLimitRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyLookupCustomerByReceiverLimitRequest
  * @throws IOException if the JSON string is invalid with respect to KeyLookupCustomerByReceiverLimitRequest
  */
  public static KeyLookupCustomerByReceiverLimitRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyLookupCustomerByReceiverLimitRequest.class);
  }

 /**
  * Convert an instance of KeyLookupCustomerByReceiverLimitRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

