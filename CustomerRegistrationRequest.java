/*
 * ucd_cregn_v1_api
 * Swagger documentation for UCD Customer Registration Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerregistration;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.Account;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.AccountOnboarding;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.Address;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CounterPartyLink;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.Customer;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerAccountRepresentative;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerDevice;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerKycDetail;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerMiscFlags;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerPartner;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerReceiver;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerRole;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerServiceProvider;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerUsageStatistics;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerVerificationDetail;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.Email;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.FundingSource;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.Header;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.Kyc;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.Phone;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.Preferences;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.SecurityQueAndAns;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.Uab;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.JSON;

/**
 * This is the request model for CustomerRegistration service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:58:59.701576900+05:30[Asia/Calcutta]")
public class CustomerRegistrationRequest {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Header header;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<Address> address;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private Account account;

  public static final String SERIALIZED_NAME_ACCOUNT_ONBOARDING = "accountOnboarding";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ONBOARDING)
  private AccountOnboarding accountOnboarding;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private List<Phone> phone;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private List<Email> email;

  public static final String SERIALIZED_NAME_SECURITY = "security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private List<SecurityQueAndAns> security;

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private Preferences preferences;

  public static final String SERIALIZED_NAME_FUNDING_SOURCES = "fundingSources";
  @SerializedName(SERIALIZED_NAME_FUNDING_SOURCES)
  private List<FundingSource> fundingSources;

  public static final String SERIALIZED_NAME_KYC = "kyc";
  @SerializedName(SERIALIZED_NAME_KYC)
  private List<Kyc> kyc;

  public static final String SERIALIZED_NAME_CUSTOMER_KYC_DETAILS = "customerKycDetails";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_KYC_DETAILS)
  private List<CustomerKycDetail> customerKycDetails;

  public static final String SERIALIZED_NAME_CUSTOMER_VERIFICATION = "customerVerification";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_VERIFICATION)
  private List<CustomerVerificationDetail> customerVerification;

  public static final String SERIALIZED_NAME_COUNTER_PARTY_LINK = "counterPartyLink";
  @SerializedName(SERIALIZED_NAME_COUNTER_PARTY_LINK)
  private CounterPartyLink counterPartyLink;

  public static final String SERIALIZED_NAME_CUSTOMER_RECEIVER = "customerReceiver";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_RECEIVER)
  private List<CustomerReceiver> customerReceiver;

  public static final String SERIALIZED_NAME_UAB = "uab";
  @SerializedName(SERIALIZED_NAME_UAB)
  private List<Uab> uab;

  public static final String SERIALIZED_NAME_CUSTOMER_USAGE_STATISTICS = "customerUsageStatistics";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_USAGE_STATISTICS)
  private CustomerUsageStatistics customerUsageStatistics;

  public static final String SERIALIZED_NAME_CUSTOMER_PARTNER = "customerPartner";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PARTNER)
  private CustomerPartner customerPartner;

  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_REPRESENTATIVE = "customerAccountRepresentative";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_REPRESENTATIVE)
  private List<CustomerAccountRepresentative> customerAccountRepresentative;

  public static final String SERIALIZED_NAME_CUSTOMER_SERVICE_PROVIDER = "customerServiceProvider";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SERVICE_PROVIDER)
  private CustomerServiceProvider customerServiceProvider;

  public static final String SERIALIZED_NAME_CUSTOMER_DEVICE = "customerDevice";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_DEVICE)
  private CustomerDevice customerDevice;

  public static final String SERIALIZED_NAME_CUSTOMER_MISC_FLAGS = "customerMiscFlags";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_MISC_FLAGS)
  private List<CustomerMiscFlags> customerMiscFlags;

  public static final String SERIALIZED_NAME_CUSTOMER_ROLE = "customerRole";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ROLE)
  private CustomerRole customerRole;

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "requestType";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private String requestType;

  /**
   * This flag could be used to set default Preferences. Default is N. * Y - UCD will set the default preferences based on the country. * N / Null / Not Sent - UCD will set the preferences if passed in the request. 
   */
  @JsonAdapter(SetDefaultPreferencesEnum.Adapter.class)
  public enum SetDefaultPreferencesEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SetDefaultPreferencesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SetDefaultPreferencesEnum fromValue(String value) {
      for (SetDefaultPreferencesEnum b : SetDefaultPreferencesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SetDefaultPreferencesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SetDefaultPreferencesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SetDefaultPreferencesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SetDefaultPreferencesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SET_DEFAULT_PREFERENCES = "setDefaultPreferences";
  @SerializedName(SERIALIZED_NAME_SET_DEFAULT_PREFERENCES)
  private SetDefaultPreferencesEnum setDefaultPreferences = SetDefaultPreferencesEnum.N;

  /**
   * This flag could be used to get Customer details back if a duplicate Profile is found in UCD. Default is N. * Y - Existing customer details will be sent back in the response.  * N / Null / Not Sent - Existing customer details will not be sent back in the response. 
   */
  @JsonAdapter(IncludeSenderInfoEnum.Adapter.class)
  public enum IncludeSenderInfoEnum {
    Y("Y"),
    
    N("N");

    private String value;

    IncludeSenderInfoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncludeSenderInfoEnum fromValue(String value) {
      for (IncludeSenderInfoEnum b : IncludeSenderInfoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncludeSenderInfoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncludeSenderInfoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncludeSenderInfoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncludeSenderInfoEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INCLUDE_SENDER_INFO = "includeSenderInfo";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SENDER_INFO)
  private IncludeSenderInfoEnum includeSenderInfo = IncludeSenderInfoEnum.N;

  /**
   * This flag could be used to register Customer Profiles which could be identified across channels and impose the following constraints. * Primary Phone as mandatory (if enabled) * DOB as mandatory (if enabled) * GID as mandatory (if enabled) * Phone + DOB uniqueness (if enabled) * Phone restrictions to allow Primary / Mobile Phone to be assigned to maximum of 5 Customer Profiles (if enabled) * Identify already existing Customer with GID instead of NAPEM (Name + Address + Primary Phone + Email/Mobile Phone) / NA (Name + Address) / NP (Name + Phone) / NM (Name + Mobile)) (if enabled) * Mark Profile as Primary for a successful Customer Registration / Update (default)  Default is N. * Y - Will impose the above constraints. * N / Null / Not Sent - Will not impose the above constraints. 
   */
  @JsonAdapter(EnableCrossChannelFlagEnum.Adapter.class)
  public enum EnableCrossChannelFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EnableCrossChannelFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnableCrossChannelFlagEnum fromValue(String value) {
      for (EnableCrossChannelFlagEnum b : EnableCrossChannelFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnableCrossChannelFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnableCrossChannelFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnableCrossChannelFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnableCrossChannelFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENABLE_CROSS_CHANNEL_FLAG = "enableCrossChannelFlag";
  @SerializedName(SERIALIZED_NAME_ENABLE_CROSS_CHANNEL_FLAG)
  private EnableCrossChannelFlagEnum enableCrossChannelFlag = EnableCrossChannelFlagEnum.N;

  /**
   * This flag could be used to set default enrollment rules for Convenience. * Y - UCD will trigger default enrollment rules for Convenience.  * N / Null / Not Sent - UCD will not trigger default enrollment rules for Convenience. 
   */
  @JsonAdapter(DefaultConvEnrollmentEnum.Adapter.class)
  public enum DefaultConvEnrollmentEnum {
    Y("Y"),
    
    N("N");

    private String value;

    DefaultConvEnrollmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultConvEnrollmentEnum fromValue(String value) {
      for (DefaultConvEnrollmentEnum b : DefaultConvEnrollmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultConvEnrollmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultConvEnrollmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultConvEnrollmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultConvEnrollmentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_CONV_ENROLLMENT = "defaultConvEnrollment";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CONV_ENROLLMENT)
  private DefaultConvEnrollmentEnum defaultConvEnrollment = DefaultConvEnrollmentEnum.N;

  public static final String SERIALIZED_NAME_REQUEST_INITIATED_BY = "requestInitiatedBy";
  @SerializedName(SERIALIZED_NAME_REQUEST_INITIATED_BY)
  private String requestInitiatedBy;

  public CustomerRegistrationRequest() {
  }

  public CustomerRegistrationRequest header(Header header) {
    
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nonnull
  public Header getHeader() {
    return header;
  }


  public void setHeader(Header header) {
    this.header = header;
  }


  public CustomerRegistrationRequest customer(Customer customer) {
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nonnull
  public Customer getCustomer() {
    return customer;
  }


  public void setCustomer(Customer customer) {
    this.customer = customer;
  }


  public CustomerRegistrationRequest address(List<Address> address) {
    
    this.address = address;
    return this;
  }

  public CustomerRegistrationRequest addAddressItem(Address addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public List<Address> getAddress() {
    return address;
  }


  public void setAddress(List<Address> address) {
    this.address = address;
  }


  public CustomerRegistrationRequest account(Account account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable
  public Account getAccount() {
    return account;
  }


  public void setAccount(Account account) {
    this.account = account;
  }


  public CustomerRegistrationRequest accountOnboarding(AccountOnboarding accountOnboarding) {
    
    this.accountOnboarding = accountOnboarding;
    return this;
  }

   /**
   * Get accountOnboarding
   * @return accountOnboarding
  **/
  @javax.annotation.Nullable
  public AccountOnboarding getAccountOnboarding() {
    return accountOnboarding;
  }


  public void setAccountOnboarding(AccountOnboarding accountOnboarding) {
    this.accountOnboarding = accountOnboarding;
  }


  public CustomerRegistrationRequest phone(List<Phone> phone) {
    
    this.phone = phone;
    return this;
  }

  public CustomerRegistrationRequest addPhoneItem(Phone phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<>();
    }
    this.phone.add(phoneItem);
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nullable
  public List<Phone> getPhone() {
    return phone;
  }


  public void setPhone(List<Phone> phone) {
    this.phone = phone;
  }


  public CustomerRegistrationRequest email(List<Email> email) {
    
    this.email = email;
    return this;
  }

  public CustomerRegistrationRequest addEmailItem(Email emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  public List<Email> getEmail() {
    return email;
  }


  public void setEmail(List<Email> email) {
    this.email = email;
  }


  public CustomerRegistrationRequest security(List<SecurityQueAndAns> security) {
    
    this.security = security;
    return this;
  }

  public CustomerRegistrationRequest addSecurityItem(SecurityQueAndAns securityItem) {
    if (this.security == null) {
      this.security = new ArrayList<>();
    }
    this.security.add(securityItem);
    return this;
  }

   /**
   * Get security
   * @return security
  **/
  @javax.annotation.Nullable
  public List<SecurityQueAndAns> getSecurity() {
    return security;
  }


  public void setSecurity(List<SecurityQueAndAns> security) {
    this.security = security;
  }


  public CustomerRegistrationRequest preferences(Preferences preferences) {
    
    this.preferences = preferences;
    return this;
  }

   /**
   * Get preferences
   * @return preferences
  **/
  @javax.annotation.Nullable
  public Preferences getPreferences() {
    return preferences;
  }


  public void setPreferences(Preferences preferences) {
    this.preferences = preferences;
  }


  public CustomerRegistrationRequest fundingSources(List<FundingSource> fundingSources) {
    
    this.fundingSources = fundingSources;
    return this;
  }

  public CustomerRegistrationRequest addFundingSourcesItem(FundingSource fundingSourcesItem) {
    if (this.fundingSources == null) {
      this.fundingSources = new ArrayList<>();
    }
    this.fundingSources.add(fundingSourcesItem);
    return this;
  }

   /**
   * Get fundingSources
   * @return fundingSources
  **/
  @javax.annotation.Nullable
  public List<FundingSource> getFundingSources() {
    return fundingSources;
  }


  public void setFundingSources(List<FundingSource> fundingSources) {
    this.fundingSources = fundingSources;
  }


  public CustomerRegistrationRequest kyc(List<Kyc> kyc) {
    
    this.kyc = kyc;
    return this;
  }

  public CustomerRegistrationRequest addKycItem(Kyc kycItem) {
    if (this.kyc == null) {
      this.kyc = new ArrayList<>();
    }
    this.kyc.add(kycItem);
    return this;
  }

   /**
   * Get kyc
   * @return kyc
  **/
  @javax.annotation.Nullable
  public List<Kyc> getKyc() {
    return kyc;
  }


  public void setKyc(List<Kyc> kyc) {
    this.kyc = kyc;
  }


  public CustomerRegistrationRequest customerKycDetails(List<CustomerKycDetail> customerKycDetails) {
    
    this.customerKycDetails = customerKycDetails;
    return this;
  }

  public CustomerRegistrationRequest addCustomerKycDetailsItem(CustomerKycDetail customerKycDetailsItem) {
    if (this.customerKycDetails == null) {
      this.customerKycDetails = new ArrayList<>();
    }
    this.customerKycDetails.add(customerKycDetailsItem);
    return this;
  }

   /**
   * Get customerKycDetails
   * @return customerKycDetails
  **/
  @javax.annotation.Nullable
  public List<CustomerKycDetail> getCustomerKycDetails() {
    return customerKycDetails;
  }


  public void setCustomerKycDetails(List<CustomerKycDetail> customerKycDetails) {
    this.customerKycDetails = customerKycDetails;
  }


  public CustomerRegistrationRequest customerVerification(List<CustomerVerificationDetail> customerVerification) {
    
    this.customerVerification = customerVerification;
    return this;
  }

  public CustomerRegistrationRequest addCustomerVerificationItem(CustomerVerificationDetail customerVerificationItem) {
    if (this.customerVerification == null) {
      this.customerVerification = new ArrayList<>();
    }
    this.customerVerification.add(customerVerificationItem);
    return this;
  }

   /**
   * Get customerVerification
   * @return customerVerification
  **/
  @javax.annotation.Nullable
  public List<CustomerVerificationDetail> getCustomerVerification() {
    return customerVerification;
  }


  public void setCustomerVerification(List<CustomerVerificationDetail> customerVerification) {
    this.customerVerification = customerVerification;
  }


  public CustomerRegistrationRequest counterPartyLink(CounterPartyLink counterPartyLink) {
    
    this.counterPartyLink = counterPartyLink;
    return this;
  }

   /**
   * Get counterPartyLink
   * @return counterPartyLink
  **/
  @javax.annotation.Nullable
  public CounterPartyLink getCounterPartyLink() {
    return counterPartyLink;
  }


  public void setCounterPartyLink(CounterPartyLink counterPartyLink) {
    this.counterPartyLink = counterPartyLink;
  }


  public CustomerRegistrationRequest customerReceiver(List<CustomerReceiver> customerReceiver) {
    
    this.customerReceiver = customerReceiver;
    return this;
  }

  public CustomerRegistrationRequest addCustomerReceiverItem(CustomerReceiver customerReceiverItem) {
    if (this.customerReceiver == null) {
      this.customerReceiver = new ArrayList<>();
    }
    this.customerReceiver.add(customerReceiverItem);
    return this;
  }

   /**
   * Get customerReceiver
   * @return customerReceiver
  **/
  @javax.annotation.Nullable
  public List<CustomerReceiver> getCustomerReceiver() {
    return customerReceiver;
  }


  public void setCustomerReceiver(List<CustomerReceiver> customerReceiver) {
    this.customerReceiver = customerReceiver;
  }


  public CustomerRegistrationRequest uab(List<Uab> uab) {
    
    this.uab = uab;
    return this;
  }

  public CustomerRegistrationRequest addUabItem(Uab uabItem) {
    if (this.uab == null) {
      this.uab = new ArrayList<>();
    }
    this.uab.add(uabItem);
    return this;
  }

   /**
   * Get uab
   * @return uab
  **/
  @javax.annotation.Nullable
  public List<Uab> getUab() {
    return uab;
  }


  public void setUab(List<Uab> uab) {
    this.uab = uab;
  }


  public CustomerRegistrationRequest customerUsageStatistics(CustomerUsageStatistics customerUsageStatistics) {
    
    this.customerUsageStatistics = customerUsageStatistics;
    return this;
  }

   /**
   * Get customerUsageStatistics
   * @return customerUsageStatistics
  **/
  @javax.annotation.Nullable
  public CustomerUsageStatistics getCustomerUsageStatistics() {
    return customerUsageStatistics;
  }


  public void setCustomerUsageStatistics(CustomerUsageStatistics customerUsageStatistics) {
    this.customerUsageStatistics = customerUsageStatistics;
  }


  public CustomerRegistrationRequest customerPartner(CustomerPartner customerPartner) {
    
    this.customerPartner = customerPartner;
    return this;
  }

   /**
   * Get customerPartner
   * @return customerPartner
  **/
  @javax.annotation.Nullable
  public CustomerPartner getCustomerPartner() {
    return customerPartner;
  }


  public void setCustomerPartner(CustomerPartner customerPartner) {
    this.customerPartner = customerPartner;
  }


  public CustomerRegistrationRequest customerAccountRepresentative(List<CustomerAccountRepresentative> customerAccountRepresentative) {
    
    this.customerAccountRepresentative = customerAccountRepresentative;
    return this;
  }

  public CustomerRegistrationRequest addCustomerAccountRepresentativeItem(CustomerAccountRepresentative customerAccountRepresentativeItem) {
    if (this.customerAccountRepresentative == null) {
      this.customerAccountRepresentative = new ArrayList<>();
    }
    this.customerAccountRepresentative.add(customerAccountRepresentativeItem);
    return this;
  }

   /**
   * Get customerAccountRepresentative
   * @return customerAccountRepresentative
  **/
  @javax.annotation.Nullable
  public List<CustomerAccountRepresentative> getCustomerAccountRepresentative() {
    return customerAccountRepresentative;
  }


  public void setCustomerAccountRepresentative(List<CustomerAccountRepresentative> customerAccountRepresentative) {
    this.customerAccountRepresentative = customerAccountRepresentative;
  }


  public CustomerRegistrationRequest customerServiceProvider(CustomerServiceProvider customerServiceProvider) {
    
    this.customerServiceProvider = customerServiceProvider;
    return this;
  }

   /**
   * Get customerServiceProvider
   * @return customerServiceProvider
  **/
  @javax.annotation.Nullable
  public CustomerServiceProvider getCustomerServiceProvider() {
    return customerServiceProvider;
  }


  public void setCustomerServiceProvider(CustomerServiceProvider customerServiceProvider) {
    this.customerServiceProvider = customerServiceProvider;
  }


  public CustomerRegistrationRequest customerDevice(CustomerDevice customerDevice) {
    
    this.customerDevice = customerDevice;
    return this;
  }

   /**
   * Get customerDevice
   * @return customerDevice
  **/
  @javax.annotation.Nullable
  public CustomerDevice getCustomerDevice() {
    return customerDevice;
  }


  public void setCustomerDevice(CustomerDevice customerDevice) {
    this.customerDevice = customerDevice;
  }


  public CustomerRegistrationRequest customerMiscFlags(List<CustomerMiscFlags> customerMiscFlags) {
    
    this.customerMiscFlags = customerMiscFlags;
    return this;
  }

  public CustomerRegistrationRequest addCustomerMiscFlagsItem(CustomerMiscFlags customerMiscFlagsItem) {
    if (this.customerMiscFlags == null) {
      this.customerMiscFlags = new ArrayList<>();
    }
    this.customerMiscFlags.add(customerMiscFlagsItem);
    return this;
  }

   /**
   * Get customerMiscFlags
   * @return customerMiscFlags
  **/
  @javax.annotation.Nullable
  public List<CustomerMiscFlags> getCustomerMiscFlags() {
    return customerMiscFlags;
  }


  public void setCustomerMiscFlags(List<CustomerMiscFlags> customerMiscFlags) {
    this.customerMiscFlags = customerMiscFlags;
  }


  public CustomerRegistrationRequest customerRole(CustomerRole customerRole) {
    
    this.customerRole = customerRole;
    return this;
  }

   /**
   * Get customerRole
   * @return customerRole
  **/
  @javax.annotation.Nullable
  public CustomerRole getCustomerRole() {
    return customerRole;
  }


  public void setCustomerRole(CustomerRole customerRole) {
    this.customerRole = customerRole;
  }


  public CustomerRegistrationRequest requestType(String requestType) {
    
    this.requestType = requestType;
    return this;
  }

   /**
   * Request Type. This field is used in RCM only. N/A for UCD. 
   * @return requestType
  **/
  @javax.annotation.Nullable
  public String getRequestType() {
    return requestType;
  }


  public void setRequestType(String requestType) {
    this.requestType = requestType;
  }


  public CustomerRegistrationRequest setDefaultPreferences(SetDefaultPreferencesEnum setDefaultPreferences) {
    
    this.setDefaultPreferences = setDefaultPreferences;
    return this;
  }

   /**
   * This flag could be used to set default Preferences. Default is N. * Y - UCD will set the default preferences based on the country. * N / Null / Not Sent - UCD will set the preferences if passed in the request. 
   * @return setDefaultPreferences
  **/
  @javax.annotation.Nullable
  public SetDefaultPreferencesEnum getSetDefaultPreferences() {
    return setDefaultPreferences;
  }


  public void setSetDefaultPreferences(SetDefaultPreferencesEnum setDefaultPreferences) {
    this.setDefaultPreferences = setDefaultPreferences;
  }


  public CustomerRegistrationRequest includeSenderInfo(IncludeSenderInfoEnum includeSenderInfo) {
    
    this.includeSenderInfo = includeSenderInfo;
    return this;
  }

   /**
   * This flag could be used to get Customer details back if a duplicate Profile is found in UCD. Default is N. * Y - Existing customer details will be sent back in the response.  * N / Null / Not Sent - Existing customer details will not be sent back in the response. 
   * @return includeSenderInfo
  **/
  @javax.annotation.Nullable
  public IncludeSenderInfoEnum getIncludeSenderInfo() {
    return includeSenderInfo;
  }


  public void setIncludeSenderInfo(IncludeSenderInfoEnum includeSenderInfo) {
    this.includeSenderInfo = includeSenderInfo;
  }


  public CustomerRegistrationRequest enableCrossChannelFlag(EnableCrossChannelFlagEnum enableCrossChannelFlag) {
    
    this.enableCrossChannelFlag = enableCrossChannelFlag;
    return this;
  }

   /**
   * This flag could be used to register Customer Profiles which could be identified across channels and impose the following constraints. * Primary Phone as mandatory (if enabled) * DOB as mandatory (if enabled) * GID as mandatory (if enabled) * Phone + DOB uniqueness (if enabled) * Phone restrictions to allow Primary / Mobile Phone to be assigned to maximum of 5 Customer Profiles (if enabled) * Identify already existing Customer with GID instead of NAPEM (Name + Address + Primary Phone + Email/Mobile Phone) / NA (Name + Address) / NP (Name + Phone) / NM (Name + Mobile)) (if enabled) * Mark Profile as Primary for a successful Customer Registration / Update (default)  Default is N. * Y - Will impose the above constraints. * N / Null / Not Sent - Will not impose the above constraints. 
   * @return enableCrossChannelFlag
  **/
  @javax.annotation.Nullable
  public EnableCrossChannelFlagEnum getEnableCrossChannelFlag() {
    return enableCrossChannelFlag;
  }


  public void setEnableCrossChannelFlag(EnableCrossChannelFlagEnum enableCrossChannelFlag) {
    this.enableCrossChannelFlag = enableCrossChannelFlag;
  }


  public CustomerRegistrationRequest defaultConvEnrollment(DefaultConvEnrollmentEnum defaultConvEnrollment) {
    
    this.defaultConvEnrollment = defaultConvEnrollment;
    return this;
  }

   /**
   * This flag could be used to set default enrollment rules for Convenience. * Y - UCD will trigger default enrollment rules for Convenience.  * N / Null / Not Sent - UCD will not trigger default enrollment rules for Convenience. 
   * @return defaultConvEnrollment
  **/
  @javax.annotation.Nullable
  public DefaultConvEnrollmentEnum getDefaultConvEnrollment() {
    return defaultConvEnrollment;
  }


  public void setDefaultConvEnrollment(DefaultConvEnrollmentEnum defaultConvEnrollment) {
    this.defaultConvEnrollment = defaultConvEnrollment;
  }


  public CustomerRegistrationRequest requestInitiatedBy(String requestInitiatedBy) {
    
    this.requestInitiatedBy = requestInitiatedBy;
    return this;
  }

   /**
   * To identify who has initiated the request.
   * @return requestInitiatedBy
  **/
  @javax.annotation.Nonnull
  public String getRequestInitiatedBy() {
    return requestInitiatedBy;
  }


  public void setRequestInitiatedBy(String requestInitiatedBy) {
    this.requestInitiatedBy = requestInitiatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerRegistrationRequest customerRegistrationRequest = (CustomerRegistrationRequest) o;
    return Objects.equals(this.header, customerRegistrationRequest.header) &&
        Objects.equals(this.customer, customerRegistrationRequest.customer) &&
        Objects.equals(this.address, customerRegistrationRequest.address) &&
        Objects.equals(this.account, customerRegistrationRequest.account) &&
        Objects.equals(this.accountOnboarding, customerRegistrationRequest.accountOnboarding) &&
        Objects.equals(this.phone, customerRegistrationRequest.phone) &&
        Objects.equals(this.email, customerRegistrationRequest.email) &&
        Objects.equals(this.security, customerRegistrationRequest.security) &&
        Objects.equals(this.preferences, customerRegistrationRequest.preferences) &&
        Objects.equals(this.fundingSources, customerRegistrationRequest.fundingSources) &&
        Objects.equals(this.kyc, customerRegistrationRequest.kyc) &&
        Objects.equals(this.customerKycDetails, customerRegistrationRequest.customerKycDetails) &&
        Objects.equals(this.customerVerification, customerRegistrationRequest.customerVerification) &&
        Objects.equals(this.counterPartyLink, customerRegistrationRequest.counterPartyLink) &&
        Objects.equals(this.customerReceiver, customerRegistrationRequest.customerReceiver) &&
        Objects.equals(this.uab, customerRegistrationRequest.uab) &&
        Objects.equals(this.customerUsageStatistics, customerRegistrationRequest.customerUsageStatistics) &&
        Objects.equals(this.customerPartner, customerRegistrationRequest.customerPartner) &&
        Objects.equals(this.customerAccountRepresentative, customerRegistrationRequest.customerAccountRepresentative) &&
        Objects.equals(this.customerServiceProvider, customerRegistrationRequest.customerServiceProvider) &&
        Objects.equals(this.customerDevice, customerRegistrationRequest.customerDevice) &&
        Objects.equals(this.customerMiscFlags, customerRegistrationRequest.customerMiscFlags) &&
        Objects.equals(this.customerRole, customerRegistrationRequest.customerRole) &&
        Objects.equals(this.requestType, customerRegistrationRequest.requestType) &&
        Objects.equals(this.setDefaultPreferences, customerRegistrationRequest.setDefaultPreferences) &&
        Objects.equals(this.includeSenderInfo, customerRegistrationRequest.includeSenderInfo) &&
        Objects.equals(this.enableCrossChannelFlag, customerRegistrationRequest.enableCrossChannelFlag) &&
        Objects.equals(this.defaultConvEnrollment, customerRegistrationRequest.defaultConvEnrollment) &&
        Objects.equals(this.requestInitiatedBy, customerRegistrationRequest.requestInitiatedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, customer, address, account, accountOnboarding, phone, email, security, preferences, fundingSources, kyc, customerKycDetails, customerVerification, counterPartyLink, customerReceiver, uab, customerUsageStatistics, customerPartner, customerAccountRepresentative, customerServiceProvider, customerDevice, customerMiscFlags, customerRole, requestType, setDefaultPreferences, includeSenderInfo, enableCrossChannelFlag, defaultConvEnrollment, requestInitiatedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerRegistrationRequest {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    accountOnboarding: ").append(toIndentedString(accountOnboarding)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    fundingSources: ").append(toIndentedString(fundingSources)).append("\n");
    sb.append("    kyc: ").append(toIndentedString(kyc)).append("\n");
    sb.append("    customerKycDetails: ").append(toIndentedString(customerKycDetails)).append("\n");
    sb.append("    customerVerification: ").append(toIndentedString(customerVerification)).append("\n");
    sb.append("    counterPartyLink: ").append(toIndentedString(counterPartyLink)).append("\n");
    sb.append("    customerReceiver: ").append(toIndentedString(customerReceiver)).append("\n");
    sb.append("    uab: ").append(toIndentedString(uab)).append("\n");
    sb.append("    customerUsageStatistics: ").append(toIndentedString(customerUsageStatistics)).append("\n");
    sb.append("    customerPartner: ").append(toIndentedString(customerPartner)).append("\n");
    sb.append("    customerAccountRepresentative: ").append(toIndentedString(customerAccountRepresentative)).append("\n");
    sb.append("    customerServiceProvider: ").append(toIndentedString(customerServiceProvider)).append("\n");
    sb.append("    customerDevice: ").append(toIndentedString(customerDevice)).append("\n");
    sb.append("    customerMiscFlags: ").append(toIndentedString(customerMiscFlags)).append("\n");
    sb.append("    customerRole: ").append(toIndentedString(customerRole)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    setDefaultPreferences: ").append(toIndentedString(setDefaultPreferences)).append("\n");
    sb.append("    includeSenderInfo: ").append(toIndentedString(includeSenderInfo)).append("\n");
    sb.append("    enableCrossChannelFlag: ").append(toIndentedString(enableCrossChannelFlag)).append("\n");
    sb.append("    defaultConvEnrollment: ").append(toIndentedString(defaultConvEnrollment)).append("\n");
    sb.append("    requestInitiatedBy: ").append(toIndentedString(requestInitiatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("customer");
    openapiFields.add("address");
    openapiFields.add("account");
    openapiFields.add("accountOnboarding");
    openapiFields.add("phone");
    openapiFields.add("email");
    openapiFields.add("security");
    openapiFields.add("preferences");
    openapiFields.add("fundingSources");
    openapiFields.add("kyc");
    openapiFields.add("customerKycDetails");
    openapiFields.add("customerVerification");
    openapiFields.add("counterPartyLink");
    openapiFields.add("customerReceiver");
    openapiFields.add("uab");
    openapiFields.add("customerUsageStatistics");
    openapiFields.add("customerPartner");
    openapiFields.add("customerAccountRepresentative");
    openapiFields.add("customerServiceProvider");
    openapiFields.add("customerDevice");
    openapiFields.add("customerMiscFlags");
    openapiFields.add("customerRole");
    openapiFields.add("requestType");
    openapiFields.add("setDefaultPreferences");
    openapiFields.add("includeSenderInfo");
    openapiFields.add("enableCrossChannelFlag");
    openapiFields.add("defaultConvEnrollment");
    openapiFields.add("requestInitiatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("header");
    openapiRequiredFields.add("customer");
    openapiRequiredFields.add("requestInitiatedBy");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerRegistrationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerRegistrationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerRegistrationRequest is not found in the empty JSON string", CustomerRegistrationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerRegistrationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerRegistrationRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerRegistrationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `header`
      Header.validateJsonObject(jsonObj.getAsJsonObject("header"));
      // validate the required field `customer`
      Customer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
          }

          // validate the optional field `address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            Address.validateJsonObject(jsonArrayaddress.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        Account.validateJsonObject(jsonObj.getAsJsonObject("account"));
      }
      // validate the optional field `accountOnboarding`
      if (jsonObj.get("accountOnboarding") != null && !jsonObj.get("accountOnboarding").isJsonNull()) {
        AccountOnboarding.validateJsonObject(jsonObj.getAsJsonObject("accountOnboarding"));
      }
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) {
        JsonArray jsonArrayphone = jsonObj.getAsJsonArray("phone");
        if (jsonArrayphone != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phone").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phone` to be an array in the JSON string but got `%s`", jsonObj.get("phone").toString()));
          }

          // validate the optional field `phone` (array)
          for (int i = 0; i < jsonArrayphone.size(); i++) {
            Phone.validateJsonObject(jsonArrayphone.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) {
        JsonArray jsonArrayemail = jsonObj.getAsJsonArray("email");
        if (jsonArrayemail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("email").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `email` to be an array in the JSON string but got `%s`", jsonObj.get("email").toString()));
          }

          // validate the optional field `email` (array)
          for (int i = 0; i < jsonArrayemail.size(); i++) {
            Email.validateJsonObject(jsonArrayemail.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("security") != null && !jsonObj.get("security").isJsonNull()) {
        JsonArray jsonArraysecurity = jsonObj.getAsJsonArray("security");
        if (jsonArraysecurity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("security").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `security` to be an array in the JSON string but got `%s`", jsonObj.get("security").toString()));
          }

          // validate the optional field `security` (array)
          for (int i = 0; i < jsonArraysecurity.size(); i++) {
            SecurityQueAndAns.validateJsonObject(jsonArraysecurity.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `preferences`
      if (jsonObj.get("preferences") != null && !jsonObj.get("preferences").isJsonNull()) {
        Preferences.validateJsonObject(jsonObj.getAsJsonObject("preferences"));
      }
      if (jsonObj.get("fundingSources") != null && !jsonObj.get("fundingSources").isJsonNull()) {
        JsonArray jsonArrayfundingSources = jsonObj.getAsJsonArray("fundingSources");
        if (jsonArrayfundingSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fundingSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fundingSources` to be an array in the JSON string but got `%s`", jsonObj.get("fundingSources").toString()));
          }

          // validate the optional field `fundingSources` (array)
          for (int i = 0; i < jsonArrayfundingSources.size(); i++) {
            FundingSource.validateJsonObject(jsonArrayfundingSources.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("kyc") != null && !jsonObj.get("kyc").isJsonNull()) {
        JsonArray jsonArraykyc = jsonObj.getAsJsonArray("kyc");
        if (jsonArraykyc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("kyc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `kyc` to be an array in the JSON string but got `%s`", jsonObj.get("kyc").toString()));
          }

          // validate the optional field `kyc` (array)
          for (int i = 0; i < jsonArraykyc.size(); i++) {
            Kyc.validateJsonObject(jsonArraykyc.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerKycDetails") != null && !jsonObj.get("customerKycDetails").isJsonNull()) {
        JsonArray jsonArraycustomerKycDetails = jsonObj.getAsJsonArray("customerKycDetails");
        if (jsonArraycustomerKycDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerKycDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerKycDetails` to be an array in the JSON string but got `%s`", jsonObj.get("customerKycDetails").toString()));
          }

          // validate the optional field `customerKycDetails` (array)
          for (int i = 0; i < jsonArraycustomerKycDetails.size(); i++) {
            CustomerKycDetail.validateJsonObject(jsonArraycustomerKycDetails.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerVerification") != null && !jsonObj.get("customerVerification").isJsonNull()) {
        JsonArray jsonArraycustomerVerification = jsonObj.getAsJsonArray("customerVerification");
        if (jsonArraycustomerVerification != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerVerification").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerVerification` to be an array in the JSON string but got `%s`", jsonObj.get("customerVerification").toString()));
          }

          // validate the optional field `customerVerification` (array)
          for (int i = 0; i < jsonArraycustomerVerification.size(); i++) {
            CustomerVerificationDetail.validateJsonObject(jsonArraycustomerVerification.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `counterPartyLink`
      if (jsonObj.get("counterPartyLink") != null && !jsonObj.get("counterPartyLink").isJsonNull()) {
        CounterPartyLink.validateJsonObject(jsonObj.getAsJsonObject("counterPartyLink"));
      }
      if (jsonObj.get("customerReceiver") != null && !jsonObj.get("customerReceiver").isJsonNull()) {
        JsonArray jsonArraycustomerReceiver = jsonObj.getAsJsonArray("customerReceiver");
        if (jsonArraycustomerReceiver != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerReceiver").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerReceiver` to be an array in the JSON string but got `%s`", jsonObj.get("customerReceiver").toString()));
          }

          // validate the optional field `customerReceiver` (array)
          for (int i = 0; i < jsonArraycustomerReceiver.size(); i++) {
            CustomerReceiver.validateJsonObject(jsonArraycustomerReceiver.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("uab") != null && !jsonObj.get("uab").isJsonNull()) {
        JsonArray jsonArrayuab = jsonObj.getAsJsonArray("uab");
        if (jsonArrayuab != null) {
          // ensure the json data is an array
          if (!jsonObj.get("uab").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `uab` to be an array in the JSON string but got `%s`", jsonObj.get("uab").toString()));
          }

          // validate the optional field `uab` (array)
          for (int i = 0; i < jsonArrayuab.size(); i++) {
            Uab.validateJsonObject(jsonArrayuab.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `customerUsageStatistics`
      if (jsonObj.get("customerUsageStatistics") != null && !jsonObj.get("customerUsageStatistics").isJsonNull()) {
        CustomerUsageStatistics.validateJsonObject(jsonObj.getAsJsonObject("customerUsageStatistics"));
      }
      // validate the optional field `customerPartner`
      if (jsonObj.get("customerPartner") != null && !jsonObj.get("customerPartner").isJsonNull()) {
        CustomerPartner.validateJsonObject(jsonObj.getAsJsonObject("customerPartner"));
      }
      if (jsonObj.get("customerAccountRepresentative") != null && !jsonObj.get("customerAccountRepresentative").isJsonNull()) {
        JsonArray jsonArraycustomerAccountRepresentative = jsonObj.getAsJsonArray("customerAccountRepresentative");
        if (jsonArraycustomerAccountRepresentative != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerAccountRepresentative").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerAccountRepresentative` to be an array in the JSON string but got `%s`", jsonObj.get("customerAccountRepresentative").toString()));
          }

          // validate the optional field `customerAccountRepresentative` (array)
          for (int i = 0; i < jsonArraycustomerAccountRepresentative.size(); i++) {
            CustomerAccountRepresentative.validateJsonObject(jsonArraycustomerAccountRepresentative.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `customerServiceProvider`
      if (jsonObj.get("customerServiceProvider") != null && !jsonObj.get("customerServiceProvider").isJsonNull()) {
        CustomerServiceProvider.validateJsonObject(jsonObj.getAsJsonObject("customerServiceProvider"));
      }
      // validate the optional field `customerDevice`
      if (jsonObj.get("customerDevice") != null && !jsonObj.get("customerDevice").isJsonNull()) {
        CustomerDevice.validateJsonObject(jsonObj.getAsJsonObject("customerDevice"));
      }
      if (jsonObj.get("customerMiscFlags") != null && !jsonObj.get("customerMiscFlags").isJsonNull()) {
        JsonArray jsonArraycustomerMiscFlags = jsonObj.getAsJsonArray("customerMiscFlags");
        if (jsonArraycustomerMiscFlags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerMiscFlags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerMiscFlags` to be an array in the JSON string but got `%s`", jsonObj.get("customerMiscFlags").toString()));
          }

          // validate the optional field `customerMiscFlags` (array)
          for (int i = 0; i < jsonArraycustomerMiscFlags.size(); i++) {
            CustomerMiscFlags.validateJsonObject(jsonArraycustomerMiscFlags.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `customerRole`
      if (jsonObj.get("customerRole") != null && !jsonObj.get("customerRole").isJsonNull()) {
        CustomerRole.validateJsonObject(jsonObj.getAsJsonObject("customerRole"));
      }
      if ((jsonObj.get("requestType") != null && !jsonObj.get("requestType").isJsonNull()) && !jsonObj.get("requestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestType").toString()));
      }
      if ((jsonObj.get("setDefaultPreferences") != null && !jsonObj.get("setDefaultPreferences").isJsonNull()) && !jsonObj.get("setDefaultPreferences").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `setDefaultPreferences` to be a primitive type in the JSON string but got `%s`", jsonObj.get("setDefaultPreferences").toString()));
      }
      if ((jsonObj.get("includeSenderInfo") != null && !jsonObj.get("includeSenderInfo").isJsonNull()) && !jsonObj.get("includeSenderInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeSenderInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("includeSenderInfo").toString()));
      }
      if ((jsonObj.get("enableCrossChannelFlag") != null && !jsonObj.get("enableCrossChannelFlag").isJsonNull()) && !jsonObj.get("enableCrossChannelFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableCrossChannelFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enableCrossChannelFlag").toString()));
      }
      if ((jsonObj.get("defaultConvEnrollment") != null && !jsonObj.get("defaultConvEnrollment").isJsonNull()) && !jsonObj.get("defaultConvEnrollment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultConvEnrollment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultConvEnrollment").toString()));
      }
      if (!jsonObj.get("requestInitiatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestInitiatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestInitiatedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerRegistrationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerRegistrationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerRegistrationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerRegistrationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerRegistrationRequest>() {
           @Override
           public void write(JsonWriter out, CustomerRegistrationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerRegistrationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerRegistrationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerRegistrationRequest
  * @throws IOException if the JSON string is invalid with respect to CustomerRegistrationRequest
  */
  public static CustomerRegistrationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerRegistrationRequest.class);
  }

 /**
  * Convert an instance of CustomerRegistrationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

