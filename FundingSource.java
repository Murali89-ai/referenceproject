/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * FundingSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class FundingSource {
  public static final String SERIALIZED_NAME_FUNDING_SEQ_INDEX = "fundingSeqIndex";
  @SerializedName(SERIALIZED_NAME_FUNDING_SEQ_INDEX)
  private Long fundingSeqIndex;

  public static final String SERIALIZED_NAME_FUNDING_SOURCE_TYPE = "fundingSourceType";
  @SerializedName(SERIALIZED_NAME_FUNDING_SOURCE_TYPE)
  private Integer fundingSourceType;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "cardNumber";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routingNumber";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public static final String SERIALIZED_NAME_CARD_TYPE = "cardType";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE)
  private String cardType;

  public static final String SERIALIZED_NAME_CARD_EXPIRY_DATE = "cardExpiryDate";
  @SerializedName(SERIALIZED_NAME_CARD_EXPIRY_DATE)
  private LocalDate cardExpiryDate;

  public static final String SERIALIZED_NAME_BILLING_FIRST_NAME = "billingFirstName";
  @SerializedName(SERIALIZED_NAME_BILLING_FIRST_NAME)
  private String billingFirstName;

  public static final String SERIALIZED_NAME_BILLING_LAST_NAME = "billingLastName";
  @SerializedName(SERIALIZED_NAME_BILLING_LAST_NAME)
  private String billingLastName;

  public static final String SERIALIZED_NAME_BILLING_MIDDLE_NAME = "billingMiddleName";
  @SerializedName(SERIALIZED_NAME_BILLING_MIDDLE_NAME)
  private String billingMiddleName;

  public static final String SERIALIZED_NAME_BILLING_PATERNAL_NAME = "billingPaternalName";
  @SerializedName(SERIALIZED_NAME_BILLING_PATERNAL_NAME)
  private String billingPaternalName;

  public static final String SERIALIZED_NAME_BILLING_MATERNAL_NAME = "billingMaternalName";
  @SerializedName(SERIALIZED_NAME_BILLING_MATERNAL_NAME)
  private String billingMaternalName;

  public static final String SERIALIZED_NAME_BILLING_PHONE_NUMBER = "billingPhoneNumber";
  @SerializedName(SERIALIZED_NAME_BILLING_PHONE_NUMBER)
  private String billingPhoneNumber;

  public static final String SERIALIZED_NAME_CURRENCY_ISO = "currencyIso";
  @SerializedName(SERIALIZED_NAME_CURRENCY_ISO)
  private String currencyIso;

  public static final String SERIALIZED_NAME_CARD_STATUS = "cardStatus";
  @SerializedName(SERIALIZED_NAME_CARD_STATUS)
  private String cardStatus;

  public static final String SERIALIZED_NAME_TRAFFIC_FLAG = "trafficFlag";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_FLAG)
  private String trafficFlag;

  public static final String SERIALIZED_NAME_ACTIVITY_DATE = "activityDate";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_DATE)
  private String activityDate;

  public static final String SERIALIZED_NAME_FUNDING_UAB = "fundingUab";
  @SerializedName(SERIALIZED_NAME_FUNDING_UAB)
  private String fundingUab;

  public static final String SERIALIZED_NAME_FUNDING_NICK_NAME = "fundingNickName";
  @SerializedName(SERIALIZED_NAME_FUNDING_NICK_NAME)
  private String fundingNickName;

  /**
   * This indicates whethercpc  the Funding Source is/not preferred.&#39;
   */
  @JsonAdapter(PreferredFundingEnum.Adapter.class)
  public enum PreferredFundingEnum {
    Y("Y"),
    
    N("N");

    private String value;

    PreferredFundingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreferredFundingEnum fromValue(String value) {
      for (PreferredFundingEnum b : PreferredFundingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PreferredFundingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreferredFundingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreferredFundingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PreferredFundingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PREFERRED_FUNDING = "preferredFunding";
  @SerializedName(SERIALIZED_NAME_PREFERRED_FUNDING)
  private PreferredFundingEnum preferredFunding;

  public static final String SERIALIZED_NAME_FUNDING_SOFT_DESCRIPTION = "fundingSoftDescription";
  @SerializedName(SERIALIZED_NAME_FUNDING_SOFT_DESCRIPTION)
  private String fundingSoftDescription;

  public static final String SERIALIZED_NAME_BANK_NAME = "bankName";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private String bankName;

  public static final String SERIALIZED_NAME_ACCOUNT_STATUS = "accountStatus";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_STATUS)
  private String accountStatus;

  public static final String SERIALIZED_NAME_VERIFY_METHOD = "verifyMethod";
  @SerializedName(SERIALIZED_NAME_VERIFY_METHOD)
  private String verifyMethod;

  public static final String SERIALIZED_NAME_VERIFY_STATUS = "verifyStatus";
  @SerializedName(SERIALIZED_NAME_VERIFY_STATUS)
  private String verifyStatus;

  public static final String SERIALIZED_NAME_VERIFY_DATE = "verifyDate";
  @SerializedName(SERIALIZED_NAME_VERIFY_DATE)
  private String verifyDate;

  public static final String SERIALIZED_NAME_VERIFY_FAILED_REASON = "verifyFailedReason";
  @SerializedName(SERIALIZED_NAME_VERIFY_FAILED_REASON)
  private String verifyFailedReason;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_ISSUE_NUMBER = "issueNumber";
  @SerializedName(SERIALIZED_NAME_ISSUE_NUMBER)
  private String issueNumber;

  /**
   * Account Updater Flag. * Y - by account updater process * N or NULL - Normal process 
   */
  @JsonAdapter(AcctUpdaterFlagEnum.Adapter.class)
  public enum AcctUpdaterFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    AcctUpdaterFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcctUpdaterFlagEnum fromValue(String value) {
      for (AcctUpdaterFlagEnum b : AcctUpdaterFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcctUpdaterFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcctUpdaterFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcctUpdaterFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcctUpdaterFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCT_UPDATER_FLAG = "acctUpdaterFlag";
  @SerializedName(SERIALIZED_NAME_ACCT_UPDATER_FLAG)
  private AcctUpdaterFlagEnum acctUpdaterFlag;

  public static final String SERIALIZED_NAME_OLD_CARD_NUMBER = "oldCardNumber";
  @SerializedName(SERIALIZED_NAME_OLD_CARD_NUMBER)
  private String oldCardNumber;

  public static final String SERIALIZED_NAME_BANK_CODE = "bankCode";
  @SerializedName(SERIALIZED_NAME_BANK_CODE)
  private String bankCode;

  public static final String SERIALIZED_NAME_BANK_BRANCH_CODE = "bankBranchCode";
  @SerializedName(SERIALIZED_NAME_BANK_BRANCH_CODE)
  private String bankBranchCode;

  public static final String SERIALIZED_NAME_CARD_ID = "cardId";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  /**
   * Customer&#39;s Card Consent Flag for Automatic updation of Card renewal. * Y - Consent given by Customer * NULL or N - Consent not given by Customer 
   */
  @JsonAdapter(CardConsentFlagEnum.Adapter.class)
  public enum CardConsentFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    CardConsentFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardConsentFlagEnum fromValue(String value) {
      for (CardConsentFlagEnum b : CardConsentFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CardConsentFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardConsentFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardConsentFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CardConsentFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CARD_CONSENT_FLAG = "cardConsentFlag";
  @SerializedName(SERIALIZED_NAME_CARD_CONSENT_FLAG)
  private CardConsentFlagEnum cardConsentFlag;

  public static final String SERIALIZED_NAME_CARD_CONSENT_DATE = "cardConsentDate";
  @SerializedName(SERIALIZED_NAME_CARD_CONSENT_DATE)
  private String cardConsentDate;

  public static final String SERIALIZED_NAME_CARD_CONSENT_MTCN = "cardConsentMtcn";
  @SerializedName(SERIALIZED_NAME_CARD_CONSENT_MTCN)
  private String cardConsentMtcn;

  public static final String SERIALIZED_NAME_CARD_CONSENT_TRANSACTION_DATE = "cardConsentTransactionDate";
  @SerializedName(SERIALIZED_NAME_CARD_CONSENT_TRANSACTION_DATE)
  private String cardConsentTransactionDate;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS_SEARCH_JSON = "billingAddressSearchJson";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_SEARCH_JSON)
  private String billingAddressSearchJson;

  /**
   * This field indicates whether Card could be used/not for Recurring Payment. First character will be used for TMT Customer&#39;s and second character will be used for Digital Customer&#39;s to store the Recurring Payment Flag in DB. * Y – Recurring Payment – The Funding Source will be used by TMT customer for recurring payment * N – Not a Recurring Payment – The  Funding source will not be recurring.  
   */
  @JsonAdapter(RecurringPaymentFlagEnum.Adapter.class)
  public enum RecurringPaymentFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    RecurringPaymentFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecurringPaymentFlagEnum fromValue(String value) {
      for (RecurringPaymentFlagEnum b : RecurringPaymentFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecurringPaymentFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecurringPaymentFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecurringPaymentFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecurringPaymentFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RECURRING_PAYMENT_FLAG = "recurringPaymentFlag";
  @SerializedName(SERIALIZED_NAME_RECURRING_PAYMENT_FLAG)
  private RecurringPaymentFlagEnum recurringPaymentFlag;

  public static final String SERIALIZED_NAME_RECURRING_PAYMENT_UPDATED_DATE = "recurringPaymentUpdatedDate";
  @SerializedName(SERIALIZED_NAME_RECURRING_PAYMENT_UPDATED_DATE)
  private String recurringPaymentUpdatedDate;

  /**
   * This field indicates whether Card could be used/not for Regular Payment. First character will be used for TMT Customer&#39;s and second character will be used for Digital Customer&#39;s to store the Regular Payment Flag in DB. * Y – Regular Payment – The Funding Source will be used by TMT customer for recurring payment * N or NULL – Not a Regular Payment.  
   */
  @JsonAdapter(RegularPaymentFlagEnum.Adapter.class)
  public enum RegularPaymentFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    RegularPaymentFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegularPaymentFlagEnum fromValue(String value) {
      for (RegularPaymentFlagEnum b : RegularPaymentFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegularPaymentFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegularPaymentFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegularPaymentFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegularPaymentFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REGULAR_PAYMENT_FLAG = "regularPaymentFlag";
  @SerializedName(SERIALIZED_NAME_REGULAR_PAYMENT_FLAG)
  private RegularPaymentFlagEnum regularPaymentFlag;

  public static final String SERIALIZED_NAME_REGULAR_PAYMENT_UPDATED_DATE = "regularPaymentUpdatedDate";
  @SerializedName(SERIALIZED_NAME_REGULAR_PAYMENT_UPDATED_DATE)
  private String regularPaymentUpdatedDate;

  public static final String SERIALIZED_NAME_PAYMENT_FLAG_SOURCE = "paymentFlagSource";
  @SerializedName(SERIALIZED_NAME_PAYMENT_FLAG_SOURCE)
  private String paymentFlagSource;

  /**
   * This field indicates whether this is a/not a default Funding Source.
   */
  @JsonAdapter(IsDefaultEnum.Adapter.class)
  public enum IsDefaultEnum {
    Y("Y"),
    
    N("N");

    private String value;

    IsDefaultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsDefaultEnum fromValue(String value) {
      for (IsDefaultEnum b : IsDefaultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsDefaultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsDefaultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsDefaultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IsDefaultEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private IsDefaultEnum isDefault;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_CARD_ISSUE_NUMBER = "cardIssueNumber";
  @SerializedName(SERIALIZED_NAME_CARD_ISSUE_NUMBER)
  private Integer cardIssueNumber;

  public static final String SERIALIZED_NAME_DO_ZDA_FLAG = "doZdaFlag";
  @SerializedName(SERIALIZED_NAME_DO_ZDA_FLAG)
  private String doZdaFlag;

  public static final String SERIALIZED_NAME_BIN_NUMBER = "binNumber";
  @SerializedName(SERIALIZED_NAME_BIN_NUMBER)
  private String binNumber;

  public static final String SERIALIZED_NAME_CARD_SCANNED_FLAG = "cardScannedFlag";
  @SerializedName(SERIALIZED_NAME_CARD_SCANNED_FLAG)
  private String cardScannedFlag;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_SWIFT_CODE = "swiftCode";
  @SerializedName(SERIALIZED_NAME_SWIFT_CODE)
  private String swiftCode;

  public static final String SERIALIZED_NAME_SORT_CODE = "sortCode";
  @SerializedName(SERIALIZED_NAME_SORT_CODE)
  private String sortCode;

  public static final String SERIALIZED_NAME_RCV_FINANCIAL_ID = "rcvFinancialId";
  @SerializedName(SERIALIZED_NAME_RCV_FINANCIAL_ID)
  private String rcvFinancialId;

  public static final String SERIALIZED_NAME_CARD_TYPE_IDENTIFIED = "cardTypeIdentified";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE_IDENTIFIED)
  private String cardTypeIdentified;

  public static final String SERIALIZED_NAME_BANK_COUNTRY_CODE = "bankCountryCode";
  @SerializedName(SERIALIZED_NAME_BANK_COUNTRY_CODE)
  private String bankCountryCode;

  public static final String SERIALIZED_NAME_BANK_CITY = "bankCity";
  @SerializedName(SERIALIZED_NAME_BANK_CITY)
  private String bankCity;

  public static final String SERIALIZED_NAME_IS_FAVORITE = "isFavorite";
  @SerializedName(SERIALIZED_NAME_IS_FAVORITE)
  private String isFavorite;

  public static final String SERIALIZED_NAME_ACCOUNT_PREFIX = "accountPrefix";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PREFIX)
  private String accountPrefix;

  public static final String SERIALIZED_NAME_ACCOUNT_SUFFIX = "accountSuffix";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SUFFIX)
  private String accountSuffix;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private String industry;

  public static final String SERIALIZED_NAME_CLAUBE = "claube";
  @SerializedName(SERIALIZED_NAME_CLAUBE)
  private String claube;

  public static final String SERIALIZED_NAME_BANK_LOCATION = "bankLocation";
  @SerializedName(SERIALIZED_NAME_BANK_LOCATION)
  private String bankLocation;

  public static final String SERIALIZED_NAME_DEBIT_CARD_TOKEN = "debitCardToken";
  @SerializedName(SERIALIZED_NAME_DEBIT_CARD_TOKEN)
  private String debitCardToken;

  public static final String SERIALIZED_NAME_DEBIT_CARD_TXN_ID = "debitCardTxnId";
  @SerializedName(SERIALIZED_NAME_DEBIT_CARD_TXN_ID)
  private String debitCardTxnId;

  public static final String SERIALIZED_NAME_ACCOUNT_SELECTED_TYPE = "accountSelectedType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SELECTED_TYPE)
  private String accountSelectedType;

  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_CODE = "serviceProviderCode";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_CODE)
  private String serviceProviderCode;

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_NAME = "serviceProviderName";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_NAME)
  private String serviceProviderName;

  public static final String SERIALIZED_NAME_WALLET_ACCOUNT_NUMBER = "walletAccountNumber";
  @SerializedName(SERIALIZED_NAME_WALLET_ACCOUNT_NUMBER)
  private String walletAccountNumber;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_PHONE = "serviceProviderPhone";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_PHONE)
  private String serviceProviderPhone;

  public static final String SERIALIZED_NAME_ID_LIMIT_SET = "idLimitSet";
  @SerializedName(SERIALIZED_NAME_ID_LIMIT_SET)
  private Long idLimitSet;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private String isActive;

  public static final String SERIALIZED_NAME_MULTI_CURRENCY_FLAG = "multiCurrencyFlag";
  @SerializedName(SERIALIZED_NAME_MULTI_CURRENCY_FLAG)
  private String multiCurrencyFlag;

  public static final String SERIALIZED_NAME_CREDIT_ALLOWED_FLAG = "creditAllowedFlag";
  @SerializedName(SERIALIZED_NAME_CREDIT_ALLOWED_FLAG)
  private String creditAllowedFlag;

  public static final String SERIALIZED_NAME_DEBIT_ALLOWED_FLAG = "debitAllowedFlag";
  @SerializedName(SERIALIZED_NAME_DEBIT_ALLOWED_FLAG)
  private String debitAllowedFlag;

  public static final String SERIALIZED_NAME_ID_CLEARING_MODE = "idClearingMode";
  @SerializedName(SERIALIZED_NAME_ID_CLEARING_MODE)
  private String idClearingMode;

  public static final String SERIALIZED_NAME_ID_FEE_CLEARING_MODE = "idFeeClearingMode";
  @SerializedName(SERIALIZED_NAME_ID_FEE_CLEARING_MODE)
  private String idFeeClearingMode;

  public static final String SERIALIZED_NAME_ID_ENTITY_STATUS = "idEntityStatus";
  @SerializedName(SERIALIZED_NAME_ID_ENTITY_STATUS)
  private Integer idEntityStatus;

  public static final String SERIALIZED_NAME_CREDIT_PRIO = "creditPrio";
  @SerializedName(SERIALIZED_NAME_CREDIT_PRIO)
  private Integer creditPrio;

  public static final String SERIALIZED_NAME_DEBIT_PRIO = "debitPrio";
  @SerializedName(SERIALIZED_NAME_DEBIT_PRIO)
  private Integer debitPrio;

  public static final String SERIALIZED_NAME_STR_SECURITY_NUMBER = "strSecurityNumber";
  @SerializedName(SERIALIZED_NAME_STR_SECURITY_NUMBER)
  private String strSecurityNumber;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_THIRD_PARTY_REFERENCE_ID = "thirdPartyReferenceId";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_REFERENCE_ID)
  private String thirdPartyReferenceId;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER_LAST_FOUR_DIGITS = "accountNumberLastFourDigits";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER_LAST_FOUR_DIGITS)
  private String accountNumberLastFourDigits;

  public static final String SERIALIZED_NAME_VIRTUAL_ACCOUNT_NUMBER_PAIR = "virtualAccountNumberPair";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_ACCOUNT_NUMBER_PAIR)
  private String virtualAccountNumberPair;

  public static final String SERIALIZED_NAME_NATIONAL_IDENTIFICATION_NUMBER = "nationalIdentificationNumber";
  @SerializedName(SERIALIZED_NAME_NATIONAL_IDENTIFICATION_NUMBER)
  private String nationalIdentificationNumber;

  public static final String SERIALIZED_NAME_AGREEMENT_STATUS = "agreementStatus";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_STATUS)
  private String agreementStatus;

  public static final String SERIALIZED_NAME_AGREEMENT_UID = "agreementUid";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_UID)
  private String agreementUid;

  public static final String SERIALIZED_NAME_AGREEMENT_MAX_AMOUNT = "agreementMaxAmount";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_MAX_AMOUNT)
  private Long agreementMaxAmount;

  public static final String SERIALIZED_NAME_CARD_OWNERSHIP_CONSENT = "cardOwnershipConsent";
  @SerializedName(SERIALIZED_NAME_CARD_OWNERSHIP_CONSENT)
  private String cardOwnershipConsent;

  public static final String SERIALIZED_NAME_CARD_OWNERSHIP_CONSENT_DATE = "cardOwnershipConsentDate";
  @SerializedName(SERIALIZED_NAME_CARD_OWNERSHIP_CONSENT_DATE)
  private String cardOwnershipConsentDate;

  public static final String SERIALIZED_NAME_IS_ACCOUNT_RFP_ELIGIBLE = "isAccountRfpEligible";
  @SerializedName(SERIALIZED_NAME_IS_ACCOUNT_RFP_ELIGIBLE)
  private String isAccountRfpEligible;

  public static final String SERIALIZED_NAME_LAST_PAYMENT_DATE = "lastPaymentDate";
  @SerializedName(SERIALIZED_NAME_LAST_PAYMENT_DATE)
  private String lastPaymentDate;

  public FundingSource() {
  }

  public FundingSource fundingSeqIndex(Long fundingSeqIndex) {
    
    this.fundingSeqIndex = fundingSeqIndex;
    return this;
  }

   /**
   * Funding Sequence Index values will be generated by a DB sequence. This sequence enables a customer to have multiple funding sources and uniquely identify them. Clients need not send this for Adding the funding sources but for other operations it is mandatory.
   * @return fundingSeqIndex
  **/
  @javax.annotation.Nullable
  public Long getFundingSeqIndex() {
    return fundingSeqIndex;
  }


  public void setFundingSeqIndex(Long fundingSeqIndex) {
    this.fundingSeqIndex = fundingSeqIndex;
  }


  public FundingSource fundingSourceType(Integer fundingSourceType) {
    
    this.fundingSourceType = fundingSourceType;
    return this;
  }

   /**
   * Funding Source Types * 1 - Credit Card * 2 - Debit Card * 3 - ACH * 4 - Wallet * 5 - ACH Savings * 6 - Investment * 7 - Prepaid Card * 8 - Third Party Processor Reference Bank Account * 9 - ACH Checking 
   * @return fundingSourceType
  **/
  @javax.annotation.Nonnull
  public Integer getFundingSourceType() {
    return fundingSourceType;
  }


  public void setFundingSourceType(Integer fundingSourceType) {
    this.fundingSourceType = fundingSourceType;
  }


  public FundingSource address(Address address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }


  public void setAddress(Address address) {
    this.address = address;
  }


  public FundingSource cardNumber(String cardNumber) {
    
    this.cardNumber = cardNumber;
    return this;
  }

   /**
   * Customer&#39;s Card Number. eg. Credit Card, Debit Card, ACH Number etc.
   * @return cardNumber
  **/
  @javax.annotation.Nullable
  public String getCardNumber() {
    return cardNumber;
  }


  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public FundingSource accountNumber(String accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Customer&#39;s Bank Account Number.
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public FundingSource routingNumber(String routingNumber) {
    
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * Customer&#39;s Bank Routing Number.
   * @return routingNumber
  **/
  @javax.annotation.Nullable
  public String getRoutingNumber() {
    return routingNumber;
  }


  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }


  public FundingSource cardType(String cardType) {
    
    this.cardType = cardType;
    return this;
  }

   /**
   * Customer&#39;s Card Type. eg. Visa, Master Card etc.
   * @return cardType
  **/
  @javax.annotation.Nullable
  public String getCardType() {
    return cardType;
  }


  public void setCardType(String cardType) {
    this.cardType = cardType;
  }


  public FundingSource cardExpiryDate(LocalDate cardExpiryDate) {
    
    this.cardExpiryDate = cardExpiryDate;
    return this;
  }

   /**
   * Date on which the Customer&#39;s Card would expire.
   * @return cardExpiryDate
  **/
  @javax.annotation.Nullable
  public LocalDate getCardExpiryDate() {
    return cardExpiryDate;
  }


  public void setCardExpiryDate(LocalDate cardExpiryDate) {
    this.cardExpiryDate = cardExpiryDate;
  }


  public FundingSource billingFirstName(String billingFirstName) {
    
    this.billingFirstName = billingFirstName;
    return this;
  }

   /**
   * First Name as mentioned in Customer&#39;s billing address.
   * @return billingFirstName
  **/
  @javax.annotation.Nullable
  public String getBillingFirstName() {
    return billingFirstName;
  }


  public void setBillingFirstName(String billingFirstName) {
    this.billingFirstName = billingFirstName;
  }


  public FundingSource billingLastName(String billingLastName) {
    
    this.billingLastName = billingLastName;
    return this;
  }

   /**
   * Last Name as mentioned in Customer&#39;s billing address.
   * @return billingLastName
  **/
  @javax.annotation.Nullable
  public String getBillingLastName() {
    return billingLastName;
  }


  public void setBillingLastName(String billingLastName) {
    this.billingLastName = billingLastName;
  }


  public FundingSource billingMiddleName(String billingMiddleName) {
    
    this.billingMiddleName = billingMiddleName;
    return this;
  }

   /**
   * Middle Name as mentioned in Customer&#39;s billing address.
   * @return billingMiddleName
  **/
  @javax.annotation.Nullable
  public String getBillingMiddleName() {
    return billingMiddleName;
  }


  public void setBillingMiddleName(String billingMiddleName) {
    this.billingMiddleName = billingMiddleName;
  }


  public FundingSource billingPaternalName(String billingPaternalName) {
    
    this.billingPaternalName = billingPaternalName;
    return this;
  }

   /**
   * Paternal Name as mentioned in Customer&#39;s billing address.
   * @return billingPaternalName
  **/
  @javax.annotation.Nullable
  public String getBillingPaternalName() {
    return billingPaternalName;
  }


  public void setBillingPaternalName(String billingPaternalName) {
    this.billingPaternalName = billingPaternalName;
  }


  public FundingSource billingMaternalName(String billingMaternalName) {
    
    this.billingMaternalName = billingMaternalName;
    return this;
  }

   /**
   * Maternal Name as mentioned in Customer&#39;s billing address.
   * @return billingMaternalName
  **/
  @javax.annotation.Nullable
  public String getBillingMaternalName() {
    return billingMaternalName;
  }


  public void setBillingMaternalName(String billingMaternalName) {
    this.billingMaternalName = billingMaternalName;
  }


  public FundingSource billingPhoneNumber(String billingPhoneNumber) {
    
    this.billingPhoneNumber = billingPhoneNumber;
    return this;
  }

   /**
   * Phone Number as mentioned in Customer&#39;s billing address.
   * @return billingPhoneNumber
  **/
  @javax.annotation.Nullable
  public String getBillingPhoneNumber() {
    return billingPhoneNumber;
  }


  public void setBillingPhoneNumber(String billingPhoneNumber) {
    this.billingPhoneNumber = billingPhoneNumber;
  }


  public FundingSource currencyIso(String currencyIso) {
    
    this.currencyIso = currencyIso;
    return this;
  }

   /**
   * Customer&#39;s Currency Code in IS02 format.
   * @return currencyIso
  **/
  @javax.annotation.Nullable
  public String getCurrencyIso() {
    return currencyIso;
  }


  public void setCurrencyIso(String currencyIso) {
    this.currencyIso = currencyIso;
  }


  public FundingSource cardStatus(String cardStatus) {
    
    this.cardStatus = cardStatus;
    return this;
  }

   /**
   * Customer&#39;s Card Status - Active or Inactive.
   * @return cardStatus
  **/
  @javax.annotation.Nullable
  public String getCardStatus() {
    return cardStatus;
  }


  public void setCardStatus(String cardStatus) {
    this.cardStatus = cardStatus;
  }


  public FundingSource trafficFlag(String trafficFlag) {
    
    this.trafficFlag = trafficFlag;
    return this;
  }

   /**
   * Customer&#39;s Level Lock. If the value is N, then we don’t allow any transactions from this Customer. Default value will be either Y
   * @return trafficFlag
  **/
  @javax.annotation.Nullable
  public String getTrafficFlag() {
    return trafficFlag;
  }


  public void setTrafficFlag(String trafficFlag) {
    this.trafficFlag = trafficFlag;
  }


  public FundingSource activityDate(String activityDate) {
    
    this.activityDate = activityDate;
    return this;
  }

   /**
   * Date on which the Customer has performed an activity using the Card.
   * @return activityDate
  **/
  @javax.annotation.Nullable
  public String getActivityDate() {
    return activityDate;
  }


  public void setActivityDate(String activityDate) {
    this.activityDate = activityDate;
  }


  public FundingSource fundingUab(String fundingUab) {
    
    this.fundingUab = fundingUab;
    return this;
  }

   /**
   * Universal Address Buffer of Customer Funding Source.
   * @return fundingUab
  **/
  @javax.annotation.Nullable
  public String getFundingUab() {
    return fundingUab;
  }


  public void setFundingUab(String fundingUab) {
    this.fundingUab = fundingUab;
  }


  public FundingSource fundingNickName(String fundingNickName) {
    
    this.fundingNickName = fundingNickName;
    return this;
  }

   /**
   * Nick Name used for the Funding Source.
   * @return fundingNickName
  **/
  @javax.annotation.Nullable
  public String getFundingNickName() {
    return fundingNickName;
  }


  public void setFundingNickName(String fundingNickName) {
    this.fundingNickName = fundingNickName;
  }


  public FundingSource preferredFunding(PreferredFundingEnum preferredFunding) {
    
    this.preferredFunding = preferredFunding;
    return this;
  }

   /**
   * This indicates whethercpc  the Funding Source is/not preferred.&#39;
   * @return preferredFunding
  **/
  @javax.annotation.Nullable
  public PreferredFundingEnum getPreferredFunding() {
    return preferredFunding;
  }


  public void setPreferredFunding(PreferredFundingEnum preferredFunding) {
    this.preferredFunding = preferredFunding;
  }


  public FundingSource fundingSoftDescription(String fundingSoftDescription) {
    
    this.fundingSoftDescription = fundingSoftDescription;
    return this;
  }

   /**
   * This indicates the Soft Descriptor for the transaction done using a particular Funding Source. (This Soft Descriptor is generated by R2 and sent to UCD). e.g. Sender performs a transaction using his account Information. Soft Descriptor provides the details of Transactions those would appear in Statement of Account used for Transaction.
   * @return fundingSoftDescription
  **/
  @javax.annotation.Nullable
  public String getFundingSoftDescription() {
    return fundingSoftDescription;
  }


  public void setFundingSoftDescription(String fundingSoftDescription) {
    this.fundingSoftDescription = fundingSoftDescription;
  }


  public FundingSource bankName(String bankName) {
    
    this.bankName = bankName;
    return this;
  }

   /**
   * Customer&#39;s Bank Name.
   * @return bankName
  **/
  @javax.annotation.Nullable
  public String getBankName() {
    return bankName;
  }


  public void setBankName(String bankName) {
    this.bankName = bankName;
  }


  public FundingSource accountStatus(String accountStatus) {
    
    this.accountStatus = accountStatus;
    return this;
  }

   /**
   * Customer&#39;s Bank Account Status.
   * @return accountStatus
  **/
  @javax.annotation.Nullable
  public String getAccountStatus() {
    return accountStatus;
  }


  public void setAccountStatus(String accountStatus) {
    this.accountStatus = accountStatus;
  }


  public FundingSource verifyMethod(String verifyMethod) {
    
    this.verifyMethod = verifyMethod;
    return this;
  }

   /**
   * Verification Method followed to verify Customer&#39;s Account.
   * @return verifyMethod
  **/
  @javax.annotation.Nullable
  public String getVerifyMethod() {
    return verifyMethod;
  }


  public void setVerifyMethod(String verifyMethod) {
    this.verifyMethod = verifyMethod;
  }


  public FundingSource verifyStatus(String verifyStatus) {
    
    this.verifyStatus = verifyStatus;
    return this;
  }

   /**
   * This indicates whether Customer&#39;s account is/not verified.
   * @return verifyStatus
  **/
  @javax.annotation.Nullable
  public String getVerifyStatus() {
    return verifyStatus;
  }


  public void setVerifyStatus(String verifyStatus) {
    this.verifyStatus = verifyStatus;
  }


  public FundingSource verifyDate(String verifyDate) {
    
    this.verifyDate = verifyDate;
    return this;
  }

   /**
   * Customer&#39;s Account Verification Date.
   * @return verifyDate
  **/
  @javax.annotation.Nullable
  public String getVerifyDate() {
    return verifyDate;
  }


  public void setVerifyDate(String verifyDate) {
    this.verifyDate = verifyDate;
  }


  public FundingSource verifyFailedReason(String verifyFailedReason) {
    
    this.verifyFailedReason = verifyFailedReason;
    return this;
  }

   /**
   * Reason stating failure of Customer&#39;s Account Verification.
   * @return verifyFailedReason
  **/
  @javax.annotation.Nullable
  public String getVerifyFailedReason() {
    return verifyFailedReason;
  }


  public void setVerifyFailedReason(String verifyFailedReason) {
    this.verifyFailedReason = verifyFailedReason;
  }


  public FundingSource startDate(String startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Date on which the first Invoice will be created (used for system generated invoices / recurring payments).
   * @return startDate
  **/
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public FundingSource issueNumber(String issueNumber) {
    
    this.issueNumber = issueNumber;
    return this;
  }

   /**
   * The ID Number of issuer of the payment instrument (links to a customer). The issuer (i.e. customer) of this invoice type.
   * @return issueNumber
  **/
  @javax.annotation.Nullable
  public String getIssueNumber() {
    return issueNumber;
  }


  public void setIssueNumber(String issueNumber) {
    this.issueNumber = issueNumber;
  }


  public FundingSource acctUpdaterFlag(AcctUpdaterFlagEnum acctUpdaterFlag) {
    
    this.acctUpdaterFlag = acctUpdaterFlag;
    return this;
  }

   /**
   * Account Updater Flag. * Y - by account updater process * N or NULL - Normal process 
   * @return acctUpdaterFlag
  **/
  @javax.annotation.Nullable
  public AcctUpdaterFlagEnum getAcctUpdaterFlag() {
    return acctUpdaterFlag;
  }


  public void setAcctUpdaterFlag(AcctUpdaterFlagEnum acctUpdaterFlag) {
    this.acctUpdaterFlag = acctUpdaterFlag;
  }


  public FundingSource oldCardNumber(String oldCardNumber) {
    
    this.oldCardNumber = oldCardNumber;
    return this;
  }

   /**
   * To update an Card Number in UCD, existing card number should be passed in this field field and new card number should be passed in cardNumber field.
   * @return oldCardNumber
  **/
  @javax.annotation.Nullable
  public String getOldCardNumber() {
    return oldCardNumber;
  }


  public void setOldCardNumber(String oldCardNumber) {
    this.oldCardNumber = oldCardNumber;
  }


  public FundingSource bankCode(String bankCode) {
    
    this.bankCode = bankCode;
    return this;
  }

   /**
   * Customer&#39;s Bank Code.
   * @return bankCode
  **/
  @javax.annotation.Nullable
  public String getBankCode() {
    return bankCode;
  }


  public void setBankCode(String bankCode) {
    this.bankCode = bankCode;
  }


  public FundingSource bankBranchCode(String bankBranchCode) {
    
    this.bankBranchCode = bankBranchCode;
    return this;
  }

   /**
   * Customer&#39;s Bank Branch Code.
   * @return bankBranchCode
  **/
  @javax.annotation.Nullable
  public String getBankBranchCode() {
    return bankBranchCode;
  }


  public void setBankBranchCode(String bankBranchCode) {
    this.bankBranchCode = bankBranchCode;
  }


  public FundingSource cardId(String cardId) {
    
    this.cardId = cardId;
    return this;
  }

   /**
   * Customer&#39;s Card ID
   * @return cardId
  **/
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }


  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public FundingSource cardConsentFlag(CardConsentFlagEnum cardConsentFlag) {
    
    this.cardConsentFlag = cardConsentFlag;
    return this;
  }

   /**
   * Customer&#39;s Card Consent Flag for Automatic updation of Card renewal. * Y - Consent given by Customer * NULL or N - Consent not given by Customer 
   * @return cardConsentFlag
  **/
  @javax.annotation.Nullable
  public CardConsentFlagEnum getCardConsentFlag() {
    return cardConsentFlag;
  }


  public void setCardConsentFlag(CardConsentFlagEnum cardConsentFlag) {
    this.cardConsentFlag = cardConsentFlag;
  }


  public FundingSource cardConsentDate(String cardConsentDate) {
    
    this.cardConsentDate = cardConsentDate;
    return this;
  }

   /**
   * Timestamp when the Customer&#39;s consent was taken for Card renewal
   * @return cardConsentDate
  **/
  @javax.annotation.Nullable
  public String getCardConsentDate() {
    return cardConsentDate;
  }


  public void setCardConsentDate(String cardConsentDate) {
    this.cardConsentDate = cardConsentDate;
  }


  public FundingSource cardConsentMtcn(String cardConsentMtcn) {
    
    this.cardConsentMtcn = cardConsentMtcn;
    return this;
  }

   /**
   * Customer&#39;s Card Consent Transaction MTCN.
   * @return cardConsentMtcn
  **/
  @javax.annotation.Nullable
  public String getCardConsentMtcn() {
    return cardConsentMtcn;
  }


  public void setCardConsentMtcn(String cardConsentMtcn) {
    this.cardConsentMtcn = cardConsentMtcn;
  }


  public FundingSource cardConsentTransactionDate(String cardConsentTransactionDate) {
    
    this.cardConsentTransactionDate = cardConsentTransactionDate;
    return this;
  }

   /**
   * Customer&#39;s Card Consent Transaction Date.
   * @return cardConsentTransactionDate
  **/
  @javax.annotation.Nullable
  public String getCardConsentTransactionDate() {
    return cardConsentTransactionDate;
  }


  public void setCardConsentTransactionDate(String cardConsentTransactionDate) {
    this.cardConsentTransactionDate = cardConsentTransactionDate;
  }


  public FundingSource billingAddressSearchJson(String billingAddressSearchJson) {
    
    this.billingAddressSearchJson = billingAddressSearchJson;
    return this;
  }

   /**
   * Auto Search Address JSON. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return billingAddressSearchJson
  **/
  @javax.annotation.Nullable
  public String getBillingAddressSearchJson() {
    return billingAddressSearchJson;
  }


  public void setBillingAddressSearchJson(String billingAddressSearchJson) {
    this.billingAddressSearchJson = billingAddressSearchJson;
  }


  public FundingSource recurringPaymentFlag(RecurringPaymentFlagEnum recurringPaymentFlag) {
    
    this.recurringPaymentFlag = recurringPaymentFlag;
    return this;
  }

   /**
   * This field indicates whether Card could be used/not for Recurring Payment. First character will be used for TMT Customer&#39;s and second character will be used for Digital Customer&#39;s to store the Recurring Payment Flag in DB. * Y – Recurring Payment – The Funding Source will be used by TMT customer for recurring payment * N – Not a Recurring Payment – The  Funding source will not be recurring.  
   * @return recurringPaymentFlag
  **/
  @javax.annotation.Nullable
  public RecurringPaymentFlagEnum getRecurringPaymentFlag() {
    return recurringPaymentFlag;
  }


  public void setRecurringPaymentFlag(RecurringPaymentFlagEnum recurringPaymentFlag) {
    this.recurringPaymentFlag = recurringPaymentFlag;
  }


  public FundingSource recurringPaymentUpdatedDate(String recurringPaymentUpdatedDate) {
    
    this.recurringPaymentUpdatedDate = recurringPaymentUpdatedDate;
    return this;
  }

   /**
   * Timestamp when Recurring Payment Flag is added/updated.
   * @return recurringPaymentUpdatedDate
  **/
  @javax.annotation.Nullable
  public String getRecurringPaymentUpdatedDate() {
    return recurringPaymentUpdatedDate;
  }


  public void setRecurringPaymentUpdatedDate(String recurringPaymentUpdatedDate) {
    this.recurringPaymentUpdatedDate = recurringPaymentUpdatedDate;
  }


  public FundingSource regularPaymentFlag(RegularPaymentFlagEnum regularPaymentFlag) {
    
    this.regularPaymentFlag = regularPaymentFlag;
    return this;
  }

   /**
   * This field indicates whether Card could be used/not for Regular Payment. First character will be used for TMT Customer&#39;s and second character will be used for Digital Customer&#39;s to store the Regular Payment Flag in DB. * Y – Regular Payment – The Funding Source will be used by TMT customer for recurring payment * N or NULL – Not a Regular Payment.  
   * @return regularPaymentFlag
  **/
  @javax.annotation.Nullable
  public RegularPaymentFlagEnum getRegularPaymentFlag() {
    return regularPaymentFlag;
  }


  public void setRegularPaymentFlag(RegularPaymentFlagEnum regularPaymentFlag) {
    this.regularPaymentFlag = regularPaymentFlag;
  }


  public FundingSource regularPaymentUpdatedDate(String regularPaymentUpdatedDate) {
    
    this.regularPaymentUpdatedDate = regularPaymentUpdatedDate;
    return this;
  }

   /**
   * Timestamp when Regular Payment Flag is added/updated.
   * @return regularPaymentUpdatedDate
  **/
  @javax.annotation.Nullable
  public String getRegularPaymentUpdatedDate() {
    return regularPaymentUpdatedDate;
  }


  public void setRegularPaymentUpdatedDate(String regularPaymentUpdatedDate) {
    this.regularPaymentUpdatedDate = regularPaymentUpdatedDate;
  }


  public FundingSource paymentFlagSource(String paymentFlagSource) {
    
    this.paymentFlagSource = paymentFlagSource;
    return this;
  }

   /**
   * This field indicates Customer&#39;s Card added/updated from TMT.  * For all cards created by TMT (GCTMS) - the value will be set to TMT * For cards created/updated by Digital – the value will be NULL 
   * @return paymentFlagSource
  **/
  @javax.annotation.Nullable
  public String getPaymentFlagSource() {
    return paymentFlagSource;
  }


  public void setPaymentFlagSource(String paymentFlagSource) {
    this.paymentFlagSource = paymentFlagSource;
  }


  public FundingSource isDefault(IsDefaultEnum isDefault) {
    
    this.isDefault = isDefault;
    return this;
  }

   /**
   * This field indicates whether this is a/not a default Funding Source.
   * @return isDefault
  **/
  @javax.annotation.Nullable
  public IsDefaultEnum getIsDefault() {
    return isDefault;
  }


  public void setIsDefault(IsDefaultEnum isDefault) {
    this.isDefault = isDefault;
  }


  public FundingSource accountType(String accountType) {
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Customer&#39;s Additional Bank Details Account Type - Checking, Savings etc.
   * @return accountType
  **/
  @javax.annotation.Nullable
  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public FundingSource cardIssueNumber(Integer cardIssueNumber) {
    
    this.cardIssueNumber = cardIssueNumber;
    return this;
  }

   /**
   * Customer&#39;s Card Issue Number.
   * @return cardIssueNumber
  **/
  @javax.annotation.Nullable
  public Integer getCardIssueNumber() {
    return cardIssueNumber;
  }


  public void setCardIssueNumber(Integer cardIssueNumber) {
    this.cardIssueNumber = cardIssueNumber;
  }


  public FundingSource doZdaFlag(String doZdaFlag) {
    
    this.doZdaFlag = doZdaFlag;
    return this;
  }

   /**
   * Wallet Migration field - Do ZDA Flag - populated by Digital CS.
   * @return doZdaFlag
  **/
  @javax.annotation.Nullable
  public String getDoZdaFlag() {
    return doZdaFlag;
  }


  public void setDoZdaFlag(String doZdaFlag) {
    this.doZdaFlag = doZdaFlag;
  }


  public FundingSource binNumber(String binNumber) {
    
    this.binNumber = binNumber;
    return this;
  }

   /**
   * Customer&#39;s Bank Indentification Number.
   * @return binNumber
  **/
  @javax.annotation.Nullable
  public String getBinNumber() {
    return binNumber;
  }


  public void setBinNumber(String binNumber) {
    this.binNumber = binNumber;
  }


  public FundingSource cardScannedFlag(String cardScannedFlag) {
    
    this.cardScannedFlag = cardScannedFlag;
    return this;
  }

   /**
   * Customer&#39;s Card Scanned Flag.
   * @return cardScannedFlag
  **/
  @javax.annotation.Nullable
  public String getCardScannedFlag() {
    return cardScannedFlag;
  }


  public void setCardScannedFlag(String cardScannedFlag) {
    this.cardScannedFlag = cardScannedFlag;
  }


  public FundingSource network(String network) {
    
    this.network = network;
    return this;
  }

   /**
   * Customer&#39;s Card Type. eg. Visa, Master Card etc.
   * @return network
  **/
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }


  public void setNetwork(String network) {
    this.network = network;
  }


  public FundingSource swiftCode(String swiftCode) {
    
    this.swiftCode = swiftCode;
    return this;
  }

   /**
   * Customer&#39;s Additional Bank Details Swift Code.
   * @return swiftCode
  **/
  @javax.annotation.Nullable
  public String getSwiftCode() {
    return swiftCode;
  }


  public void setSwiftCode(String swiftCode) {
    this.swiftCode = swiftCode;
  }


  public FundingSource sortCode(String sortCode) {
    
    this.sortCode = sortCode;
    return this;
  }

   /**
   * Customer&#39;s Additional Bank Details Sort Code.
   * @return sortCode
  **/
  @javax.annotation.Nullable
  public String getSortCode() {
    return sortCode;
  }


  public void setSortCode(String sortCode) {
    this.sortCode = sortCode;
  }


  public FundingSource rcvFinancialId(String rcvFinancialId) {
    
    this.rcvFinancialId = rcvFinancialId;
    return this;
  }

   /**
   * Receiver&#39;s Bank Account in other country.
   * @return rcvFinancialId
  **/
  @javax.annotation.Nullable
  public String getRcvFinancialId() {
    return rcvFinancialId;
  }


  public void setRcvFinancialId(String rcvFinancialId) {
    this.rcvFinancialId = rcvFinancialId;
  }


  public FundingSource cardTypeIdentified(String cardTypeIdentified) {
    
    this.cardTypeIdentified = cardTypeIdentified;
    return this;
  }

   /**
   * Identified Card Type.
   * @return cardTypeIdentified
  **/
  @javax.annotation.Nullable
  public String getCardTypeIdentified() {
    return cardTypeIdentified;
  }


  public void setCardTypeIdentified(String cardTypeIdentified) {
    this.cardTypeIdentified = cardTypeIdentified;
  }


  public FundingSource bankCountryCode(String bankCountryCode) {
    
    this.bankCountryCode = bankCountryCode;
    return this;
  }

   /**
   * Customer&#39;s Additional Bank Details Bank Country Code in ISO2 format.
   * @return bankCountryCode
  **/
  @javax.annotation.Nullable
  public String getBankCountryCode() {
    return bankCountryCode;
  }


  public void setBankCountryCode(String bankCountryCode) {
    this.bankCountryCode = bankCountryCode;
  }


  public FundingSource bankCity(String bankCity) {
    
    this.bankCity = bankCity;
    return this;
  }

   /**
   * Customer&#39;s Additional Bank Details Bank City.
   * @return bankCity
  **/
  @javax.annotation.Nullable
  public String getBankCity() {
    return bankCity;
  }


  public void setBankCity(String bankCity) {
    this.bankCity = bankCity;
  }


  public FundingSource isFavorite(String isFavorite) {
    
    this.isFavorite = isFavorite;
    return this;
  }

   /**
   * This field indicates whether this is a/not a favarite Funding Source - Y / N.
   * @return isFavorite
  **/
  @javax.annotation.Nullable
  public String getIsFavorite() {
    return isFavorite;
  }


  public void setIsFavorite(String isFavorite) {
    this.isFavorite = isFavorite;
  }


  public FundingSource accountPrefix(String accountPrefix) {
    
    this.accountPrefix = accountPrefix;
    return this;
  }

   /**
   * Customer&#39;s Additional Account Prefix.
   * @return accountPrefix
  **/
  @javax.annotation.Nullable
  public String getAccountPrefix() {
    return accountPrefix;
  }


  public void setAccountPrefix(String accountPrefix) {
    this.accountPrefix = accountPrefix;
  }


  public FundingSource accountSuffix(String accountSuffix) {
    
    this.accountSuffix = accountSuffix;
    return this;
  }

   /**
   * Customer&#39;s Additional Account Suffix.
   * @return accountSuffix
  **/
  @javax.annotation.Nullable
  public String getAccountSuffix() {
    return accountSuffix;
  }


  public void setAccountSuffix(String accountSuffix) {
    this.accountSuffix = accountSuffix;
  }


  public FundingSource industry(String industry) {
    
    this.industry = industry;
    return this;
  }

   /**
   * Receiver&#39;s industry type. Valid only for Receiver.
   * @return industry
  **/
  @javax.annotation.Nullable
  public String getIndustry() {
    return industry;
  }


  public void setIndustry(String industry) {
    this.industry = industry;
  }


  public FundingSource claube(String claube) {
    
    this.claube = claube;
    return this;
  }

   /**
   * Wallet Migration field - Claube.
   * @return claube
  **/
  @javax.annotation.Nullable
  public String getClaube() {
    return claube;
  }


  public void setClaube(String claube) {
    this.claube = claube;
  }


  public FundingSource bankLocation(String bankLocation) {
    
    this.bankLocation = bankLocation;
    return this;
  }

   /**
   * Customer&#39;s Additional Bank Location.
   * @return bankLocation
  **/
  @javax.annotation.Nullable
  public String getBankLocation() {
    return bankLocation;
  }


  public void setBankLocation(String bankLocation) {
    this.bankLocation = bankLocation;
  }


  public FundingSource debitCardToken(String debitCardToken) {
    
    this.debitCardToken = debitCardToken;
    return this;
  }

   /**
   * Debit Card Token.
   * @return debitCardToken
  **/
  @javax.annotation.Nullable
  public String getDebitCardToken() {
    return debitCardToken;
  }


  public void setDebitCardToken(String debitCardToken) {
    this.debitCardToken = debitCardToken;
  }


  public FundingSource debitCardTxnId(String debitCardTxnId) {
    
    this.debitCardTxnId = debitCardTxnId;
    return this;
  }

   /**
   * Debit Card Transaction Id.
   * @return debitCardTxnId
  **/
  @javax.annotation.Nullable
  public String getDebitCardTxnId() {
    return debitCardTxnId;
  }


  public void setDebitCardTxnId(String debitCardTxnId) {
    this.debitCardTxnId = debitCardTxnId;
  }


  public FundingSource accountSelectedType(String accountSelectedType) {
    
    this.accountSelectedType = accountSelectedType;
    return this;
  }

   /**
   * Account Selected Type.
   * @return accountSelectedType
  **/
  @javax.annotation.Nullable
  public String getAccountSelectedType() {
    return accountSelectedType;
  }


  public void setAccountSelectedType(String accountSelectedType) {
    this.accountSelectedType = accountSelectedType;
  }


  public FundingSource alias(String alias) {
    
    this.alias = alias;
    return this;
  }

   /**
   * Customer&#39;s Funding Source Alias.
   * @return alias
  **/
  @javax.annotation.Nullable
  public String getAlias() {
    return alias;
  }


  public void setAlias(String alias) {
    this.alias = alias;
  }


  public FundingSource serviceProviderCode(String serviceProviderCode) {
    
    this.serviceProviderCode = serviceProviderCode;
    return this;
  }

   /**
   * Service Provider Code.
   * @return serviceProviderCode
  **/
  @javax.annotation.Nullable
  public String getServiceProviderCode() {
    return serviceProviderCode;
  }


  public void setServiceProviderCode(String serviceProviderCode) {
    this.serviceProviderCode = serviceProviderCode;
  }


  public FundingSource serviceProviderName(String serviceProviderName) {
    
    this.serviceProviderName = serviceProviderName;
    return this;
  }

   /**
   * Service Provider Name.
   * @return serviceProviderName
  **/
  @javax.annotation.Nullable
  public String getServiceProviderName() {
    return serviceProviderName;
  }


  public void setServiceProviderName(String serviceProviderName) {
    this.serviceProviderName = serviceProviderName;
  }


  public FundingSource walletAccountNumber(String walletAccountNumber) {
    
    this.walletAccountNumber = walletAccountNumber;
    return this;
  }

   /**
   * Wallet Account Number.
   * @return walletAccountNumber
  **/
  @javax.annotation.Nullable
  public String getWalletAccountNumber() {
    return walletAccountNumber;
  }


  public void setWalletAccountNumber(String walletAccountNumber) {
    this.walletAccountNumber = walletAccountNumber;
  }


  public FundingSource reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * Reason.
   * @return reason
  **/
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public FundingSource serviceProviderPhone(String serviceProviderPhone) {
    
    this.serviceProviderPhone = serviceProviderPhone;
    return this;
  }

   /**
   * Service Provider Phone.
   * @return serviceProviderPhone
  **/
  @javax.annotation.Nullable
  public String getServiceProviderPhone() {
    return serviceProviderPhone;
  }


  public void setServiceProviderPhone(String serviceProviderPhone) {
    this.serviceProviderPhone = serviceProviderPhone;
  }


  public FundingSource idLimitSet(Long idLimitSet) {
    
    this.idLimitSet = idLimitSet;
    return this;
  }

   /**
   * Set Id Limit.
   * @return idLimitSet
  **/
  @javax.annotation.Nullable
  public Long getIdLimitSet() {
    return idLimitSet;
  }


  public void setIdLimitSet(Long idLimitSet) {
    this.idLimitSet = idLimitSet;
  }


  public FundingSource isActive(String isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * This field indicates whether the PI is/not active - Y / N.
   * @return isActive
  **/
  @javax.annotation.Nullable
  public String getIsActive() {
    return isActive;
  }


  public void setIsActive(String isActive) {
    this.isActive = isActive;
  }


  public FundingSource multiCurrencyFlag(String multiCurrencyFlag) {
    
    this.multiCurrencyFlag = multiCurrencyFlag;
    return this;
  }

   /**
   * This field indicates whether the PI supports/not Multi Currency - Y / N.
   * @return multiCurrencyFlag
  **/
  @javax.annotation.Nullable
  public String getMultiCurrencyFlag() {
    return multiCurrencyFlag;
  }


  public void setMultiCurrencyFlag(String multiCurrencyFlag) {
    this.multiCurrencyFlag = multiCurrencyFlag;
  }


  public FundingSource creditAllowedFlag(String creditAllowedFlag) {
    
    this.creditAllowedFlag = creditAllowedFlag;
    return this;
  }

   /**
   * This field indicates whether the Credit to the PI is allowed/not - Y / N.
   * @return creditAllowedFlag
  **/
  @javax.annotation.Nullable
  public String getCreditAllowedFlag() {
    return creditAllowedFlag;
  }


  public void setCreditAllowedFlag(String creditAllowedFlag) {
    this.creditAllowedFlag = creditAllowedFlag;
  }


  public FundingSource debitAllowedFlag(String debitAllowedFlag) {
    
    this.debitAllowedFlag = debitAllowedFlag;
    return this;
  }

   /**
   * This field indicates whether the Debit to the PI is allowed/not - Y / N&#39;
   * @return debitAllowedFlag
  **/
  @javax.annotation.Nullable
  public String getDebitAllowedFlag() {
    return debitAllowedFlag;
  }


  public void setDebitAllowedFlag(String debitAllowedFlag) {
    this.debitAllowedFlag = debitAllowedFlag;
  }


  public FundingSource idClearingMode(String idClearingMode) {
    
    this.idClearingMode = idClearingMode;
    return this;
  }

   /**
   * Clearing Mode of payment instrument.
   * @return idClearingMode
  **/
  @javax.annotation.Nullable
  public String getIdClearingMode() {
    return idClearingMode;
  }


  public void setIdClearingMode(String idClearingMode) {
    this.idClearingMode = idClearingMode;
  }


  public FundingSource idFeeClearingMode(String idFeeClearingMode) {
    
    this.idFeeClearingMode = idFeeClearingMode;
    return this;
  }

   /**
   * In case the fee on an account is cleared separately this specifies the fee clearing mode - otherwise empty.
   * @return idFeeClearingMode
  **/
  @javax.annotation.Nullable
  public String getIdFeeClearingMode() {
    return idFeeClearingMode;
  }


  public void setIdFeeClearingMode(String idFeeClearingMode) {
    this.idFeeClearingMode = idFeeClearingMode;
  }


  public FundingSource idEntityStatus(Integer idEntityStatus) {
    
    this.idEntityStatus = idEntityStatus;
    return this;
  }

   /**
   * Stores the current status of the payment instrument.
   * @return idEntityStatus
  **/
  @javax.annotation.Nullable
  public Integer getIdEntityStatus() {
    return idEntityStatus;
  }


  public void setIdEntityStatus(Integer idEntityStatus) {
    this.idEntityStatus = idEntityStatus;
  }


  public FundingSource creditPrio(Integer creditPrio) {
    
    this.creditPrio = creditPrio;
    return this;
  }

   /**
   * Customer&#39;s Priority for Credit transactions.
   * @return creditPrio
  **/
  @javax.annotation.Nullable
  public Integer getCreditPrio() {
    return creditPrio;
  }


  public void setCreditPrio(Integer creditPrio) {
    this.creditPrio = creditPrio;
  }


  public FundingSource debitPrio(Integer debitPrio) {
    
    this.debitPrio = debitPrio;
    return this;
  }

   /**
   * Customer&#39;s Priority for Debit transactions.
   * @return debitPrio
  **/
  @javax.annotation.Nullable
  public Integer getDebitPrio() {
    return debitPrio;
  }


  public void setDebitPrio(Integer debitPrio) {
    this.debitPrio = debitPrio;
  }


  public FundingSource strSecurityNumber(String strSecurityNumber) {
    
    this.strSecurityNumber = strSecurityNumber;
    return this;
  }

   /**
   * The CVV/CVC (usually not persisted, but encrypted).
   * @return strSecurityNumber
  **/
  @javax.annotation.Nullable
  public String getStrSecurityNumber() {
    return strSecurityNumber;
  }


  public void setStrSecurityNumber(String strSecurityNumber) {
    this.strSecurityNumber = strSecurityNumber;
  }


  public FundingSource transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Transaction ID.
   * @return transactionId
  **/
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public FundingSource accessToken(String accessToken) {
    
    this.accessToken = accessToken;
    return this;
  }

   /**
   * Plaid Integration for GB Leap.
   * @return accessToken
  **/
  @javax.annotation.Nullable
  public String getAccessToken() {
    return accessToken;
  }


  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  public FundingSource itemId(String itemId) {
    
    this.itemId = itemId;
    return this;
  }

   /**
   * Plaid Integration for GB Leap.
   * @return itemId
  **/
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }


  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public FundingSource thirdPartyReferenceId(String thirdPartyReferenceId) {
    
    this.thirdPartyReferenceId = thirdPartyReferenceId;
    return this;
  }

   /**
   * Processor Reference ID for Processor Referenced Bank Account (e.g. transaction_id for Trustly, Canada).
   * @return thirdPartyReferenceId
  **/
  @javax.annotation.Nullable
  public String getThirdPartyReferenceId() {
    return thirdPartyReferenceId;
  }


  public void setThirdPartyReferenceId(String thirdPartyReferenceId) {
    this.thirdPartyReferenceId = thirdPartyReferenceId;
  }


  public FundingSource accountNumberLastFourDigits(String accountNumberLastFourDigits) {
    
    this.accountNumberLastFourDigits = accountNumberLastFourDigits;
    return this;
  }

   /**
   * Last 4 digit of Bank Account Number for US ACH for specific Banks/Processor Bank Account
   * @return accountNumberLastFourDigits
  **/
  @javax.annotation.Nullable
  public String getAccountNumberLastFourDigits() {
    return accountNumberLastFourDigits;
  }


  public void setAccountNumberLastFourDigits(String accountNumberLastFourDigits) {
    this.accountNumberLastFourDigits = accountNumberLastFourDigits;
  }


  public FundingSource virtualAccountNumberPair(String virtualAccountNumberPair) {
    
    this.virtualAccountNumberPair = virtualAccountNumberPair;
    return this;
  }

   /**
   * This field indicates whether the Bank Account Number is Actual Account Number (N/NULL) or Virtual Account Number (Y) given by Bank. * Y - Account is virtual * Null and N - Account is not virtual 
   * @return virtualAccountNumberPair
  **/
  @javax.annotation.Nullable
  public String getVirtualAccountNumberPair() {
    return virtualAccountNumberPair;
  }


  public void setVirtualAccountNumberPair(String virtualAccountNumberPair) {
    this.virtualAccountNumberPair = virtualAccountNumberPair;
  }


  public FundingSource nationalIdentificationNumber(String nationalIdentificationNumber) {
    
    this.nationalIdentificationNumber = nationalIdentificationNumber;
    return this;
  }

   /**
   * National Identification Number 
   * @return nationalIdentificationNumber
  **/
  @javax.annotation.Nullable
  public String getNationalIdentificationNumber() {
    return nationalIdentificationNumber;
  }


  public void setNationalIdentificationNumber(String nationalIdentificationNumber) {
    this.nationalIdentificationNumber = nationalIdentificationNumber;
  }


  public FundingSource agreementStatus(String agreementStatus) {
    
    this.agreementStatus = agreementStatus;
    return this;
  }

   /**
   * Agreement Status 
   * @return agreementStatus
  **/
  @javax.annotation.Nullable
  public String getAgreementStatus() {
    return agreementStatus;
  }


  public void setAgreementStatus(String agreementStatus) {
    this.agreementStatus = agreementStatus;
  }


  public FundingSource agreementUid(String agreementUid) {
    
    this.agreementUid = agreementUid;
    return this;
  }

   /**
   * Agreement Unique Identifier 
   * @return agreementUid
  **/
  @javax.annotation.Nullable
  public String getAgreementUid() {
    return agreementUid;
  }


  public void setAgreementUid(String agreementUid) {
    this.agreementUid = agreementUid;
  }


  public FundingSource agreementMaxAmount(Long agreementMaxAmount) {
    
    this.agreementMaxAmount = agreementMaxAmount;
    return this;
  }

   /**
   * Agreement Maximum Amount 
   * @return agreementMaxAmount
  **/
  @javax.annotation.Nullable
  public Long getAgreementMaxAmount() {
    return agreementMaxAmount;
  }


  public void setAgreementMaxAmount(Long agreementMaxAmount) {
    this.agreementMaxAmount = agreementMaxAmount;
  }


  public FundingSource cardOwnershipConsent(String cardOwnershipConsent) {
    
    this.cardOwnershipConsent = cardOwnershipConsent;
    return this;
  }

   /**
   * Card Ownership Consent.
   * @return cardOwnershipConsent
  **/
  @javax.annotation.Nullable
  public String getCardOwnershipConsent() {
    return cardOwnershipConsent;
  }


  public void setCardOwnershipConsent(String cardOwnershipConsent) {
    this.cardOwnershipConsent = cardOwnershipConsent;
  }


  public FundingSource cardOwnershipConsentDate(String cardOwnershipConsentDate) {
    
    this.cardOwnershipConsentDate = cardOwnershipConsentDate;
    return this;
  }

   /**
   * Timestamp when Card Ownership Consent was added/updated.
   * @return cardOwnershipConsentDate
  **/
  @javax.annotation.Nullable
  public String getCardOwnershipConsentDate() {
    return cardOwnershipConsentDate;
  }


  public void setCardOwnershipConsentDate(String cardOwnershipConsentDate) {
    this.cardOwnershipConsentDate = cardOwnershipConsentDate;
  }


  public FundingSource isAccountRfpEligible(String isAccountRfpEligible) {
    
    this.isAccountRfpEligible = isAccountRfpEligible;
    return this;
  }

   /**
   * Is the ACH account eligible for RFP (Request for Payment)?
   * @return isAccountRfpEligible
  **/
  @javax.annotation.Nullable
  public String getIsAccountRfpEligible() {
    return isAccountRfpEligible;
  }


  public void setIsAccountRfpEligible(String isAccountRfpEligible) {
    this.isAccountRfpEligible = isAccountRfpEligible;
  }


  public FundingSource lastPaymentDate(String lastPaymentDate) {
    
    this.lastPaymentDate = lastPaymentDate;
    return this;
  }

   /**
   * Timestamp when the funding source was last used.
   * @return lastPaymentDate
  **/
  @javax.annotation.Nullable
  public String getLastPaymentDate() {
    return lastPaymentDate;
  }


  public void setLastPaymentDate(String lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundingSource fundingSource = (FundingSource) o;
    return Objects.equals(this.fundingSeqIndex, fundingSource.fundingSeqIndex) &&
        Objects.equals(this.fundingSourceType, fundingSource.fundingSourceType) &&
        Objects.equals(this.address, fundingSource.address) &&
        Objects.equals(this.cardNumber, fundingSource.cardNumber) &&
        Objects.equals(this.accountNumber, fundingSource.accountNumber) &&
        Objects.equals(this.routingNumber, fundingSource.routingNumber) &&
        Objects.equals(this.cardType, fundingSource.cardType) &&
        Objects.equals(this.cardExpiryDate, fundingSource.cardExpiryDate) &&
        Objects.equals(this.billingFirstName, fundingSource.billingFirstName) &&
        Objects.equals(this.billingLastName, fundingSource.billingLastName) &&
        Objects.equals(this.billingMiddleName, fundingSource.billingMiddleName) &&
        Objects.equals(this.billingPaternalName, fundingSource.billingPaternalName) &&
        Objects.equals(this.billingMaternalName, fundingSource.billingMaternalName) &&
        Objects.equals(this.billingPhoneNumber, fundingSource.billingPhoneNumber) &&
        Objects.equals(this.currencyIso, fundingSource.currencyIso) &&
        Objects.equals(this.cardStatus, fundingSource.cardStatus) &&
        Objects.equals(this.trafficFlag, fundingSource.trafficFlag) &&
        Objects.equals(this.activityDate, fundingSource.activityDate) &&
        Objects.equals(this.fundingUab, fundingSource.fundingUab) &&
        Objects.equals(this.fundingNickName, fundingSource.fundingNickName) &&
        Objects.equals(this.preferredFunding, fundingSource.preferredFunding) &&
        Objects.equals(this.fundingSoftDescription, fundingSource.fundingSoftDescription) &&
        Objects.equals(this.bankName, fundingSource.bankName) &&
        Objects.equals(this.accountStatus, fundingSource.accountStatus) &&
        Objects.equals(this.verifyMethod, fundingSource.verifyMethod) &&
        Objects.equals(this.verifyStatus, fundingSource.verifyStatus) &&
        Objects.equals(this.verifyDate, fundingSource.verifyDate) &&
        Objects.equals(this.verifyFailedReason, fundingSource.verifyFailedReason) &&
        Objects.equals(this.startDate, fundingSource.startDate) &&
        Objects.equals(this.issueNumber, fundingSource.issueNumber) &&
        Objects.equals(this.acctUpdaterFlag, fundingSource.acctUpdaterFlag) &&
        Objects.equals(this.oldCardNumber, fundingSource.oldCardNumber) &&
        Objects.equals(this.bankCode, fundingSource.bankCode) &&
        Objects.equals(this.bankBranchCode, fundingSource.bankBranchCode) &&
        Objects.equals(this.cardId, fundingSource.cardId) &&
        Objects.equals(this.cardConsentFlag, fundingSource.cardConsentFlag) &&
        Objects.equals(this.cardConsentDate, fundingSource.cardConsentDate) &&
        Objects.equals(this.cardConsentMtcn, fundingSource.cardConsentMtcn) &&
        Objects.equals(this.cardConsentTransactionDate, fundingSource.cardConsentTransactionDate) &&
        Objects.equals(this.billingAddressSearchJson, fundingSource.billingAddressSearchJson) &&
        Objects.equals(this.recurringPaymentFlag, fundingSource.recurringPaymentFlag) &&
        Objects.equals(this.recurringPaymentUpdatedDate, fundingSource.recurringPaymentUpdatedDate) &&
        Objects.equals(this.regularPaymentFlag, fundingSource.regularPaymentFlag) &&
        Objects.equals(this.regularPaymentUpdatedDate, fundingSource.regularPaymentUpdatedDate) &&
        Objects.equals(this.paymentFlagSource, fundingSource.paymentFlagSource) &&
        Objects.equals(this.isDefault, fundingSource.isDefault) &&
        Objects.equals(this.accountType, fundingSource.accountType) &&
        Objects.equals(this.cardIssueNumber, fundingSource.cardIssueNumber) &&
        Objects.equals(this.doZdaFlag, fundingSource.doZdaFlag) &&
        Objects.equals(this.binNumber, fundingSource.binNumber) &&
        Objects.equals(this.cardScannedFlag, fundingSource.cardScannedFlag) &&
        Objects.equals(this.network, fundingSource.network) &&
        Objects.equals(this.swiftCode, fundingSource.swiftCode) &&
        Objects.equals(this.sortCode, fundingSource.sortCode) &&
        Objects.equals(this.rcvFinancialId, fundingSource.rcvFinancialId) &&
        Objects.equals(this.cardTypeIdentified, fundingSource.cardTypeIdentified) &&
        Objects.equals(this.bankCountryCode, fundingSource.bankCountryCode) &&
        Objects.equals(this.bankCity, fundingSource.bankCity) &&
        Objects.equals(this.isFavorite, fundingSource.isFavorite) &&
        Objects.equals(this.accountPrefix, fundingSource.accountPrefix) &&
        Objects.equals(this.accountSuffix, fundingSource.accountSuffix) &&
        Objects.equals(this.industry, fundingSource.industry) &&
        Objects.equals(this.claube, fundingSource.claube) &&
        Objects.equals(this.bankLocation, fundingSource.bankLocation) &&
        Objects.equals(this.debitCardToken, fundingSource.debitCardToken) &&
        Objects.equals(this.debitCardTxnId, fundingSource.debitCardTxnId) &&
        Objects.equals(this.accountSelectedType, fundingSource.accountSelectedType) &&
        Objects.equals(this.alias, fundingSource.alias) &&
        Objects.equals(this.serviceProviderCode, fundingSource.serviceProviderCode) &&
        Objects.equals(this.serviceProviderName, fundingSource.serviceProviderName) &&
        Objects.equals(this.walletAccountNumber, fundingSource.walletAccountNumber) &&
        Objects.equals(this.reason, fundingSource.reason) &&
        Objects.equals(this.serviceProviderPhone, fundingSource.serviceProviderPhone) &&
        Objects.equals(this.idLimitSet, fundingSource.idLimitSet) &&
        Objects.equals(this.isActive, fundingSource.isActive) &&
        Objects.equals(this.multiCurrencyFlag, fundingSource.multiCurrencyFlag) &&
        Objects.equals(this.creditAllowedFlag, fundingSource.creditAllowedFlag) &&
        Objects.equals(this.debitAllowedFlag, fundingSource.debitAllowedFlag) &&
        Objects.equals(this.idClearingMode, fundingSource.idClearingMode) &&
        Objects.equals(this.idFeeClearingMode, fundingSource.idFeeClearingMode) &&
        Objects.equals(this.idEntityStatus, fundingSource.idEntityStatus) &&
        Objects.equals(this.creditPrio, fundingSource.creditPrio) &&
        Objects.equals(this.debitPrio, fundingSource.debitPrio) &&
        Objects.equals(this.strSecurityNumber, fundingSource.strSecurityNumber) &&
        Objects.equals(this.transactionId, fundingSource.transactionId) &&
        Objects.equals(this.accessToken, fundingSource.accessToken) &&
        Objects.equals(this.itemId, fundingSource.itemId) &&
        Objects.equals(this.thirdPartyReferenceId, fundingSource.thirdPartyReferenceId) &&
        Objects.equals(this.accountNumberLastFourDigits, fundingSource.accountNumberLastFourDigits) &&
        Objects.equals(this.virtualAccountNumberPair, fundingSource.virtualAccountNumberPair) &&
        Objects.equals(this.nationalIdentificationNumber, fundingSource.nationalIdentificationNumber) &&
        Objects.equals(this.agreementStatus, fundingSource.agreementStatus) &&
        Objects.equals(this.agreementUid, fundingSource.agreementUid) &&
        Objects.equals(this.agreementMaxAmount, fundingSource.agreementMaxAmount) &&
        Objects.equals(this.cardOwnershipConsent, fundingSource.cardOwnershipConsent) &&
        Objects.equals(this.cardOwnershipConsentDate, fundingSource.cardOwnershipConsentDate) &&
        Objects.equals(this.isAccountRfpEligible, fundingSource.isAccountRfpEligible) &&
        Objects.equals(this.lastPaymentDate, fundingSource.lastPaymentDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fundingSeqIndex, fundingSourceType, address, cardNumber, accountNumber, routingNumber, cardType, cardExpiryDate, billingFirstName, billingLastName, billingMiddleName, billingPaternalName, billingMaternalName, billingPhoneNumber, currencyIso, cardStatus, trafficFlag, activityDate, fundingUab, fundingNickName, preferredFunding, fundingSoftDescription, bankName, accountStatus, verifyMethod, verifyStatus, verifyDate, verifyFailedReason, startDate, issueNumber, acctUpdaterFlag, oldCardNumber, bankCode, bankBranchCode, cardId, cardConsentFlag, cardConsentDate, cardConsentMtcn, cardConsentTransactionDate, billingAddressSearchJson, recurringPaymentFlag, recurringPaymentUpdatedDate, regularPaymentFlag, regularPaymentUpdatedDate, paymentFlagSource, isDefault, accountType, cardIssueNumber, doZdaFlag, binNumber, cardScannedFlag, network, swiftCode, sortCode, rcvFinancialId, cardTypeIdentified, bankCountryCode, bankCity, isFavorite, accountPrefix, accountSuffix, industry, claube, bankLocation, debitCardToken, debitCardTxnId, accountSelectedType, alias, serviceProviderCode, serviceProviderName, walletAccountNumber, reason, serviceProviderPhone, idLimitSet, isActive, multiCurrencyFlag, creditAllowedFlag, debitAllowedFlag, idClearingMode, idFeeClearingMode, idEntityStatus, creditPrio, debitPrio, strSecurityNumber, transactionId, accessToken, itemId, thirdPartyReferenceId, accountNumberLastFourDigits, virtualAccountNumberPair, nationalIdentificationNumber, agreementStatus, agreementUid, agreementMaxAmount, cardOwnershipConsent, cardOwnershipConsentDate, isAccountRfpEligible, lastPaymentDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundingSource {\n");
    sb.append("    fundingSeqIndex: ").append(toIndentedString(fundingSeqIndex)).append("\n");
    sb.append("    fundingSourceType: ").append(toIndentedString(fundingSourceType)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    cardExpiryDate: ").append(toIndentedString(cardExpiryDate)).append("\n");
    sb.append("    billingFirstName: ").append(toIndentedString(billingFirstName)).append("\n");
    sb.append("    billingLastName: ").append(toIndentedString(billingLastName)).append("\n");
    sb.append("    billingMiddleName: ").append(toIndentedString(billingMiddleName)).append("\n");
    sb.append("    billingPaternalName: ").append(toIndentedString(billingPaternalName)).append("\n");
    sb.append("    billingMaternalName: ").append(toIndentedString(billingMaternalName)).append("\n");
    sb.append("    billingPhoneNumber: ").append(toIndentedString(billingPhoneNumber)).append("\n");
    sb.append("    currencyIso: ").append(toIndentedString(currencyIso)).append("\n");
    sb.append("    cardStatus: ").append(toIndentedString(cardStatus)).append("\n");
    sb.append("    trafficFlag: ").append(toIndentedString(trafficFlag)).append("\n");
    sb.append("    activityDate: ").append(toIndentedString(activityDate)).append("\n");
    sb.append("    fundingUab: ").append(toIndentedString(fundingUab)).append("\n");
    sb.append("    fundingNickName: ").append(toIndentedString(fundingNickName)).append("\n");
    sb.append("    preferredFunding: ").append(toIndentedString(preferredFunding)).append("\n");
    sb.append("    fundingSoftDescription: ").append(toIndentedString(fundingSoftDescription)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    accountStatus: ").append(toIndentedString(accountStatus)).append("\n");
    sb.append("    verifyMethod: ").append(toIndentedString(verifyMethod)).append("\n");
    sb.append("    verifyStatus: ").append(toIndentedString(verifyStatus)).append("\n");
    sb.append("    verifyDate: ").append(toIndentedString(verifyDate)).append("\n");
    sb.append("    verifyFailedReason: ").append(toIndentedString(verifyFailedReason)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    issueNumber: ").append(toIndentedString(issueNumber)).append("\n");
    sb.append("    acctUpdaterFlag: ").append(toIndentedString(acctUpdaterFlag)).append("\n");
    sb.append("    oldCardNumber: ").append(toIndentedString(oldCardNumber)).append("\n");
    sb.append("    bankCode: ").append(toIndentedString(bankCode)).append("\n");
    sb.append("    bankBranchCode: ").append(toIndentedString(bankBranchCode)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    cardConsentFlag: ").append(toIndentedString(cardConsentFlag)).append("\n");
    sb.append("    cardConsentDate: ").append(toIndentedString(cardConsentDate)).append("\n");
    sb.append("    cardConsentMtcn: ").append(toIndentedString(cardConsentMtcn)).append("\n");
    sb.append("    cardConsentTransactionDate: ").append(toIndentedString(cardConsentTransactionDate)).append("\n");
    sb.append("    billingAddressSearchJson: ").append(toIndentedString(billingAddressSearchJson)).append("\n");
    sb.append("    recurringPaymentFlag: ").append(toIndentedString(recurringPaymentFlag)).append("\n");
    sb.append("    recurringPaymentUpdatedDate: ").append(toIndentedString(recurringPaymentUpdatedDate)).append("\n");
    sb.append("    regularPaymentFlag: ").append(toIndentedString(regularPaymentFlag)).append("\n");
    sb.append("    regularPaymentUpdatedDate: ").append(toIndentedString(regularPaymentUpdatedDate)).append("\n");
    sb.append("    paymentFlagSource: ").append(toIndentedString(paymentFlagSource)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    cardIssueNumber: ").append(toIndentedString(cardIssueNumber)).append("\n");
    sb.append("    doZdaFlag: ").append(toIndentedString(doZdaFlag)).append("\n");
    sb.append("    binNumber: ").append(toIndentedString(binNumber)).append("\n");
    sb.append("    cardScannedFlag: ").append(toIndentedString(cardScannedFlag)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    swiftCode: ").append(toIndentedString(swiftCode)).append("\n");
    sb.append("    sortCode: ").append(toIndentedString(sortCode)).append("\n");
    sb.append("    rcvFinancialId: ").append(toIndentedString(rcvFinancialId)).append("\n");
    sb.append("    cardTypeIdentified: ").append(toIndentedString(cardTypeIdentified)).append("\n");
    sb.append("    bankCountryCode: ").append(toIndentedString(bankCountryCode)).append("\n");
    sb.append("    bankCity: ").append(toIndentedString(bankCity)).append("\n");
    sb.append("    isFavorite: ").append(toIndentedString(isFavorite)).append("\n");
    sb.append("    accountPrefix: ").append(toIndentedString(accountPrefix)).append("\n");
    sb.append("    accountSuffix: ").append(toIndentedString(accountSuffix)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    claube: ").append(toIndentedString(claube)).append("\n");
    sb.append("    bankLocation: ").append(toIndentedString(bankLocation)).append("\n");
    sb.append("    debitCardToken: ").append(toIndentedString(debitCardToken)).append("\n");
    sb.append("    debitCardTxnId: ").append(toIndentedString(debitCardTxnId)).append("\n");
    sb.append("    accountSelectedType: ").append(toIndentedString(accountSelectedType)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    serviceProviderCode: ").append(toIndentedString(serviceProviderCode)).append("\n");
    sb.append("    serviceProviderName: ").append(toIndentedString(serviceProviderName)).append("\n");
    sb.append("    walletAccountNumber: ").append(toIndentedString(walletAccountNumber)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    serviceProviderPhone: ").append(toIndentedString(serviceProviderPhone)).append("\n");
    sb.append("    idLimitSet: ").append(toIndentedString(idLimitSet)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    multiCurrencyFlag: ").append(toIndentedString(multiCurrencyFlag)).append("\n");
    sb.append("    creditAllowedFlag: ").append(toIndentedString(creditAllowedFlag)).append("\n");
    sb.append("    debitAllowedFlag: ").append(toIndentedString(debitAllowedFlag)).append("\n");
    sb.append("    idClearingMode: ").append(toIndentedString(idClearingMode)).append("\n");
    sb.append("    idFeeClearingMode: ").append(toIndentedString(idFeeClearingMode)).append("\n");
    sb.append("    idEntityStatus: ").append(toIndentedString(idEntityStatus)).append("\n");
    sb.append("    creditPrio: ").append(toIndentedString(creditPrio)).append("\n");
    sb.append("    debitPrio: ").append(toIndentedString(debitPrio)).append("\n");
    sb.append("    strSecurityNumber: ").append(toIndentedString(strSecurityNumber)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    thirdPartyReferenceId: ").append(toIndentedString(thirdPartyReferenceId)).append("\n");
    sb.append("    accountNumberLastFourDigits: ").append(toIndentedString(accountNumberLastFourDigits)).append("\n");
    sb.append("    virtualAccountNumberPair: ").append(toIndentedString(virtualAccountNumberPair)).append("\n");
    sb.append("    nationalIdentificationNumber: ").append(toIndentedString(nationalIdentificationNumber)).append("\n");
    sb.append("    agreementStatus: ").append(toIndentedString(agreementStatus)).append("\n");
    sb.append("    agreementUid: ").append(toIndentedString(agreementUid)).append("\n");
    sb.append("    agreementMaxAmount: ").append(toIndentedString(agreementMaxAmount)).append("\n");
    sb.append("    cardOwnershipConsent: ").append(toIndentedString(cardOwnershipConsent)).append("\n");
    sb.append("    cardOwnershipConsentDate: ").append(toIndentedString(cardOwnershipConsentDate)).append("\n");
    sb.append("    isAccountRfpEligible: ").append(toIndentedString(isAccountRfpEligible)).append("\n");
    sb.append("    lastPaymentDate: ").append(toIndentedString(lastPaymentDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fundingSeqIndex");
    openapiFields.add("fundingSourceType");
    openapiFields.add("address");
    openapiFields.add("cardNumber");
    openapiFields.add("accountNumber");
    openapiFields.add("routingNumber");
    openapiFields.add("cardType");
    openapiFields.add("cardExpiryDate");
    openapiFields.add("billingFirstName");
    openapiFields.add("billingLastName");
    openapiFields.add("billingMiddleName");
    openapiFields.add("billingPaternalName");
    openapiFields.add("billingMaternalName");
    openapiFields.add("billingPhoneNumber");
    openapiFields.add("currencyIso");
    openapiFields.add("cardStatus");
    openapiFields.add("trafficFlag");
    openapiFields.add("activityDate");
    openapiFields.add("fundingUab");
    openapiFields.add("fundingNickName");
    openapiFields.add("preferredFunding");
    openapiFields.add("fundingSoftDescription");
    openapiFields.add("bankName");
    openapiFields.add("accountStatus");
    openapiFields.add("verifyMethod");
    openapiFields.add("verifyStatus");
    openapiFields.add("verifyDate");
    openapiFields.add("verifyFailedReason");
    openapiFields.add("startDate");
    openapiFields.add("issueNumber");
    openapiFields.add("acctUpdaterFlag");
    openapiFields.add("oldCardNumber");
    openapiFields.add("bankCode");
    openapiFields.add("bankBranchCode");
    openapiFields.add("cardId");
    openapiFields.add("cardConsentFlag");
    openapiFields.add("cardConsentDate");
    openapiFields.add("cardConsentMtcn");
    openapiFields.add("cardConsentTransactionDate");
    openapiFields.add("billingAddressSearchJson");
    openapiFields.add("recurringPaymentFlag");
    openapiFields.add("recurringPaymentUpdatedDate");
    openapiFields.add("regularPaymentFlag");
    openapiFields.add("regularPaymentUpdatedDate");
    openapiFields.add("paymentFlagSource");
    openapiFields.add("isDefault");
    openapiFields.add("accountType");
    openapiFields.add("cardIssueNumber");
    openapiFields.add("doZdaFlag");
    openapiFields.add("binNumber");
    openapiFields.add("cardScannedFlag");
    openapiFields.add("network");
    openapiFields.add("swiftCode");
    openapiFields.add("sortCode");
    openapiFields.add("rcvFinancialId");
    openapiFields.add("cardTypeIdentified");
    openapiFields.add("bankCountryCode");
    openapiFields.add("bankCity");
    openapiFields.add("isFavorite");
    openapiFields.add("accountPrefix");
    openapiFields.add("accountSuffix");
    openapiFields.add("industry");
    openapiFields.add("claube");
    openapiFields.add("bankLocation");
    openapiFields.add("debitCardToken");
    openapiFields.add("debitCardTxnId");
    openapiFields.add("accountSelectedType");
    openapiFields.add("alias");
    openapiFields.add("serviceProviderCode");
    openapiFields.add("serviceProviderName");
    openapiFields.add("walletAccountNumber");
    openapiFields.add("reason");
    openapiFields.add("serviceProviderPhone");
    openapiFields.add("idLimitSet");
    openapiFields.add("isActive");
    openapiFields.add("multiCurrencyFlag");
    openapiFields.add("creditAllowedFlag");
    openapiFields.add("debitAllowedFlag");
    openapiFields.add("idClearingMode");
    openapiFields.add("idFeeClearingMode");
    openapiFields.add("idEntityStatus");
    openapiFields.add("creditPrio");
    openapiFields.add("debitPrio");
    openapiFields.add("strSecurityNumber");
    openapiFields.add("transactionId");
    openapiFields.add("accessToken");
    openapiFields.add("itemId");
    openapiFields.add("thirdPartyReferenceId");
    openapiFields.add("accountNumberLastFourDigits");
    openapiFields.add("virtualAccountNumberPair");
    openapiFields.add("nationalIdentificationNumber");
    openapiFields.add("agreementStatus");
    openapiFields.add("agreementUid");
    openapiFields.add("agreementMaxAmount");
    openapiFields.add("cardOwnershipConsent");
    openapiFields.add("cardOwnershipConsentDate");
    openapiFields.add("isAccountRfpEligible");
    openapiFields.add("lastPaymentDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fundingSourceType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FundingSource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FundingSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundingSource is not found in the empty JSON string", FundingSource.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FundingSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FundingSource` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FundingSource.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      if ((jsonObj.get("cardNumber") != null && !jsonObj.get("cardNumber").isJsonNull()) && !jsonObj.get("cardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumber").toString()));
      }
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("routingNumber") != null && !jsonObj.get("routingNumber").isJsonNull()) && !jsonObj.get("routingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingNumber").toString()));
      }
      if ((jsonObj.get("cardType") != null && !jsonObj.get("cardType").isJsonNull()) && !jsonObj.get("cardType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardType").toString()));
      }
      if ((jsonObj.get("billingFirstName") != null && !jsonObj.get("billingFirstName").isJsonNull()) && !jsonObj.get("billingFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingFirstName").toString()));
      }
      if ((jsonObj.get("billingLastName") != null && !jsonObj.get("billingLastName").isJsonNull()) && !jsonObj.get("billingLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingLastName").toString()));
      }
      if ((jsonObj.get("billingMiddleName") != null && !jsonObj.get("billingMiddleName").isJsonNull()) && !jsonObj.get("billingMiddleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingMiddleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingMiddleName").toString()));
      }
      if ((jsonObj.get("billingPaternalName") != null && !jsonObj.get("billingPaternalName").isJsonNull()) && !jsonObj.get("billingPaternalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPaternalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPaternalName").toString()));
      }
      if ((jsonObj.get("billingMaternalName") != null && !jsonObj.get("billingMaternalName").isJsonNull()) && !jsonObj.get("billingMaternalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingMaternalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingMaternalName").toString()));
      }
      if ((jsonObj.get("billingPhoneNumber") != null && !jsonObj.get("billingPhoneNumber").isJsonNull()) && !jsonObj.get("billingPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPhoneNumber").toString()));
      }
      if ((jsonObj.get("currencyIso") != null && !jsonObj.get("currencyIso").isJsonNull()) && !jsonObj.get("currencyIso").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyIso` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyIso").toString()));
      }
      if ((jsonObj.get("cardStatus") != null && !jsonObj.get("cardStatus").isJsonNull()) && !jsonObj.get("cardStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardStatus").toString()));
      }
      if ((jsonObj.get("trafficFlag") != null && !jsonObj.get("trafficFlag").isJsonNull()) && !jsonObj.get("trafficFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trafficFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trafficFlag").toString()));
      }
      if ((jsonObj.get("fundingUab") != null && !jsonObj.get("fundingUab").isJsonNull()) && !jsonObj.get("fundingUab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingUab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundingUab").toString()));
      }
      if ((jsonObj.get("fundingNickName") != null && !jsonObj.get("fundingNickName").isJsonNull()) && !jsonObj.get("fundingNickName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingNickName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundingNickName").toString()));
      }
      if ((jsonObj.get("preferredFunding") != null && !jsonObj.get("preferredFunding").isJsonNull()) && !jsonObj.get("preferredFunding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredFunding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredFunding").toString()));
      }
      if ((jsonObj.get("fundingSoftDescription") != null && !jsonObj.get("fundingSoftDescription").isJsonNull()) && !jsonObj.get("fundingSoftDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingSoftDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundingSoftDescription").toString()));
      }
      if ((jsonObj.get("bankName") != null && !jsonObj.get("bankName").isJsonNull()) && !jsonObj.get("bankName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankName").toString()));
      }
      if ((jsonObj.get("accountStatus") != null && !jsonObj.get("accountStatus").isJsonNull()) && !jsonObj.get("accountStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountStatus").toString()));
      }
      if ((jsonObj.get("verifyMethod") != null && !jsonObj.get("verifyMethod").isJsonNull()) && !jsonObj.get("verifyMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifyMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verifyMethod").toString()));
      }
      if ((jsonObj.get("verifyStatus") != null && !jsonObj.get("verifyStatus").isJsonNull()) && !jsonObj.get("verifyStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifyStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verifyStatus").toString()));
      }
      if ((jsonObj.get("verifyFailedReason") != null && !jsonObj.get("verifyFailedReason").isJsonNull()) && !jsonObj.get("verifyFailedReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifyFailedReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verifyFailedReason").toString()));
      }
      if ((jsonObj.get("issueNumber") != null && !jsonObj.get("issueNumber").isJsonNull()) && !jsonObj.get("issueNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueNumber").toString()));
      }
      if ((jsonObj.get("acctUpdaterFlag") != null && !jsonObj.get("acctUpdaterFlag").isJsonNull()) && !jsonObj.get("acctUpdaterFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acctUpdaterFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acctUpdaterFlag").toString()));
      }
      if ((jsonObj.get("oldCardNumber") != null && !jsonObj.get("oldCardNumber").isJsonNull()) && !jsonObj.get("oldCardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldCardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldCardNumber").toString()));
      }
      if ((jsonObj.get("bankCode") != null && !jsonObj.get("bankCode").isJsonNull()) && !jsonObj.get("bankCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankCode").toString()));
      }
      if ((jsonObj.get("bankBranchCode") != null && !jsonObj.get("bankBranchCode").isJsonNull()) && !jsonObj.get("bankBranchCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankBranchCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankBranchCode").toString()));
      }
      if ((jsonObj.get("cardId") != null && !jsonObj.get("cardId").isJsonNull()) && !jsonObj.get("cardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardId").toString()));
      }
      if ((jsonObj.get("cardConsentFlag") != null && !jsonObj.get("cardConsentFlag").isJsonNull()) && !jsonObj.get("cardConsentFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardConsentFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardConsentFlag").toString()));
      }
      if ((jsonObj.get("cardConsentMtcn") != null && !jsonObj.get("cardConsentMtcn").isJsonNull()) && !jsonObj.get("cardConsentMtcn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardConsentMtcn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardConsentMtcn").toString()));
      }
      if ((jsonObj.get("billingAddressSearchJson") != null && !jsonObj.get("billingAddressSearchJson").isJsonNull()) && !jsonObj.get("billingAddressSearchJson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAddressSearchJson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAddressSearchJson").toString()));
      }
      if ((jsonObj.get("recurringPaymentFlag") != null && !jsonObj.get("recurringPaymentFlag").isJsonNull()) && !jsonObj.get("recurringPaymentFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurringPaymentFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurringPaymentFlag").toString()));
      }
      if ((jsonObj.get("regularPaymentFlag") != null && !jsonObj.get("regularPaymentFlag").isJsonNull()) && !jsonObj.get("regularPaymentFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regularPaymentFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regularPaymentFlag").toString()));
      }
      if ((jsonObj.get("paymentFlagSource") != null && !jsonObj.get("paymentFlagSource").isJsonNull()) && !jsonObj.get("paymentFlagSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentFlagSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentFlagSource").toString()));
      }
      if ((jsonObj.get("isDefault") != null && !jsonObj.get("isDefault").isJsonNull()) && !jsonObj.get("isDefault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isDefault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isDefault").toString()));
      }
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      if ((jsonObj.get("doZdaFlag") != null && !jsonObj.get("doZdaFlag").isJsonNull()) && !jsonObj.get("doZdaFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doZdaFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doZdaFlag").toString()));
      }
      if ((jsonObj.get("binNumber") != null && !jsonObj.get("binNumber").isJsonNull()) && !jsonObj.get("binNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `binNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("binNumber").toString()));
      }
      if ((jsonObj.get("cardScannedFlag") != null && !jsonObj.get("cardScannedFlag").isJsonNull()) && !jsonObj.get("cardScannedFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardScannedFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardScannedFlag").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("swiftCode") != null && !jsonObj.get("swiftCode").isJsonNull()) && !jsonObj.get("swiftCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `swiftCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("swiftCode").toString()));
      }
      if ((jsonObj.get("sortCode") != null && !jsonObj.get("sortCode").isJsonNull()) && !jsonObj.get("sortCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortCode").toString()));
      }
      if ((jsonObj.get("rcvFinancialId") != null && !jsonObj.get("rcvFinancialId").isJsonNull()) && !jsonObj.get("rcvFinancialId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rcvFinancialId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rcvFinancialId").toString()));
      }
      if ((jsonObj.get("cardTypeIdentified") != null && !jsonObj.get("cardTypeIdentified").isJsonNull()) && !jsonObj.get("cardTypeIdentified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardTypeIdentified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardTypeIdentified").toString()));
      }
      if ((jsonObj.get("bankCountryCode") != null && !jsonObj.get("bankCountryCode").isJsonNull()) && !jsonObj.get("bankCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankCountryCode").toString()));
      }
      if ((jsonObj.get("bankCity") != null && !jsonObj.get("bankCity").isJsonNull()) && !jsonObj.get("bankCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankCity").toString()));
      }
      if ((jsonObj.get("isFavorite") != null && !jsonObj.get("isFavorite").isJsonNull()) && !jsonObj.get("isFavorite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isFavorite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isFavorite").toString()));
      }
      if ((jsonObj.get("accountPrefix") != null && !jsonObj.get("accountPrefix").isJsonNull()) && !jsonObj.get("accountPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountPrefix").toString()));
      }
      if ((jsonObj.get("accountSuffix") != null && !jsonObj.get("accountSuffix").isJsonNull()) && !jsonObj.get("accountSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountSuffix").toString()));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      if ((jsonObj.get("claube") != null && !jsonObj.get("claube").isJsonNull()) && !jsonObj.get("claube").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claube` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claube").toString()));
      }
      if ((jsonObj.get("bankLocation") != null && !jsonObj.get("bankLocation").isJsonNull()) && !jsonObj.get("bankLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankLocation").toString()));
      }
      if ((jsonObj.get("debitCardToken") != null && !jsonObj.get("debitCardToken").isJsonNull()) && !jsonObj.get("debitCardToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debitCardToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debitCardToken").toString()));
      }
      if ((jsonObj.get("debitCardTxnId") != null && !jsonObj.get("debitCardTxnId").isJsonNull()) && !jsonObj.get("debitCardTxnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debitCardTxnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debitCardTxnId").toString()));
      }
      if ((jsonObj.get("accountSelectedType") != null && !jsonObj.get("accountSelectedType").isJsonNull()) && !jsonObj.get("accountSelectedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountSelectedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountSelectedType").toString()));
      }
      if ((jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) && !jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
      if ((jsonObj.get("serviceProviderCode") != null && !jsonObj.get("serviceProviderCode").isJsonNull()) && !jsonObj.get("serviceProviderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderCode").toString()));
      }
      if ((jsonObj.get("serviceProviderName") != null && !jsonObj.get("serviceProviderName").isJsonNull()) && !jsonObj.get("serviceProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderName").toString()));
      }
      if ((jsonObj.get("walletAccountNumber") != null && !jsonObj.get("walletAccountNumber").isJsonNull()) && !jsonObj.get("walletAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walletAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walletAccountNumber").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("serviceProviderPhone") != null && !jsonObj.get("serviceProviderPhone").isJsonNull()) && !jsonObj.get("serviceProviderPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderPhone").toString()));
      }
      if ((jsonObj.get("isActive") != null && !jsonObj.get("isActive").isJsonNull()) && !jsonObj.get("isActive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isActive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isActive").toString()));
      }
      if ((jsonObj.get("multiCurrencyFlag") != null && !jsonObj.get("multiCurrencyFlag").isJsonNull()) && !jsonObj.get("multiCurrencyFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multiCurrencyFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multiCurrencyFlag").toString()));
      }
      if ((jsonObj.get("creditAllowedFlag") != null && !jsonObj.get("creditAllowedFlag").isJsonNull()) && !jsonObj.get("creditAllowedFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditAllowedFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditAllowedFlag").toString()));
      }
      if ((jsonObj.get("debitAllowedFlag") != null && !jsonObj.get("debitAllowedFlag").isJsonNull()) && !jsonObj.get("debitAllowedFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debitAllowedFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debitAllowedFlag").toString()));
      }
      if ((jsonObj.get("idClearingMode") != null && !jsonObj.get("idClearingMode").isJsonNull()) && !jsonObj.get("idClearingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idClearingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idClearingMode").toString()));
      }
      if ((jsonObj.get("idFeeClearingMode") != null && !jsonObj.get("idFeeClearingMode").isJsonNull()) && !jsonObj.get("idFeeClearingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idFeeClearingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idFeeClearingMode").toString()));
      }
      if ((jsonObj.get("strSecurityNumber") != null && !jsonObj.get("strSecurityNumber").isJsonNull()) && !jsonObj.get("strSecurityNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strSecurityNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strSecurityNumber").toString()));
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("accessToken") != null && !jsonObj.get("accessToken").isJsonNull()) && !jsonObj.get("accessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessToken").toString()));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      if ((jsonObj.get("thirdPartyReferenceId") != null && !jsonObj.get("thirdPartyReferenceId").isJsonNull()) && !jsonObj.get("thirdPartyReferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thirdPartyReferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thirdPartyReferenceId").toString()));
      }
      if ((jsonObj.get("accountNumberLastFourDigits") != null && !jsonObj.get("accountNumberLastFourDigits").isJsonNull()) && !jsonObj.get("accountNumberLastFourDigits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumberLastFourDigits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumberLastFourDigits").toString()));
      }
      if ((jsonObj.get("virtualAccountNumberPair") != null && !jsonObj.get("virtualAccountNumberPair").isJsonNull()) && !jsonObj.get("virtualAccountNumberPair").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualAccountNumberPair` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualAccountNumberPair").toString()));
      }
      if ((jsonObj.get("nationalIdentificationNumber") != null && !jsonObj.get("nationalIdentificationNumber").isJsonNull()) && !jsonObj.get("nationalIdentificationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalIdentificationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalIdentificationNumber").toString()));
      }
      if ((jsonObj.get("agreementStatus") != null && !jsonObj.get("agreementStatus").isJsonNull()) && !jsonObj.get("agreementStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreementStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreementStatus").toString()));
      }
      if ((jsonObj.get("agreementUid") != null && !jsonObj.get("agreementUid").isJsonNull()) && !jsonObj.get("agreementUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreementUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreementUid").toString()));
      }
      if ((jsonObj.get("cardOwnershipConsent") != null && !jsonObj.get("cardOwnershipConsent").isJsonNull()) && !jsonObj.get("cardOwnershipConsent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardOwnershipConsent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardOwnershipConsent").toString()));
      }
      if ((jsonObj.get("isAccountRfpEligible") != null && !jsonObj.get("isAccountRfpEligible").isJsonNull()) && !jsonObj.get("isAccountRfpEligible").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isAccountRfpEligible` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isAccountRfpEligible").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundingSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundingSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundingSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundingSource.class));

       return (TypeAdapter<T>) new TypeAdapter<FundingSource>() {
           @Override
           public void write(JsonWriter out, FundingSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundingSource read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FundingSource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FundingSource
  * @throws IOException if the JSON string is invalid with respect to FundingSource
  */
  public static FundingSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundingSource.class);
  }

 /**
  * Convert an instance of FundingSource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

