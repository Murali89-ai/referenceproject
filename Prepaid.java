/*
 * ucd_cregn_v1_api
 * Swagger documentation for UCD Customer Registration Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerregistration;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.JSON;

/**
 * Prepaid
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:58:59.701576900+05:30[Asia/Calcutta]")
public class Prepaid {
  public static final String SERIALIZED_NAME_PREPAID_ACC_KEY = "prepaidAccKey";
  @SerializedName(SERIALIZED_NAME_PREPAID_ACC_KEY)
  private String prepaidAccKey;

  public static final String SERIALIZED_NAME_PAN_NUMBER = "panNumber";
  @SerializedName(SERIALIZED_NAME_PAN_NUMBER)
  private String panNumber;

  public static final String SERIALIZED_NAME_PAN_ENC_VERSION = "panEncVersion";
  @SerializedName(SERIALIZED_NAME_PAN_ENC_VERSION)
  private Integer panEncVersion;

  public static final String SERIALIZED_NAME_PAN_HASH = "panHash";
  @SerializedName(SERIALIZED_NAME_PAN_HASH)
  private String panHash;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "cardNumber";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_CARD_ENC_VERSION = "cardEncVersion";
  @SerializedName(SERIALIZED_NAME_CARD_ENC_VERSION)
  private Integer cardEncVersion;

  public static final String SERIALIZED_NAME_CARD_NUMBER_HASH = "cardNumberHash";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER_HASH)
  private String cardNumberHash;

  public static final String SERIALIZED_NAME_CARD_TYPE = "cardType";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE)
  private String cardType;

  public static final String SERIALIZED_NAME_CARD_STATUS = "cardStatus";
  @SerializedName(SERIALIZED_NAME_CARD_STATUS)
  private String cardStatus;

  public static final String SERIALIZED_NAME_CARD_CREATED_DATE = "cardCreatedDate";
  @SerializedName(SERIALIZED_NAME_CARD_CREATED_DATE)
  private OffsetDateTime cardCreatedDate;

  public static final String SERIALIZED_NAME_CARD_STATUS_EFFECTIVE_DATE = "cardStatusEffectiveDate";
  @SerializedName(SERIALIZED_NAME_CARD_STATUS_EFFECTIVE_DATE)
  private OffsetDateTime cardStatusEffectiveDate;

  public static final String SERIALIZED_NAME_CARD_EXPIRATION_DATE = "cardExpirationDate";
  @SerializedName(SERIALIZED_NAME_CARD_EXPIRATION_DATE)
  private OffsetDateTime cardExpirationDate;

  public static final String SERIALIZED_NAME_CARD_MAX_EXPIRATION_DATE = "cardMaxExpirationDate";
  @SerializedName(SERIALIZED_NAME_CARD_MAX_EXPIRATION_DATE)
  private OffsetDateTime cardMaxExpirationDate;

  public static final String SERIALIZED_NAME_ACTIVATE_DATE = "activateDate";
  @SerializedName(SERIALIZED_NAME_ACTIVATE_DATE)
  private OffsetDateTime activateDate;

  public static final String SERIALIZED_NAME_PROGRAM_ID = "programId";
  @SerializedName(SERIALIZED_NAME_PROGRAM_ID)
  private Integer programId;

  public static final String SERIALIZED_NAME_PROGRAM_NAME = "programName";
  @SerializedName(SERIALIZED_NAME_PROGRAM_NAME)
  private String programName;

  public static final String SERIALIZED_NAME_SUB_PROGRAM_ID = "subProgramId";
  @SerializedName(SERIALIZED_NAME_SUB_PROGRAM_ID)
  private Integer subProgramId;

  public static final String SERIALIZED_NAME_SUB_PROGRAM_NAME = "subProgramName";
  @SerializedName(SERIALIZED_NAME_SUB_PROGRAM_NAME)
  private String subProgramName;

  public static final String SERIALIZED_NAME_CARD_REGISTRATION_DATE = "cardRegistrationDate";
  @SerializedName(SERIALIZED_NAME_CARD_REGISTRATION_DATE)
  private OffsetDateTime cardRegistrationDate;

  public static final String SERIALIZED_NAME_TOP_CLIENT_NAME = "topClientName";
  @SerializedName(SERIALIZED_NAME_TOP_CLIENT_NAME)
  private String topClientName;

  public static final String SERIALIZED_NAME_TOP_CLIENT_ID = "topClientId";
  @SerializedName(SERIALIZED_NAME_TOP_CLIENT_ID)
  private Integer topClientId;

  public static final String SERIALIZED_NAME_ISSUER_CLIENT_ID = "issuerClientId";
  @SerializedName(SERIALIZED_NAME_ISSUER_CLIENT_ID)
  private Integer issuerClientId;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "clientName";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_BIN_CURRENCY_ALPHA = "binCurrencyAlpha";
  @SerializedName(SERIALIZED_NAME_BIN_CURRENCY_ALPHA)
  private String binCurrencyAlpha;

  public static final String SERIALIZED_NAME_BIN_CURRENCY_CODE = "binCurrencyCode";
  @SerializedName(SERIALIZED_NAME_BIN_CURRENCY_CODE)
  private String binCurrencyCode;

  public static final String SERIALIZED_NAME_PACKAGE_ID = "packageId";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ID)
  private Integer packageId;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "packageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_REQUEST_CODE = "requestCode";
  @SerializedName(SERIALIZED_NAME_REQUEST_CODE)
  private Integer requestCode;

  public static final String SERIALIZED_NAME_SOURCE_CODE = "sourceCode";
  @SerializedName(SERIALIZED_NAME_SOURCE_CODE)
  private Integer sourceCode;

  public static final String SERIALIZED_NAME_FIX_PROXY_NUMBER = "fixProxyNumber";
  @SerializedName(SERIALIZED_NAME_FIX_PROXY_NUMBER)
  private String fixProxyNumber;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_RELATIONSHIP = "relationship";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP)
  private String relationship;

  public static final String SERIALIZED_NAME_CLIENT_UNIQUE_ID = "clientUniqueId";
  @SerializedName(SERIALIZED_NAME_CLIENT_UNIQUE_ID)
  private String clientUniqueId;

  public static final String SERIALIZED_NAME_OTHER_INFO = "otherInfo";
  @SerializedName(SERIALIZED_NAME_OTHER_INFO)
  private String otherInfo;

  public static final String SERIALIZED_NAME_CLIENT_VAL = "clientVal";
  @SerializedName(SERIALIZED_NAME_CLIENT_VAL)
  private String clientVal;

  public static final String SERIALIZED_NAME_DISCRETIONARY_DATA1 = "discretionaryData1";
  @SerializedName(SERIALIZED_NAME_DISCRETIONARY_DATA1)
  private String discretionaryData1;

  public static final String SERIALIZED_NAME_DISCRETIONARY_DATA2 = "discretionaryData2";
  @SerializedName(SERIALIZED_NAME_DISCRETIONARY_DATA2)
  private String discretionaryData2;

  public static final String SERIALIZED_NAME_DISCRETIONARY_DATA3 = "discretionaryData3";
  @SerializedName(SERIALIZED_NAME_DISCRETIONARY_DATA3)
  private String discretionaryData3;

  public static final String SERIALIZED_NAME_I2C_CARD_HOLDER_ID_CODE = "i2cCardHolderIdCode";
  @SerializedName(SERIALIZED_NAME_I2C_CARD_HOLDER_ID_CODE)
  private String i2cCardHolderIdCode;

  public static final String SERIALIZED_NAME_I2C_CARD_HOLDER_ID_VALUE = "i2cCardHolderIdValue";
  @SerializedName(SERIALIZED_NAME_I2C_CARD_HOLDER_ID_VALUE)
  private String i2cCardHolderIdValue;

  public static final String SERIALIZED_NAME_I2C_DDA_NUMBER = "i2cDdaNumber";
  @SerializedName(SERIALIZED_NAME_I2C_DDA_NUMBER)
  private String i2cDdaNumber;

  public static final String SERIALIZED_NAME_I2C_CARD_REFERENCE_NUMBER = "i2cCardReferenceNumber";
  @SerializedName(SERIALIZED_NAME_I2C_CARD_REFERENCE_NUMBER)
  private String i2cCardReferenceNumber;

  public static final String SERIALIZED_NAME_I2C_IDENTIFICATION_NUMBER = "i2cIdentificationNumber";
  @SerializedName(SERIALIZED_NAME_I2C_IDENTIFICATION_NUMBER)
  private String i2cIdentificationNumber;

  public static final String SERIALIZED_NAME_I2C_MEMBER_ID = "i2cMemberId";
  @SerializedName(SERIALIZED_NAME_I2C_MEMBER_ID)
  private String i2cMemberId;

  public static final String SERIALIZED_NAME_I2C_MRAY_STATUS = "i2cMrayStatus";
  @SerializedName(SERIALIZED_NAME_I2C_MRAY_STATUS)
  private String i2cMrayStatus;

  public Prepaid() {
  }

  public Prepaid prepaidAccKey(String prepaidAccKey) {
    
    this.prepaidAccKey = prepaidAccKey;
    return this;
  }

   /**
   * Unique number assigned to each Primary Account Number Hash.
   * @return prepaidAccKey
  **/
  @javax.annotation.Nonnull
  public String getPrepaidAccKey() {
    return prepaidAccKey;
  }


  public void setPrepaidAccKey(String prepaidAccKey) {
    this.prepaidAccKey = prepaidAccKey;
  }


  public Prepaid panNumber(String panNumber) {
    
    this.panNumber = panNumber;
    return this;
  }

   /**
   * Customer&#39;s Primary Account Number.
   * @return panNumber
  **/
  @javax.annotation.Nullable
  public String getPanNumber() {
    return panNumber;
  }


  public void setPanNumber(String panNumber) {
    this.panNumber = panNumber;
  }


  public Prepaid panEncVersion(Integer panEncVersion) {
    
    this.panEncVersion = panEncVersion;
    return this;
  }

   /**
   * Encrypted version of Customer&#39;s Primary Account Number.
   * @return panEncVersion
  **/
  @javax.annotation.Nullable
  public Integer getPanEncVersion() {
    return panEncVersion;
  }


  public void setPanEncVersion(Integer panEncVersion) {
    this.panEncVersion = panEncVersion;
  }


  public Prepaid panHash(String panHash) {
    
    this.panHash = panHash;
    return this;
  }

   /**
   * Hash value generated based on the Customer&#39;s Primary Account Number.
   * @return panHash
  **/
  @javax.annotation.Nullable
  public String getPanHash() {
    return panHash;
  }


  public void setPanHash(String panHash) {
    this.panHash = panHash;
  }


  public Prepaid cardNumber(String cardNumber) {
    
    this.cardNumber = cardNumber;
    return this;
  }

   /**
   * Customer&#39;s Prepaid Card Number.
   * @return cardNumber
  **/
  @javax.annotation.Nullable
  public String getCardNumber() {
    return cardNumber;
  }


  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public Prepaid cardEncVersion(Integer cardEncVersion) {
    
    this.cardEncVersion = cardEncVersion;
    return this;
  }

   /**
   * Encrypted version of Customer’s Prepaid Card Number.
   * @return cardEncVersion
  **/
  @javax.annotation.Nullable
  public Integer getCardEncVersion() {
    return cardEncVersion;
  }


  public void setCardEncVersion(Integer cardEncVersion) {
    this.cardEncVersion = cardEncVersion;
  }


  public Prepaid cardNumberHash(String cardNumberHash) {
    
    this.cardNumberHash = cardNumberHash;
    return this;
  }

   /**
   * Hash value generated on Customer’s Prepaid Card Number.
   * @return cardNumberHash
  **/
  @javax.annotation.Nullable
  public String getCardNumberHash() {
    return cardNumberHash;
  }


  public void setCardNumberHash(String cardNumberHash) {
    this.cardNumberHash = cardNumberHash;
  }


  public Prepaid cardType(String cardType) {
    
    this.cardType = cardType;
    return this;
  }

   /**
   * Type of the Customer’s Prepaid Card. e.g. Visa / Master Card.
   * @return cardType
  **/
  @javax.annotation.Nullable
  public String getCardType() {
    return cardType;
  }


  public void setCardType(String cardType) {
    this.cardType = cardType;
  }


  public Prepaid cardStatus(String cardStatus) {
    
    this.cardStatus = cardStatus;
    return this;
  }

   /**
   * Status of the Customer’s Prepaid Card e.g. Active / Inactive.
   * @return cardStatus
  **/
  @javax.annotation.Nullable
  public String getCardStatus() {
    return cardStatus;
  }


  public void setCardStatus(String cardStatus) {
    this.cardStatus = cardStatus;
  }


  public Prepaid cardCreatedDate(OffsetDateTime cardCreatedDate) {
    
    this.cardCreatedDate = cardCreatedDate;
    return this;
  }

   /**
   * Timestamp when the Customer&#39;s Prepaid Card was created.
   * @return cardCreatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCardCreatedDate() {
    return cardCreatedDate;
  }


  public void setCardCreatedDate(OffsetDateTime cardCreatedDate) {
    this.cardCreatedDate = cardCreatedDate;
  }


  public Prepaid cardStatusEffectiveDate(OffsetDateTime cardStatusEffectiveDate) {
    
    this.cardStatusEffectiveDate = cardStatusEffectiveDate;
    return this;
  }

   /**
   * Timestamp when the Customer&#39;s Prepaid Card Status (Active or Inactive) was effective.
   * @return cardStatusEffectiveDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCardStatusEffectiveDate() {
    return cardStatusEffectiveDate;
  }


  public void setCardStatusEffectiveDate(OffsetDateTime cardStatusEffectiveDate) {
    this.cardStatusEffectiveDate = cardStatusEffectiveDate;
  }


  public Prepaid cardExpirationDate(OffsetDateTime cardExpirationDate) {
    
    this.cardExpirationDate = cardExpirationDate;
    return this;
  }

   /**
   * Timestamp when the Customer&#39;s Prepaid Card would expire.
   * @return cardExpirationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCardExpirationDate() {
    return cardExpirationDate;
  }


  public void setCardExpirationDate(OffsetDateTime cardExpirationDate) {
    this.cardExpirationDate = cardExpirationDate;
  }


  public Prepaid cardMaxExpirationDate(OffsetDateTime cardMaxExpirationDate) {
    
    this.cardMaxExpirationDate = cardMaxExpirationDate;
    return this;
  }

   /**
   * Maximum Expiration Timestamp of Customer&#39;s Prepaid Card i.e. after this date, Card Expiry date cant be further extended.
   * @return cardMaxExpirationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCardMaxExpirationDate() {
    return cardMaxExpirationDate;
  }


  public void setCardMaxExpirationDate(OffsetDateTime cardMaxExpirationDate) {
    this.cardMaxExpirationDate = cardMaxExpirationDate;
  }


  public Prepaid activateDate(OffsetDateTime activateDate) {
    
    this.activateDate = activateDate;
    return this;
  }

   /**
   * Timestamp when Customer&#39;s Card activated.
   * @return activateDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getActivateDate() {
    return activateDate;
  }


  public void setActivateDate(OffsetDateTime activateDate) {
    this.activateDate = activateDate;
  }


  public Prepaid programId(Integer programId) {
    
    this.programId = programId;
    return this;
  }

   /**
   * Processor assigned value if applicable.
   * @return programId
  **/
  @javax.annotation.Nullable
  public Integer getProgramId() {
    return programId;
  }


  public void setProgramId(Integer programId) {
    this.programId = programId;
  }


  public Prepaid programName(String programName) {
    
    this.programName = programName;
    return this;
  }

   /**
   * Processor assigned value if applicable.
   * @return programName
  **/
  @javax.annotation.Nullable
  public String getProgramName() {
    return programName;
  }


  public void setProgramName(String programName) {
    this.programName = programName;
  }


  public Prepaid subProgramId(Integer subProgramId) {
    
    this.subProgramId = subProgramId;
    return this;
  }

   /**
   * Processor assigned value if applicable.
   * @return subProgramId
  **/
  @javax.annotation.Nullable
  public Integer getSubProgramId() {
    return subProgramId;
  }


  public void setSubProgramId(Integer subProgramId) {
    this.subProgramId = subProgramId;
  }


  public Prepaid subProgramName(String subProgramName) {
    
    this.subProgramName = subProgramName;
    return this;
  }

   /**
   * Processor assigned value if applicable.
   * @return subProgramName
  **/
  @javax.annotation.Nullable
  public String getSubProgramName() {
    return subProgramName;
  }


  public void setSubProgramName(String subProgramName) {
    this.subProgramName = subProgramName;
  }


  public Prepaid cardRegistrationDate(OffsetDateTime cardRegistrationDate) {
    
    this.cardRegistrationDate = cardRegistrationDate;
    return this;
  }

   /**
   * Timestamp when Customer&#39;s Card registered.
   * @return cardRegistrationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCardRegistrationDate() {
    return cardRegistrationDate;
  }


  public void setCardRegistrationDate(OffsetDateTime cardRegistrationDate) {
    this.cardRegistrationDate = cardRegistrationDate;
  }


  public Prepaid topClientName(String topClientName) {
    
    this.topClientName = topClientName;
    return this;
  }

   /**
   * Name of the first tier adaptor.
   * @return topClientName
  **/
  @javax.annotation.Nullable
  public String getTopClientName() {
    return topClientName;
  }


  public void setTopClientName(String topClientName) {
    this.topClientName = topClientName;
  }


  public Prepaid topClientId(Integer topClientId) {
    
    this.topClientId = topClientId;
    return this;
  }

   /**
   * Unique adaptor identification assigned by the system for the first adaptor tier.
   * @return topClientId
  **/
  @javax.annotation.Nullable
  public Integer getTopClientId() {
    return topClientId;
  }


  public void setTopClientId(Integer topClientId) {
    this.topClientId = topClientId;
  }


  public Prepaid issuerClientId(Integer issuerClientId) {
    
    this.issuerClientId = issuerClientId;
    return this;
  }

   /**
   * Unique adaptor identification assigned by the system for the card.
   * @return issuerClientId
  **/
  @javax.annotation.Nullable
  public Integer getIssuerClientId() {
    return issuerClientId;
  }


  public void setIssuerClientId(Integer issuerClientId) {
    this.issuerClientId = issuerClientId;
  }


  public Prepaid clientName(String clientName) {
    
    this.clientName = clientName;
    return this;
  }

   /**
   * FIS assigned name for the Client ID that the card is assigned.
   * @return clientName
  **/
  @javax.annotation.Nullable
  public String getClientName() {
    return clientName;
  }


  public void setClientName(String clientName) {
    this.clientName = clientName;
  }


  public Prepaid binCurrencyAlpha(String binCurrencyAlpha) {
    
    this.binCurrencyAlpha = binCurrencyAlpha;
    return this;
  }

   /**
   * Name of the ISO code of the issuer currency.
   * @return binCurrencyAlpha
  **/
  @javax.annotation.Nullable
  public String getBinCurrencyAlpha() {
    return binCurrencyAlpha;
  }


  public void setBinCurrencyAlpha(String binCurrencyAlpha) {
    this.binCurrencyAlpha = binCurrencyAlpha;
  }


  public Prepaid binCurrencyCode(String binCurrencyCode) {
    
    this.binCurrencyCode = binCurrencyCode;
    return this;
  }

   /**
   * ISO code number of the issuer currency.
   * @return binCurrencyCode
  **/
  @javax.annotation.Nullable
  public String getBinCurrencyCode() {
    return binCurrencyCode;
  }


  public void setBinCurrencyCode(String binCurrencyCode) {
    this.binCurrencyCode = binCurrencyCode;
  }


  public Prepaid packageId(Integer packageId) {
    
    this.packageId = packageId;
    return this;
  }

   /**
   * Package ID is the processor assigned number assigned to the artwork and sent to the fulfillment house for the creation of cards.
   * @return packageId
  **/
  @javax.annotation.Nullable
  public Integer getPackageId() {
    return packageId;
  }


  public void setPackageId(Integer packageId) {
    this.packageId = packageId;
  }


  public Prepaid packageName(String packageName) {
    
    this.packageName = packageName;
    return this;
  }

   /**
   * FIS description of the Package ID.
   * @return packageName
  **/
  @javax.annotation.Nullable
  public String getPackageName() {
    return packageName;
  }


  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public Prepaid requestCode(Integer requestCode) {
    
    this.requestCode = requestCode;
    return this;
  }

   /**
   * Numeric code identifying the type of authorization request going out of the FIS system.
   * @return requestCode
  **/
  @javax.annotation.Nullable
  public Integer getRequestCode() {
    return requestCode;
  }


  public void setRequestCode(Integer requestCode) {
    this.requestCode = requestCode;
  }


  public Prepaid sourceCode(Integer sourceCode) {
    
    this.sourceCode = sourceCode;
    return this;
  }

   /**
   * Code identifying the source of the transaction.
   * @return sourceCode
  **/
  @javax.annotation.Nullable
  public Integer getSourceCode() {
    return sourceCode;
  }


  public void setSourceCode(Integer sourceCode) {
    this.sourceCode = sourceCode;
  }


  public Prepaid fixProxyNumber(String fixProxyNumber) {
    
    this.fixProxyNumber = fixProxyNumber;
    return this;
  }

   /**
   * FIS Serial Number.
   * @return fixProxyNumber
  **/
  @javax.annotation.Nullable
  public String getFixProxyNumber() {
    return fixProxyNumber;
  }


  public void setFixProxyNumber(String fixProxyNumber) {
    this.fixProxyNumber = fixProxyNumber;
  }


  public Prepaid comments(String comments) {
    
    this.comments = comments;
    return this;
  }

   /**
   * Comments.
   * @return comments
  **/
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }


  public void setComments(String comments) {
    this.comments = comments;
  }


  public Prepaid relationship(String relationship) {
    
    this.relationship = relationship;
    return this;
  }

   /**
   * Relationship to the primary card holder.
   * @return relationship
  **/
  @javax.annotation.Nullable
  public String getRelationship() {
    return relationship;
  }


  public void setRelationship(String relationship) {
    this.relationship = relationship;
  }


  public Prepaid clientUniqueId(String clientUniqueId) {
    
    this.clientUniqueId = clientUniqueId;
    return this;
  }

   /**
   * Client Specific Field.
   * @return clientUniqueId
  **/
  @javax.annotation.Nullable
  public String getClientUniqueId() {
    return clientUniqueId;
  }


  public void setClientUniqueId(String clientUniqueId) {
    this.clientUniqueId = clientUniqueId;
  }


  public Prepaid otherInfo(String otherInfo) {
    
    this.otherInfo = otherInfo;
    return this;
  }

   /**
   * Client Specific Field.
   * @return otherInfo
  **/
  @javax.annotation.Nullable
  public String getOtherInfo() {
    return otherInfo;
  }


  public void setOtherInfo(String otherInfo) {
    this.otherInfo = otherInfo;
  }


  public Prepaid clientVal(String clientVal) {
    
    this.clientVal = clientVal;
    return this;
  }

   /**
   * Client Specific Field.
   * @return clientVal
  **/
  @javax.annotation.Nullable
  public String getClientVal() {
    return clientVal;
  }


  public void setClientVal(String clientVal) {
    this.clientVal = clientVal;
  }


  public Prepaid discretionaryData1(String discretionaryData1) {
    
    this.discretionaryData1 = discretionaryData1;
    return this;
  }

   /**
   * Embossing File Field.
   * @return discretionaryData1
  **/
  @javax.annotation.Nullable
  public String getDiscretionaryData1() {
    return discretionaryData1;
  }


  public void setDiscretionaryData1(String discretionaryData1) {
    this.discretionaryData1 = discretionaryData1;
  }


  public Prepaid discretionaryData2(String discretionaryData2) {
    
    this.discretionaryData2 = discretionaryData2;
    return this;
  }

   /**
   * Embossing File Field.
   * @return discretionaryData2
  **/
  @javax.annotation.Nullable
  public String getDiscretionaryData2() {
    return discretionaryData2;
  }


  public void setDiscretionaryData2(String discretionaryData2) {
    this.discretionaryData2 = discretionaryData2;
  }


  public Prepaid discretionaryData3(String discretionaryData3) {
    
    this.discretionaryData3 = discretionaryData3;
    return this;
  }

   /**
   * Embossing File Field.
   * @return discretionaryData3
  **/
  @javax.annotation.Nullable
  public String getDiscretionaryData3() {
    return discretionaryData3;
  }


  public void setDiscretionaryData3(String discretionaryData3) {
    this.discretionaryData3 = discretionaryData3;
  }


  public Prepaid i2cCardHolderIdCode(String i2cCardHolderIdCode) {
    
    this.i2cCardHolderIdCode = i2cCardHolderIdCode;
    return this;
  }

   /**
   * Code used to identify Cardholder identification value.
   * @return i2cCardHolderIdCode
  **/
  @javax.annotation.Nullable
  public String getI2cCardHolderIdCode() {
    return i2cCardHolderIdCode;
  }


  public void setI2cCardHolderIdCode(String i2cCardHolderIdCode) {
    this.i2cCardHolderIdCode = i2cCardHolderIdCode;
  }


  public Prepaid i2cCardHolderIdValue(String i2cCardHolderIdValue) {
    
    this.i2cCardHolderIdValue = i2cCardHolderIdValue;
    return this;
  }

   /**
   * Value used to identify Customer.
   * @return i2cCardHolderIdValue
  **/
  @javax.annotation.Nullable
  public String getI2cCardHolderIdValue() {
    return i2cCardHolderIdValue;
  }


  public void setI2cCardHolderIdValue(String i2cCardHolderIdValue) {
    this.i2cCardHolderIdValue = i2cCardHolderIdValue;
  }


  public Prepaid i2cDdaNumber(String i2cDdaNumber) {
    
    this.i2cDdaNumber = i2cDdaNumber;
    return this;
  }

   /**
   * DDA number assigned for direct deposits.
   * @return i2cDdaNumber
  **/
  @javax.annotation.Nullable
  public String getI2cDdaNumber() {
    return i2cDdaNumber;
  }


  public void setI2cDdaNumber(String i2cDdaNumber) {
    this.i2cDdaNumber = i2cDdaNumber;
  }


  public Prepaid i2cCardReferenceNumber(String i2cCardReferenceNumber) {
    
    this.i2cCardReferenceNumber = i2cCardReferenceNumber;
    return this;
  }

   /**
   * 12 digit Card Reference Number.
   * @return i2cCardReferenceNumber
  **/
  @javax.annotation.Nullable
  public String getI2cCardReferenceNumber() {
    return i2cCardReferenceNumber;
  }


  public void setI2cCardReferenceNumber(String i2cCardReferenceNumber) {
    this.i2cCardReferenceNumber = i2cCardReferenceNumber;
  }


  public Prepaid i2cIdentificationNumber(String i2cIdentificationNumber) {
    
    this.i2cIdentificationNumber = i2cIdentificationNumber;
    return this;
  }

   /**
   * Number used to identify the Customer.
   * @return i2cIdentificationNumber
  **/
  @javax.annotation.Nullable
  public String getI2cIdentificationNumber() {
    return i2cIdentificationNumber;
  }


  public void setI2cIdentificationNumber(String i2cIdentificationNumber) {
    this.i2cIdentificationNumber = i2cIdentificationNumber;
  }


  public Prepaid i2cMemberId(String i2cMemberId) {
    
    this.i2cMemberId = i2cMemberId;
    return this;
  }

   /**
   * ID of the member associated to the Card.
   * @return i2cMemberId
  **/
  @javax.annotation.Nullable
  public String getI2cMemberId() {
    return i2cMemberId;
  }


  public void setI2cMemberId(String i2cMemberId) {
    this.i2cMemberId = i2cMemberId;
  }


  public Prepaid i2cMrayStatus(String i2cMrayStatus) {
    
    this.i2cMrayStatus = i2cMrayStatus;
    return this;
  }

   /**
   * Status of mRay subscription (i.e. Subscribed or Not Subscribed).
   * @return i2cMrayStatus
  **/
  @javax.annotation.Nullable
  public String getI2cMrayStatus() {
    return i2cMrayStatus;
  }


  public void setI2cMrayStatus(String i2cMrayStatus) {
    this.i2cMrayStatus = i2cMrayStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Prepaid prepaid = (Prepaid) o;
    return Objects.equals(this.prepaidAccKey, prepaid.prepaidAccKey) &&
        Objects.equals(this.panNumber, prepaid.panNumber) &&
        Objects.equals(this.panEncVersion, prepaid.panEncVersion) &&
        Objects.equals(this.panHash, prepaid.panHash) &&
        Objects.equals(this.cardNumber, prepaid.cardNumber) &&
        Objects.equals(this.cardEncVersion, prepaid.cardEncVersion) &&
        Objects.equals(this.cardNumberHash, prepaid.cardNumberHash) &&
        Objects.equals(this.cardType, prepaid.cardType) &&
        Objects.equals(this.cardStatus, prepaid.cardStatus) &&
        Objects.equals(this.cardCreatedDate, prepaid.cardCreatedDate) &&
        Objects.equals(this.cardStatusEffectiveDate, prepaid.cardStatusEffectiveDate) &&
        Objects.equals(this.cardExpirationDate, prepaid.cardExpirationDate) &&
        Objects.equals(this.cardMaxExpirationDate, prepaid.cardMaxExpirationDate) &&
        Objects.equals(this.activateDate, prepaid.activateDate) &&
        Objects.equals(this.programId, prepaid.programId) &&
        Objects.equals(this.programName, prepaid.programName) &&
        Objects.equals(this.subProgramId, prepaid.subProgramId) &&
        Objects.equals(this.subProgramName, prepaid.subProgramName) &&
        Objects.equals(this.cardRegistrationDate, prepaid.cardRegistrationDate) &&
        Objects.equals(this.topClientName, prepaid.topClientName) &&
        Objects.equals(this.topClientId, prepaid.topClientId) &&
        Objects.equals(this.issuerClientId, prepaid.issuerClientId) &&
        Objects.equals(this.clientName, prepaid.clientName) &&
        Objects.equals(this.binCurrencyAlpha, prepaid.binCurrencyAlpha) &&
        Objects.equals(this.binCurrencyCode, prepaid.binCurrencyCode) &&
        Objects.equals(this.packageId, prepaid.packageId) &&
        Objects.equals(this.packageName, prepaid.packageName) &&
        Objects.equals(this.requestCode, prepaid.requestCode) &&
        Objects.equals(this.sourceCode, prepaid.sourceCode) &&
        Objects.equals(this.fixProxyNumber, prepaid.fixProxyNumber) &&
        Objects.equals(this.comments, prepaid.comments) &&
        Objects.equals(this.relationship, prepaid.relationship) &&
        Objects.equals(this.clientUniqueId, prepaid.clientUniqueId) &&
        Objects.equals(this.otherInfo, prepaid.otherInfo) &&
        Objects.equals(this.clientVal, prepaid.clientVal) &&
        Objects.equals(this.discretionaryData1, prepaid.discretionaryData1) &&
        Objects.equals(this.discretionaryData2, prepaid.discretionaryData2) &&
        Objects.equals(this.discretionaryData3, prepaid.discretionaryData3) &&
        Objects.equals(this.i2cCardHolderIdCode, prepaid.i2cCardHolderIdCode) &&
        Objects.equals(this.i2cCardHolderIdValue, prepaid.i2cCardHolderIdValue) &&
        Objects.equals(this.i2cDdaNumber, prepaid.i2cDdaNumber) &&
        Objects.equals(this.i2cCardReferenceNumber, prepaid.i2cCardReferenceNumber) &&
        Objects.equals(this.i2cIdentificationNumber, prepaid.i2cIdentificationNumber) &&
        Objects.equals(this.i2cMemberId, prepaid.i2cMemberId) &&
        Objects.equals(this.i2cMrayStatus, prepaid.i2cMrayStatus);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(prepaidAccKey, panNumber, panEncVersion, panHash, cardNumber, cardEncVersion, cardNumberHash, cardType, cardStatus, cardCreatedDate, cardStatusEffectiveDate, cardExpirationDate, cardMaxExpirationDate, activateDate, programId, programName, subProgramId, subProgramName, cardRegistrationDate, topClientName, topClientId, issuerClientId, clientName, binCurrencyAlpha, binCurrencyCode, packageId, packageName, requestCode, sourceCode, fixProxyNumber, comments, relationship, clientUniqueId, otherInfo, clientVal, discretionaryData1, discretionaryData2, discretionaryData3, i2cCardHolderIdCode, i2cCardHolderIdValue, i2cDdaNumber, i2cCardReferenceNumber, i2cIdentificationNumber, i2cMemberId, i2cMrayStatus);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Prepaid {\n");
    sb.append("    prepaidAccKey: ").append(toIndentedString(prepaidAccKey)).append("\n");
    sb.append("    panNumber: ").append(toIndentedString(panNumber)).append("\n");
    sb.append("    panEncVersion: ").append(toIndentedString(panEncVersion)).append("\n");
    sb.append("    panHash: ").append(toIndentedString(panHash)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    cardEncVersion: ").append(toIndentedString(cardEncVersion)).append("\n");
    sb.append("    cardNumberHash: ").append(toIndentedString(cardNumberHash)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    cardStatus: ").append(toIndentedString(cardStatus)).append("\n");
    sb.append("    cardCreatedDate: ").append(toIndentedString(cardCreatedDate)).append("\n");
    sb.append("    cardStatusEffectiveDate: ").append(toIndentedString(cardStatusEffectiveDate)).append("\n");
    sb.append("    cardExpirationDate: ").append(toIndentedString(cardExpirationDate)).append("\n");
    sb.append("    cardMaxExpirationDate: ").append(toIndentedString(cardMaxExpirationDate)).append("\n");
    sb.append("    activateDate: ").append(toIndentedString(activateDate)).append("\n");
    sb.append("    programId: ").append(toIndentedString(programId)).append("\n");
    sb.append("    programName: ").append(toIndentedString(programName)).append("\n");
    sb.append("    subProgramId: ").append(toIndentedString(subProgramId)).append("\n");
    sb.append("    subProgramName: ").append(toIndentedString(subProgramName)).append("\n");
    sb.append("    cardRegistrationDate: ").append(toIndentedString(cardRegistrationDate)).append("\n");
    sb.append("    topClientName: ").append(toIndentedString(topClientName)).append("\n");
    sb.append("    topClientId: ").append(toIndentedString(topClientId)).append("\n");
    sb.append("    issuerClientId: ").append(toIndentedString(issuerClientId)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    binCurrencyAlpha: ").append(toIndentedString(binCurrencyAlpha)).append("\n");
    sb.append("    binCurrencyCode: ").append(toIndentedString(binCurrencyCode)).append("\n");
    sb.append("    packageId: ").append(toIndentedString(packageId)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    requestCode: ").append(toIndentedString(requestCode)).append("\n");
    sb.append("    sourceCode: ").append(toIndentedString(sourceCode)).append("\n");
    sb.append("    fixProxyNumber: ").append(toIndentedString(fixProxyNumber)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    relationship: ").append(toIndentedString(relationship)).append("\n");
    sb.append("    clientUniqueId: ").append(toIndentedString(clientUniqueId)).append("\n");
    sb.append("    otherInfo: ").append(toIndentedString(otherInfo)).append("\n");
    sb.append("    clientVal: ").append(toIndentedString(clientVal)).append("\n");
    sb.append("    discretionaryData1: ").append(toIndentedString(discretionaryData1)).append("\n");
    sb.append("    discretionaryData2: ").append(toIndentedString(discretionaryData2)).append("\n");
    sb.append("    discretionaryData3: ").append(toIndentedString(discretionaryData3)).append("\n");
    sb.append("    i2cCardHolderIdCode: ").append(toIndentedString(i2cCardHolderIdCode)).append("\n");
    sb.append("    i2cCardHolderIdValue: ").append(toIndentedString(i2cCardHolderIdValue)).append("\n");
    sb.append("    i2cDdaNumber: ").append(toIndentedString(i2cDdaNumber)).append("\n");
    sb.append("    i2cCardReferenceNumber: ").append(toIndentedString(i2cCardReferenceNumber)).append("\n");
    sb.append("    i2cIdentificationNumber: ").append(toIndentedString(i2cIdentificationNumber)).append("\n");
    sb.append("    i2cMemberId: ").append(toIndentedString(i2cMemberId)).append("\n");
    sb.append("    i2cMrayStatus: ").append(toIndentedString(i2cMrayStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("prepaidAccKey");
    openapiFields.add("panNumber");
    openapiFields.add("panEncVersion");
    openapiFields.add("panHash");
    openapiFields.add("cardNumber");
    openapiFields.add("cardEncVersion");
    openapiFields.add("cardNumberHash");
    openapiFields.add("cardType");
    openapiFields.add("cardStatus");
    openapiFields.add("cardCreatedDate");
    openapiFields.add("cardStatusEffectiveDate");
    openapiFields.add("cardExpirationDate");
    openapiFields.add("cardMaxExpirationDate");
    openapiFields.add("activateDate");
    openapiFields.add("programId");
    openapiFields.add("programName");
    openapiFields.add("subProgramId");
    openapiFields.add("subProgramName");
    openapiFields.add("cardRegistrationDate");
    openapiFields.add("topClientName");
    openapiFields.add("topClientId");
    openapiFields.add("issuerClientId");
    openapiFields.add("clientName");
    openapiFields.add("binCurrencyAlpha");
    openapiFields.add("binCurrencyCode");
    openapiFields.add("packageId");
    openapiFields.add("packageName");
    openapiFields.add("requestCode");
    openapiFields.add("sourceCode");
    openapiFields.add("fixProxyNumber");
    openapiFields.add("comments");
    openapiFields.add("relationship");
    openapiFields.add("clientUniqueId");
    openapiFields.add("otherInfo");
    openapiFields.add("clientVal");
    openapiFields.add("discretionaryData1");
    openapiFields.add("discretionaryData2");
    openapiFields.add("discretionaryData3");
    openapiFields.add("i2cCardHolderIdCode");
    openapiFields.add("i2cCardHolderIdValue");
    openapiFields.add("i2cDdaNumber");
    openapiFields.add("i2cCardReferenceNumber");
    openapiFields.add("i2cIdentificationNumber");
    openapiFields.add("i2cMemberId");
    openapiFields.add("i2cMrayStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("prepaidAccKey");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Prepaid
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Prepaid.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Prepaid is not found in the empty JSON string", Prepaid.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Prepaid.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Prepaid` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Prepaid.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("prepaidAccKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prepaidAccKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prepaidAccKey").toString()));
      }
      if ((jsonObj.get("panNumber") != null && !jsonObj.get("panNumber").isJsonNull()) && !jsonObj.get("panNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panNumber").toString()));
      }
      if ((jsonObj.get("panHash") != null && !jsonObj.get("panHash").isJsonNull()) && !jsonObj.get("panHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panHash").toString()));
      }
      if ((jsonObj.get("cardNumber") != null && !jsonObj.get("cardNumber").isJsonNull()) && !jsonObj.get("cardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumber").toString()));
      }
      if ((jsonObj.get("cardNumberHash") != null && !jsonObj.get("cardNumberHash").isJsonNull()) && !jsonObj.get("cardNumberHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumberHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumberHash").toString()));
      }
      if ((jsonObj.get("cardType") != null && !jsonObj.get("cardType").isJsonNull()) && !jsonObj.get("cardType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardType").toString()));
      }
      if ((jsonObj.get("cardStatus") != null && !jsonObj.get("cardStatus").isJsonNull()) && !jsonObj.get("cardStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardStatus").toString()));
      }
      if ((jsonObj.get("programName") != null && !jsonObj.get("programName").isJsonNull()) && !jsonObj.get("programName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programName").toString()));
      }
      if ((jsonObj.get("subProgramName") != null && !jsonObj.get("subProgramName").isJsonNull()) && !jsonObj.get("subProgramName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subProgramName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subProgramName").toString()));
      }
      if ((jsonObj.get("topClientName") != null && !jsonObj.get("topClientName").isJsonNull()) && !jsonObj.get("topClientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topClientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topClientName").toString()));
      }
      if ((jsonObj.get("clientName") != null && !jsonObj.get("clientName").isJsonNull()) && !jsonObj.get("clientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientName").toString()));
      }
      if ((jsonObj.get("binCurrencyAlpha") != null && !jsonObj.get("binCurrencyAlpha").isJsonNull()) && !jsonObj.get("binCurrencyAlpha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `binCurrencyAlpha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("binCurrencyAlpha").toString()));
      }
      if ((jsonObj.get("binCurrencyCode") != null && !jsonObj.get("binCurrencyCode").isJsonNull()) && !jsonObj.get("binCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `binCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("binCurrencyCode").toString()));
      }
      if ((jsonObj.get("packageName") != null && !jsonObj.get("packageName").isJsonNull()) && !jsonObj.get("packageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageName").toString()));
      }
      if ((jsonObj.get("fixProxyNumber") != null && !jsonObj.get("fixProxyNumber").isJsonNull()) && !jsonObj.get("fixProxyNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixProxyNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixProxyNumber").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("relationship") != null && !jsonObj.get("relationship").isJsonNull()) && !jsonObj.get("relationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationship").toString()));
      }
      if ((jsonObj.get("clientUniqueId") != null && !jsonObj.get("clientUniqueId").isJsonNull()) && !jsonObj.get("clientUniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientUniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientUniqueId").toString()));
      }
      if ((jsonObj.get("otherInfo") != null && !jsonObj.get("otherInfo").isJsonNull()) && !jsonObj.get("otherInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherInfo").toString()));
      }
      if ((jsonObj.get("clientVal") != null && !jsonObj.get("clientVal").isJsonNull()) && !jsonObj.get("clientVal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientVal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientVal").toString()));
      }
      if ((jsonObj.get("discretionaryData1") != null && !jsonObj.get("discretionaryData1").isJsonNull()) && !jsonObj.get("discretionaryData1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discretionaryData1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discretionaryData1").toString()));
      }
      if ((jsonObj.get("discretionaryData2") != null && !jsonObj.get("discretionaryData2").isJsonNull()) && !jsonObj.get("discretionaryData2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discretionaryData2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discretionaryData2").toString()));
      }
      if ((jsonObj.get("discretionaryData3") != null && !jsonObj.get("discretionaryData3").isJsonNull()) && !jsonObj.get("discretionaryData3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discretionaryData3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discretionaryData3").toString()));
      }
      if ((jsonObj.get("i2cCardHolderIdCode") != null && !jsonObj.get("i2cCardHolderIdCode").isJsonNull()) && !jsonObj.get("i2cCardHolderIdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `i2cCardHolderIdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("i2cCardHolderIdCode").toString()));
      }
      if ((jsonObj.get("i2cCardHolderIdValue") != null && !jsonObj.get("i2cCardHolderIdValue").isJsonNull()) && !jsonObj.get("i2cCardHolderIdValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `i2cCardHolderIdValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("i2cCardHolderIdValue").toString()));
      }
      if ((jsonObj.get("i2cDdaNumber") != null && !jsonObj.get("i2cDdaNumber").isJsonNull()) && !jsonObj.get("i2cDdaNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `i2cDdaNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("i2cDdaNumber").toString()));
      }
      if ((jsonObj.get("i2cCardReferenceNumber") != null && !jsonObj.get("i2cCardReferenceNumber").isJsonNull()) && !jsonObj.get("i2cCardReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `i2cCardReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("i2cCardReferenceNumber").toString()));
      }
      if ((jsonObj.get("i2cIdentificationNumber") != null && !jsonObj.get("i2cIdentificationNumber").isJsonNull()) && !jsonObj.get("i2cIdentificationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `i2cIdentificationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("i2cIdentificationNumber").toString()));
      }
      if ((jsonObj.get("i2cMemberId") != null && !jsonObj.get("i2cMemberId").isJsonNull()) && !jsonObj.get("i2cMemberId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `i2cMemberId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("i2cMemberId").toString()));
      }
      if ((jsonObj.get("i2cMrayStatus") != null && !jsonObj.get("i2cMrayStatus").isJsonNull()) && !jsonObj.get("i2cMrayStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `i2cMrayStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("i2cMrayStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Prepaid.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Prepaid' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Prepaid> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Prepaid.class));

       return (TypeAdapter<T>) new TypeAdapter<Prepaid>() {
           @Override
           public void write(JsonWriter out, Prepaid value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Prepaid read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Prepaid given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Prepaid
  * @throws IOException if the JSON string is invalid with respect to Prepaid
  */
  public static Prepaid fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Prepaid.class);
  }

 /**
  * Convert an instance of Prepaid to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

