/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * This is the request model for CustomerLookupByCustomerMasterKey service. This is to search for a customer by Customer Master Key/PCP Number (which will resolve to Customer Master Key) and receive the UCD profile of the customer found.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class CustomerLookupByCustomerMasterKeyRequest {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Header header;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private CustomerMasterKey key;

  /**
   * Flag which indicates to/not to convert the Special Characters to ASCII for Sender &amp; Receiver details (Name, Address, Address in UAB). For Loyalty, this flag will be defaulted to Y. * If not passed in the request, as is values will be returned in response by default. * If passed as N in the request, as is values will be returned in response. * If passed as Y in the request, the Special Characters will be converted to ASCII and will be returned in response. 
   */
  @JsonAdapter(EnableTransliterationFlagEnum.Adapter.class)
  public enum EnableTransliterationFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EnableTransliterationFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnableTransliterationFlagEnum fromValue(String value) {
      for (EnableTransliterationFlagEnum b : EnableTransliterationFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnableTransliterationFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnableTransliterationFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnableTransliterationFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnableTransliterationFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENABLE_TRANSLITERATION_FLAG = "enableTransliterationFlag";
  @SerializedName(SERIALIZED_NAME_ENABLE_TRANSLITERATION_FLAG)
  private EnableTransliterationFlagEnum enableTransliterationFlag = EnableTransliterationFlagEnum.N;

  /**
   * If this flag is not sent then by default it is considered as N If the flag value is &#39;Y&#39;, then will return additional funding sources (like funding sources added by TMT), if any, along with funding sources added by other than TMT. If the flag value is &#39;N&#39; then will return Funding Sources which are added by other than TMT. 
   */
  @JsonAdapter(SendAllFundSrcEnum.Adapter.class)
  public enum SendAllFundSrcEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendAllFundSrcEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendAllFundSrcEnum fromValue(String value) {
      for (SendAllFundSrcEnum b : SendAllFundSrcEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendAllFundSrcEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendAllFundSrcEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendAllFundSrcEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendAllFundSrcEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_ALL_FUND_SRC = "sendAllFundSrc";
  @SerializedName(SERIALIZED_NAME_SEND_ALL_FUND_SRC)
  private SendAllFundSrcEnum sendAllFundSrc = SendAllFundSrcEnum.N;

  /**
   * If available, PhoneVvStatus - N / L / M / P will be returned in response by default. PhoneVvStatus - Z / T / R / S / V / A / B / U / C / D will only be returned if this field is send as Y in the request.
   */
  @JsonAdapter(SendAllPhoneVvStatusEnum.Adapter.class)
  public enum SendAllPhoneVvStatusEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendAllPhoneVvStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendAllPhoneVvStatusEnum fromValue(String value) {
      for (SendAllPhoneVvStatusEnum b : SendAllPhoneVvStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendAllPhoneVvStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendAllPhoneVvStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendAllPhoneVvStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendAllPhoneVvStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_ALL_PHONE_VV_STATUS = "sendAllPhoneVvStatus";
  @SerializedName(SERIALIZED_NAME_SEND_ALL_PHONE_VV_STATUS)
  private SendAllPhoneVvStatusEnum sendAllPhoneVvStatus = SendAllPhoneVvStatusEnum.N;

  /**
   * This flag would indicate to include consolidated funding sources from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return funding sources from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated funding sources from both primary &amp; scondary profiles. 
   */
  @JsonAdapter(SendConsolidatedFundingSourcesEnum.Adapter.class)
  public enum SendConsolidatedFundingSourcesEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendConsolidatedFundingSourcesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendConsolidatedFundingSourcesEnum fromValue(String value) {
      for (SendConsolidatedFundingSourcesEnum b : SendConsolidatedFundingSourcesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendConsolidatedFundingSourcesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendConsolidatedFundingSourcesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendConsolidatedFundingSourcesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendConsolidatedFundingSourcesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_CONSOLIDATED_FUNDING_SOURCES = "sendConsolidatedFundingSources";
  @SerializedName(SERIALIZED_NAME_SEND_CONSOLIDATED_FUNDING_SOURCES)
  private SendConsolidatedFundingSourcesEnum sendConsolidatedFundingSources = SendConsolidatedFundingSourcesEnum.N;

  /**
   * This flag would indicate to include consolidated receviers from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return receviers from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated receivers from both primary &amp; scondary profiles. 
   */
  @JsonAdapter(SendConsolidatedReceiversEnum.Adapter.class)
  public enum SendConsolidatedReceiversEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendConsolidatedReceiversEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendConsolidatedReceiversEnum fromValue(String value) {
      for (SendConsolidatedReceiversEnum b : SendConsolidatedReceiversEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendConsolidatedReceiversEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendConsolidatedReceiversEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendConsolidatedReceiversEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendConsolidatedReceiversEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_CONSOLIDATED_RECEIVERS = "sendConsolidatedReceivers";
  @SerializedName(SERIALIZED_NAME_SEND_CONSOLIDATED_RECEIVERS)
  private SendConsolidatedReceiversEnum sendConsolidatedReceivers = SendConsolidatedReceiversEnum.N;

  public static final String SERIALIZED_NAME_REQUEST_INITIATED_BY = "requestInitiatedBy";
  @SerializedName(SERIALIZED_NAME_REQUEST_INITIATED_BY)
  private String requestInitiatedBy;

  public CustomerLookupByCustomerMasterKeyRequest() {
  }

  public CustomerLookupByCustomerMasterKeyRequest header(Header header) {
    
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nonnull
  public Header getHeader() {
    return header;
  }


  public void setHeader(Header header) {
    this.header = header;
  }


  public CustomerLookupByCustomerMasterKeyRequest key(CustomerMasterKey key) {
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nonnull
  public CustomerMasterKey getKey() {
    return key;
  }


  public void setKey(CustomerMasterKey key) {
    this.key = key;
  }


  public CustomerLookupByCustomerMasterKeyRequest enableTransliterationFlag(EnableTransliterationFlagEnum enableTransliterationFlag) {
    
    this.enableTransliterationFlag = enableTransliterationFlag;
    return this;
  }

   /**
   * Flag which indicates to/not to convert the Special Characters to ASCII for Sender &amp; Receiver details (Name, Address, Address in UAB). For Loyalty, this flag will be defaulted to Y. * If not passed in the request, as is values will be returned in response by default. * If passed as N in the request, as is values will be returned in response. * If passed as Y in the request, the Special Characters will be converted to ASCII and will be returned in response. 
   * @return enableTransliterationFlag
  **/
  @javax.annotation.Nullable
  public EnableTransliterationFlagEnum getEnableTransliterationFlag() {
    return enableTransliterationFlag;
  }


  public void setEnableTransliterationFlag(EnableTransliterationFlagEnum enableTransliterationFlag) {
    this.enableTransliterationFlag = enableTransliterationFlag;
  }


  public CustomerLookupByCustomerMasterKeyRequest sendAllFundSrc(SendAllFundSrcEnum sendAllFundSrc) {
    
    this.sendAllFundSrc = sendAllFundSrc;
    return this;
  }

   /**
   * If this flag is not sent then by default it is considered as N If the flag value is &#39;Y&#39;, then will return additional funding sources (like funding sources added by TMT), if any, along with funding sources added by other than TMT. If the flag value is &#39;N&#39; then will return Funding Sources which are added by other than TMT. 
   * @return sendAllFundSrc
  **/
  @javax.annotation.Nullable
  public SendAllFundSrcEnum getSendAllFundSrc() {
    return sendAllFundSrc;
  }


  public void setSendAllFundSrc(SendAllFundSrcEnum sendAllFundSrc) {
    this.sendAllFundSrc = sendAllFundSrc;
  }


  public CustomerLookupByCustomerMasterKeyRequest sendAllPhoneVvStatus(SendAllPhoneVvStatusEnum sendAllPhoneVvStatus) {
    
    this.sendAllPhoneVvStatus = sendAllPhoneVvStatus;
    return this;
  }

   /**
   * If available, PhoneVvStatus - N / L / M / P will be returned in response by default. PhoneVvStatus - Z / T / R / S / V / A / B / U / C / D will only be returned if this field is send as Y in the request.
   * @return sendAllPhoneVvStatus
  **/
  @javax.annotation.Nullable
  public SendAllPhoneVvStatusEnum getSendAllPhoneVvStatus() {
    return sendAllPhoneVvStatus;
  }


  public void setSendAllPhoneVvStatus(SendAllPhoneVvStatusEnum sendAllPhoneVvStatus) {
    this.sendAllPhoneVvStatus = sendAllPhoneVvStatus;
  }


  public CustomerLookupByCustomerMasterKeyRequest sendConsolidatedFundingSources(SendConsolidatedFundingSourcesEnum sendConsolidatedFundingSources) {
    
    this.sendConsolidatedFundingSources = sendConsolidatedFundingSources;
    return this;
  }

   /**
   * This flag would indicate to include consolidated funding sources from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return funding sources from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated funding sources from both primary &amp; scondary profiles. 
   * @return sendConsolidatedFundingSources
  **/
  @javax.annotation.Nullable
  public SendConsolidatedFundingSourcesEnum getSendConsolidatedFundingSources() {
    return sendConsolidatedFundingSources;
  }


  public void setSendConsolidatedFundingSources(SendConsolidatedFundingSourcesEnum sendConsolidatedFundingSources) {
    this.sendConsolidatedFundingSources = sendConsolidatedFundingSources;
  }


  public CustomerLookupByCustomerMasterKeyRequest sendConsolidatedReceivers(SendConsolidatedReceiversEnum sendConsolidatedReceivers) {
    
    this.sendConsolidatedReceivers = sendConsolidatedReceivers;
    return this;
  }

   /**
   * This flag would indicate to include consolidated receviers from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return receviers from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated receivers from both primary &amp; scondary profiles. 
   * @return sendConsolidatedReceivers
  **/
  @javax.annotation.Nullable
  public SendConsolidatedReceiversEnum getSendConsolidatedReceivers() {
    return sendConsolidatedReceivers;
  }


  public void setSendConsolidatedReceivers(SendConsolidatedReceiversEnum sendConsolidatedReceivers) {
    this.sendConsolidatedReceivers = sendConsolidatedReceivers;
  }


  public CustomerLookupByCustomerMasterKeyRequest requestInitiatedBy(String requestInitiatedBy) {
    
    this.requestInitiatedBy = requestInitiatedBy;
    return this;
  }

   /**
   * To identify who has initiated the request.
   * @return requestInitiatedBy
  **/
  @javax.annotation.Nonnull
  public String getRequestInitiatedBy() {
    return requestInitiatedBy;
  }


  public void setRequestInitiatedBy(String requestInitiatedBy) {
    this.requestInitiatedBy = requestInitiatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerLookupByCustomerMasterKeyRequest customerLookupByCustomerMasterKeyRequest = (CustomerLookupByCustomerMasterKeyRequest) o;
    return Objects.equals(this.header, customerLookupByCustomerMasterKeyRequest.header) &&
        Objects.equals(this.key, customerLookupByCustomerMasterKeyRequest.key) &&
        Objects.equals(this.enableTransliterationFlag, customerLookupByCustomerMasterKeyRequest.enableTransliterationFlag) &&
        Objects.equals(this.sendAllFundSrc, customerLookupByCustomerMasterKeyRequest.sendAllFundSrc) &&
        Objects.equals(this.sendAllPhoneVvStatus, customerLookupByCustomerMasterKeyRequest.sendAllPhoneVvStatus) &&
        Objects.equals(this.sendConsolidatedFundingSources, customerLookupByCustomerMasterKeyRequest.sendConsolidatedFundingSources) &&
        Objects.equals(this.sendConsolidatedReceivers, customerLookupByCustomerMasterKeyRequest.sendConsolidatedReceivers) &&
        Objects.equals(this.requestInitiatedBy, customerLookupByCustomerMasterKeyRequest.requestInitiatedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, key, enableTransliterationFlag, sendAllFundSrc, sendAllPhoneVvStatus, sendConsolidatedFundingSources, sendConsolidatedReceivers, requestInitiatedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerLookupByCustomerMasterKeyRequest {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    enableTransliterationFlag: ").append(toIndentedString(enableTransliterationFlag)).append("\n");
    sb.append("    sendAllFundSrc: ").append(toIndentedString(sendAllFundSrc)).append("\n");
    sb.append("    sendAllPhoneVvStatus: ").append(toIndentedString(sendAllPhoneVvStatus)).append("\n");
    sb.append("    sendConsolidatedFundingSources: ").append(toIndentedString(sendConsolidatedFundingSources)).append("\n");
    sb.append("    sendConsolidatedReceivers: ").append(toIndentedString(sendConsolidatedReceivers)).append("\n");
    sb.append("    requestInitiatedBy: ").append(toIndentedString(requestInitiatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("key");
    openapiFields.add("enableTransliterationFlag");
    openapiFields.add("sendAllFundSrc");
    openapiFields.add("sendAllPhoneVvStatus");
    openapiFields.add("sendConsolidatedFundingSources");
    openapiFields.add("sendConsolidatedReceivers");
    openapiFields.add("requestInitiatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("header");
    openapiRequiredFields.add("key");
    openapiRequiredFields.add("requestInitiatedBy");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerLookupByCustomerMasterKeyRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerLookupByCustomerMasterKeyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerLookupByCustomerMasterKeyRequest is not found in the empty JSON string", CustomerLookupByCustomerMasterKeyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerLookupByCustomerMasterKeyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerLookupByCustomerMasterKeyRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerLookupByCustomerMasterKeyRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `header`
      Header.validateJsonObject(jsonObj.getAsJsonObject("header"));
      // validate the required field `key`
      CustomerMasterKey.validateJsonObject(jsonObj.getAsJsonObject("key"));
      if ((jsonObj.get("enableTransliterationFlag") != null && !jsonObj.get("enableTransliterationFlag").isJsonNull()) && !jsonObj.get("enableTransliterationFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableTransliterationFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enableTransliterationFlag").toString()));
      }
      if ((jsonObj.get("sendAllFundSrc") != null && !jsonObj.get("sendAllFundSrc").isJsonNull()) && !jsonObj.get("sendAllFundSrc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendAllFundSrc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendAllFundSrc").toString()));
      }
      if ((jsonObj.get("sendAllPhoneVvStatus") != null && !jsonObj.get("sendAllPhoneVvStatus").isJsonNull()) && !jsonObj.get("sendAllPhoneVvStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendAllPhoneVvStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendAllPhoneVvStatus").toString()));
      }
      if ((jsonObj.get("sendConsolidatedFundingSources") != null && !jsonObj.get("sendConsolidatedFundingSources").isJsonNull()) && !jsonObj.get("sendConsolidatedFundingSources").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendConsolidatedFundingSources` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendConsolidatedFundingSources").toString()));
      }
      if ((jsonObj.get("sendConsolidatedReceivers") != null && !jsonObj.get("sendConsolidatedReceivers").isJsonNull()) && !jsonObj.get("sendConsolidatedReceivers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendConsolidatedReceivers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendConsolidatedReceivers").toString()));
      }
      if (!jsonObj.get("requestInitiatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestInitiatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestInitiatedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerLookupByCustomerMasterKeyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerLookupByCustomerMasterKeyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerLookupByCustomerMasterKeyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerLookupByCustomerMasterKeyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerLookupByCustomerMasterKeyRequest>() {
           @Override
           public void write(JsonWriter out, CustomerLookupByCustomerMasterKeyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerLookupByCustomerMasterKeyRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerLookupByCustomerMasterKeyRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerLookupByCustomerMasterKeyRequest
  * @throws IOException if the JSON string is invalid with respect to CustomerLookupByCustomerMasterKeyRequest
  */
  public static CustomerLookupByCustomerMasterKeyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerLookupByCustomerMasterKeyRequest.class);
  }

 /**
  * Convert an instance of CustomerLookupByCustomerMasterKeyRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

