/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * Customer Details Schema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class CustomerDetailsSet3 {
  public static final String SERIALIZED_NAME_CUSTOMER_SEQUENCE_NO = "customerSequenceNo";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SEQUENCE_NO)
  private Integer customerSequenceNo;

  public static final String SERIALIZED_NAME_CUSTOMER_PERSONAL_INFO = "customerPersonalInfo";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PERSONAL_INFO)
  private CustomerAndAudit customerPersonalInfo;

  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_INFO = "customerAccountInfo";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_INFO)
  private List<AccountAndAudit> customerAccountInfo;

  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_ONBOARDING_INFO = "customerAccountOnboardingInfo";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_ONBOARDING_INFO)
  private List<AccountOnboardingAndAudit> customerAccountOnboardingInfo;

  public static final String SERIALIZED_NAME_CUSTOMER_ADDRESS = "customerAddress";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ADDRESS)
  private List<AddressAndAudit> customerAddress;

  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customerEmail";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private List<EmailAndAudit> customerEmail;

  public static final String SERIALIZED_NAME_CUSTOMER_PHONE = "customerPhone";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PHONE)
  private List<PhoneAndAudit> customerPhone;

  public static final String SERIALIZED_NAME_CUSTOMER_SECURITY = "customerSecurity";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SECURITY)
  private List<SecurityQueAndAnsAndAudit> customerSecurity;

  public static final String SERIALIZED_NAME_CUSTOMER_PREFERENCES = "customerPreferences";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PREFERENCES)
  private PreferencesAndAudit customerPreferences;

  public static final String SERIALIZED_NAME_CUSTOMER_FUNDING_SOURCES = "customerFundingSources";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_FUNDING_SOURCES)
  private List<FundingSourceAndAudit> customerFundingSources;

  public static final String SERIALIZED_NAME_CUSTOMER_RECEIVERS = "customerReceivers";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_RECEIVERS)
  private List<CustomerReceiverAndAudit> customerReceivers;

  public static final String SERIALIZED_NAME_CUSTOMER_KYC = "customerKyc";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_KYC)
  private List<KycAndAudit> customerKyc;

  public static final String SERIALIZED_NAME_CUSTOMER_UAB = "customerUab";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_UAB)
  private List<UabAndAudit> customerUab;

  public static final String SERIALIZED_NAME_CUSTOMER_USAGE_STATISTICS = "customerUsageStatistics";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_USAGE_STATISTICS)
  private CustomerUsageStatisticsAndAudit customerUsageStatistics;

  public static final String SERIALIZED_NAME_PREPAID = "prepaid";
  @SerializedName(SERIALIZED_NAME_PREPAID)
  private PrepaidAndAudit prepaid;

  public static final String SERIALIZED_NAME_NOTIFICATION_STATUS = "notificationStatus";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_STATUS)
  private String notificationStatus;

  public static final String SERIALIZED_NAME_DO_NOT_DISPLAY = "doNotDisplay";
  @SerializedName(SERIALIZED_NAME_DO_NOT_DISPLAY)
  private Boolean doNotDisplay;

  public static final String SERIALIZED_NAME_IS_CONVENIENCE = "isConvenience";
  @SerializedName(SERIALIZED_NAME_IS_CONVENIENCE)
  private Boolean isConvenience;

  public CustomerDetailsSet3() {
  }

  public CustomerDetailsSet3 customerSequenceNo(Integer customerSequenceNo) {
    
    this.customerSequenceNo = customerSequenceNo;
    return this;
  }

   /**
   * Sequence number of the customer
   * @return customerSequenceNo
  **/
  @javax.annotation.Nullable
  public Integer getCustomerSequenceNo() {
    return customerSequenceNo;
  }


  public void setCustomerSequenceNo(Integer customerSequenceNo) {
    this.customerSequenceNo = customerSequenceNo;
  }


  public CustomerDetailsSet3 customerPersonalInfo(CustomerAndAudit customerPersonalInfo) {
    
    this.customerPersonalInfo = customerPersonalInfo;
    return this;
  }

   /**
   * Get customerPersonalInfo
   * @return customerPersonalInfo
  **/
  @javax.annotation.Nullable
  public CustomerAndAudit getCustomerPersonalInfo() {
    return customerPersonalInfo;
  }


  public void setCustomerPersonalInfo(CustomerAndAudit customerPersonalInfo) {
    this.customerPersonalInfo = customerPersonalInfo;
  }


  public CustomerDetailsSet3 customerAccountInfo(List<AccountAndAudit> customerAccountInfo) {
    
    this.customerAccountInfo = customerAccountInfo;
    return this;
  }

  public CustomerDetailsSet3 addCustomerAccountInfoItem(AccountAndAudit customerAccountInfoItem) {
    if (this.customerAccountInfo == null) {
      this.customerAccountInfo = new ArrayList<>();
    }
    this.customerAccountInfo.add(customerAccountInfoItem);
    return this;
  }

   /**
   * Get customerAccountInfo
   * @return customerAccountInfo
  **/
  @javax.annotation.Nullable
  public List<AccountAndAudit> getCustomerAccountInfo() {
    return customerAccountInfo;
  }


  public void setCustomerAccountInfo(List<AccountAndAudit> customerAccountInfo) {
    this.customerAccountInfo = customerAccountInfo;
  }


  public CustomerDetailsSet3 customerAccountOnboardingInfo(List<AccountOnboardingAndAudit> customerAccountOnboardingInfo) {
    
    this.customerAccountOnboardingInfo = customerAccountOnboardingInfo;
    return this;
  }

  public CustomerDetailsSet3 addCustomerAccountOnboardingInfoItem(AccountOnboardingAndAudit customerAccountOnboardingInfoItem) {
    if (this.customerAccountOnboardingInfo == null) {
      this.customerAccountOnboardingInfo = new ArrayList<>();
    }
    this.customerAccountOnboardingInfo.add(customerAccountOnboardingInfoItem);
    return this;
  }

   /**
   * Get customerAccountOnboardingInfo
   * @return customerAccountOnboardingInfo
  **/
  @javax.annotation.Nullable
  public List<AccountOnboardingAndAudit> getCustomerAccountOnboardingInfo() {
    return customerAccountOnboardingInfo;
  }


  public void setCustomerAccountOnboardingInfo(List<AccountOnboardingAndAudit> customerAccountOnboardingInfo) {
    this.customerAccountOnboardingInfo = customerAccountOnboardingInfo;
  }


  public CustomerDetailsSet3 customerAddress(List<AddressAndAudit> customerAddress) {
    
    this.customerAddress = customerAddress;
    return this;
  }

  public CustomerDetailsSet3 addCustomerAddressItem(AddressAndAudit customerAddressItem) {
    if (this.customerAddress == null) {
      this.customerAddress = new ArrayList<>();
    }
    this.customerAddress.add(customerAddressItem);
    return this;
  }

   /**
   * Get customerAddress
   * @return customerAddress
  **/
  @javax.annotation.Nullable
  public List<AddressAndAudit> getCustomerAddress() {
    return customerAddress;
  }


  public void setCustomerAddress(List<AddressAndAudit> customerAddress) {
    this.customerAddress = customerAddress;
  }


  public CustomerDetailsSet3 customerEmail(List<EmailAndAudit> customerEmail) {
    
    this.customerEmail = customerEmail;
    return this;
  }

  public CustomerDetailsSet3 addCustomerEmailItem(EmailAndAudit customerEmailItem) {
    if (this.customerEmail == null) {
      this.customerEmail = new ArrayList<>();
    }
    this.customerEmail.add(customerEmailItem);
    return this;
  }

   /**
   * Get customerEmail
   * @return customerEmail
  **/
  @javax.annotation.Nullable
  public List<EmailAndAudit> getCustomerEmail() {
    return customerEmail;
  }


  public void setCustomerEmail(List<EmailAndAudit> customerEmail) {
    this.customerEmail = customerEmail;
  }


  public CustomerDetailsSet3 customerPhone(List<PhoneAndAudit> customerPhone) {
    
    this.customerPhone = customerPhone;
    return this;
  }

  public CustomerDetailsSet3 addCustomerPhoneItem(PhoneAndAudit customerPhoneItem) {
    if (this.customerPhone == null) {
      this.customerPhone = new ArrayList<>();
    }
    this.customerPhone.add(customerPhoneItem);
    return this;
  }

   /**
   * Get customerPhone
   * @return customerPhone
  **/
  @javax.annotation.Nullable
  public List<PhoneAndAudit> getCustomerPhone() {
    return customerPhone;
  }


  public void setCustomerPhone(List<PhoneAndAudit> customerPhone) {
    this.customerPhone = customerPhone;
  }


  public CustomerDetailsSet3 customerSecurity(List<SecurityQueAndAnsAndAudit> customerSecurity) {
    
    this.customerSecurity = customerSecurity;
    return this;
  }

  public CustomerDetailsSet3 addCustomerSecurityItem(SecurityQueAndAnsAndAudit customerSecurityItem) {
    if (this.customerSecurity == null) {
      this.customerSecurity = new ArrayList<>();
    }
    this.customerSecurity.add(customerSecurityItem);
    return this;
  }

   /**
   * Get customerSecurity
   * @return customerSecurity
  **/
  @javax.annotation.Nullable
  public List<SecurityQueAndAnsAndAudit> getCustomerSecurity() {
    return customerSecurity;
  }


  public void setCustomerSecurity(List<SecurityQueAndAnsAndAudit> customerSecurity) {
    this.customerSecurity = customerSecurity;
  }


  public CustomerDetailsSet3 customerPreferences(PreferencesAndAudit customerPreferences) {
    
    this.customerPreferences = customerPreferences;
    return this;
  }

   /**
   * Get customerPreferences
   * @return customerPreferences
  **/
  @javax.annotation.Nullable
  public PreferencesAndAudit getCustomerPreferences() {
    return customerPreferences;
  }


  public void setCustomerPreferences(PreferencesAndAudit customerPreferences) {
    this.customerPreferences = customerPreferences;
  }


  public CustomerDetailsSet3 customerFundingSources(List<FundingSourceAndAudit> customerFundingSources) {
    
    this.customerFundingSources = customerFundingSources;
    return this;
  }

  public CustomerDetailsSet3 addCustomerFundingSourcesItem(FundingSourceAndAudit customerFundingSourcesItem) {
    if (this.customerFundingSources == null) {
      this.customerFundingSources = new ArrayList<>();
    }
    this.customerFundingSources.add(customerFundingSourcesItem);
    return this;
  }

   /**
   * Get customerFundingSources
   * @return customerFundingSources
  **/
  @javax.annotation.Nullable
  public List<FundingSourceAndAudit> getCustomerFundingSources() {
    return customerFundingSources;
  }


  public void setCustomerFundingSources(List<FundingSourceAndAudit> customerFundingSources) {
    this.customerFundingSources = customerFundingSources;
  }


  public CustomerDetailsSet3 customerReceivers(List<CustomerReceiverAndAudit> customerReceivers) {
    
    this.customerReceivers = customerReceivers;
    return this;
  }

  public CustomerDetailsSet3 addCustomerReceiversItem(CustomerReceiverAndAudit customerReceiversItem) {
    if (this.customerReceivers == null) {
      this.customerReceivers = new ArrayList<>();
    }
    this.customerReceivers.add(customerReceiversItem);
    return this;
  }

   /**
   * **The below table defines the sorting of receivers based on priority of receiverTypeId. If there are multiple receivers in same priority UCD will show latest updated receiver on top.** | Priority | Receiver Type | Description                              | | ---------|---------------|------------------------------------------| | 1        | X             | Buy Phone Time Receiver                  | | 2        | P             | Prepaid Receiver                         | | 3        | B             | D2B (Direct to Bank) Receiver            | | 4        | C             | D2C (Direct to Card) Receiver            | | 4        | V             | D2C (Direct to Card) Visa Receiver       | | 4        | Y             | D2C (Direct to Card) MasterCard Receiver | | 5        | D             | Domestic Receiver                        | | 5        | G             | Mexican Receiver                         | | 5        | I             | International Receiver                   | | 5        | L             | Local Receiver                           | | 5        | M             | Mexican Receiver                         | | 5        | Q             | Quick Receiver                           | | 5        | S             | Swiftpay Collect Receiver                | | 5        | U             | UPI Receiver                             | | 5        | W             | Wallet Receiver                          | 
   * @return customerReceivers
  **/
  @javax.annotation.Nullable
  public List<CustomerReceiverAndAudit> getCustomerReceivers() {
    return customerReceivers;
  }


  public void setCustomerReceivers(List<CustomerReceiverAndAudit> customerReceivers) {
    this.customerReceivers = customerReceivers;
  }


  public CustomerDetailsSet3 customerKyc(List<KycAndAudit> customerKyc) {
    
    this.customerKyc = customerKyc;
    return this;
  }

  public CustomerDetailsSet3 addCustomerKycItem(KycAndAudit customerKycItem) {
    if (this.customerKyc == null) {
      this.customerKyc = new ArrayList<>();
    }
    this.customerKyc.add(customerKycItem);
    return this;
  }

   /**
   * Get customerKyc
   * @return customerKyc
  **/
  @javax.annotation.Nullable
  public List<KycAndAudit> getCustomerKyc() {
    return customerKyc;
  }


  public void setCustomerKyc(List<KycAndAudit> customerKyc) {
    this.customerKyc = customerKyc;
  }


  public CustomerDetailsSet3 customerUab(List<UabAndAudit> customerUab) {
    
    this.customerUab = customerUab;
    return this;
  }

  public CustomerDetailsSet3 addCustomerUabItem(UabAndAudit customerUabItem) {
    if (this.customerUab == null) {
      this.customerUab = new ArrayList<>();
    }
    this.customerUab.add(customerUabItem);
    return this;
  }

   /**
   * Get customerUab
   * @return customerUab
  **/
  @javax.annotation.Nullable
  public List<UabAndAudit> getCustomerUab() {
    return customerUab;
  }


  public void setCustomerUab(List<UabAndAudit> customerUab) {
    this.customerUab = customerUab;
  }


  public CustomerDetailsSet3 customerUsageStatistics(CustomerUsageStatisticsAndAudit customerUsageStatistics) {
    
    this.customerUsageStatistics = customerUsageStatistics;
    return this;
  }

   /**
   * Get customerUsageStatistics
   * @return customerUsageStatistics
  **/
  @javax.annotation.Nullable
  public CustomerUsageStatisticsAndAudit getCustomerUsageStatistics() {
    return customerUsageStatistics;
  }


  public void setCustomerUsageStatistics(CustomerUsageStatisticsAndAudit customerUsageStatistics) {
    this.customerUsageStatistics = customerUsageStatistics;
  }


  public CustomerDetailsSet3 prepaid(PrepaidAndAudit prepaid) {
    
    this.prepaid = prepaid;
    return this;
  }

   /**
   * Get prepaid
   * @return prepaid
  **/
  @javax.annotation.Nullable
  public PrepaidAndAudit getPrepaid() {
    return prepaid;
  }


  public void setPrepaid(PrepaidAndAudit prepaid) {
    this.prepaid = prepaid;
  }


  public CustomerDetailsSet3 notificationStatus(String notificationStatus) {
    
    this.notificationStatus = notificationStatus;
    return this;
  }

   /**
   * 
   * @return notificationStatus
  **/
  @javax.annotation.Nullable
  public String getNotificationStatus() {
    return notificationStatus;
  }


  public void setNotificationStatus(String notificationStatus) {
    this.notificationStatus = notificationStatus;
  }


  public CustomerDetailsSet3 doNotDisplay(Boolean doNotDisplay) {
    
    this.doNotDisplay = doNotDisplay;
    return this;
  }

   /**
   * This flag is used to mark the Customers to be displayed/not displayed in POS. For Convenience it is always true
   * @return doNotDisplay
  **/
  @javax.annotation.Nullable
  public Boolean getDoNotDisplay() {
    return doNotDisplay;
  }


  public void setDoNotDisplay(Boolean doNotDisplay) {
    this.doNotDisplay = doNotDisplay;
  }


  public CustomerDetailsSet3 isConvenience(Boolean isConvenience) {
    
    this.isConvenience = isConvenience;
    return this;
  }

   /**
   * This flag is used to mark the Customer is Convenience or not
   * @return isConvenience
  **/
  @javax.annotation.Nullable
  public Boolean getIsConvenience() {
    return isConvenience;
  }


  public void setIsConvenience(Boolean isConvenience) {
    this.isConvenience = isConvenience;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerDetailsSet3 customerDetailsSet3 = (CustomerDetailsSet3) o;
    return Objects.equals(this.customerSequenceNo, customerDetailsSet3.customerSequenceNo) &&
        Objects.equals(this.customerPersonalInfo, customerDetailsSet3.customerPersonalInfo) &&
        Objects.equals(this.customerAccountInfo, customerDetailsSet3.customerAccountInfo) &&
        Objects.equals(this.customerAccountOnboardingInfo, customerDetailsSet3.customerAccountOnboardingInfo) &&
        Objects.equals(this.customerAddress, customerDetailsSet3.customerAddress) &&
        Objects.equals(this.customerEmail, customerDetailsSet3.customerEmail) &&
        Objects.equals(this.customerPhone, customerDetailsSet3.customerPhone) &&
        Objects.equals(this.customerSecurity, customerDetailsSet3.customerSecurity) &&
        Objects.equals(this.customerPreferences, customerDetailsSet3.customerPreferences) &&
        Objects.equals(this.customerFundingSources, customerDetailsSet3.customerFundingSources) &&
        Objects.equals(this.customerReceivers, customerDetailsSet3.customerReceivers) &&
        Objects.equals(this.customerKyc, customerDetailsSet3.customerKyc) &&
        Objects.equals(this.customerUab, customerDetailsSet3.customerUab) &&
        Objects.equals(this.customerUsageStatistics, customerDetailsSet3.customerUsageStatistics) &&
        Objects.equals(this.prepaid, customerDetailsSet3.prepaid) &&
        Objects.equals(this.notificationStatus, customerDetailsSet3.notificationStatus) &&
        Objects.equals(this.doNotDisplay, customerDetailsSet3.doNotDisplay) &&
        Objects.equals(this.isConvenience, customerDetailsSet3.isConvenience);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerSequenceNo, customerPersonalInfo, customerAccountInfo, customerAccountOnboardingInfo, customerAddress, customerEmail, customerPhone, customerSecurity, customerPreferences, customerFundingSources, customerReceivers, customerKyc, customerUab, customerUsageStatistics, prepaid, notificationStatus, doNotDisplay, isConvenience);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerDetailsSet3 {\n");
    sb.append("    customerSequenceNo: ").append(toIndentedString(customerSequenceNo)).append("\n");
    sb.append("    customerPersonalInfo: ").append(toIndentedString(customerPersonalInfo)).append("\n");
    sb.append("    customerAccountInfo: ").append(toIndentedString(customerAccountInfo)).append("\n");
    sb.append("    customerAccountOnboardingInfo: ").append(toIndentedString(customerAccountOnboardingInfo)).append("\n");
    sb.append("    customerAddress: ").append(toIndentedString(customerAddress)).append("\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    customerPhone: ").append(toIndentedString(customerPhone)).append("\n");
    sb.append("    customerSecurity: ").append(toIndentedString(customerSecurity)).append("\n");
    sb.append("    customerPreferences: ").append(toIndentedString(customerPreferences)).append("\n");
    sb.append("    customerFundingSources: ").append(toIndentedString(customerFundingSources)).append("\n");
    sb.append("    customerReceivers: ").append(toIndentedString(customerReceivers)).append("\n");
    sb.append("    customerKyc: ").append(toIndentedString(customerKyc)).append("\n");
    sb.append("    customerUab: ").append(toIndentedString(customerUab)).append("\n");
    sb.append("    customerUsageStatistics: ").append(toIndentedString(customerUsageStatistics)).append("\n");
    sb.append("    prepaid: ").append(toIndentedString(prepaid)).append("\n");
    sb.append("    notificationStatus: ").append(toIndentedString(notificationStatus)).append("\n");
    sb.append("    doNotDisplay: ").append(toIndentedString(doNotDisplay)).append("\n");
    sb.append("    isConvenience: ").append(toIndentedString(isConvenience)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerSequenceNo");
    openapiFields.add("customerPersonalInfo");
    openapiFields.add("customerAccountInfo");
    openapiFields.add("customerAccountOnboardingInfo");
    openapiFields.add("customerAddress");
    openapiFields.add("customerEmail");
    openapiFields.add("customerPhone");
    openapiFields.add("customerSecurity");
    openapiFields.add("customerPreferences");
    openapiFields.add("customerFundingSources");
    openapiFields.add("customerReceivers");
    openapiFields.add("customerKyc");
    openapiFields.add("customerUab");
    openapiFields.add("customerUsageStatistics");
    openapiFields.add("prepaid");
    openapiFields.add("notificationStatus");
    openapiFields.add("doNotDisplay");
    openapiFields.add("isConvenience");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerDetailsSet3
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerDetailsSet3.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerDetailsSet3 is not found in the empty JSON string", CustomerDetailsSet3.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerDetailsSet3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerDetailsSet3` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `customerPersonalInfo`
      if (jsonObj.get("customerPersonalInfo") != null && !jsonObj.get("customerPersonalInfo").isJsonNull()) {
        CustomerAndAudit.validateJsonObject(jsonObj.getAsJsonObject("customerPersonalInfo"));
      }
      if (jsonObj.get("customerAccountInfo") != null && !jsonObj.get("customerAccountInfo").isJsonNull()) {
        JsonArray jsonArraycustomerAccountInfo = jsonObj.getAsJsonArray("customerAccountInfo");
        if (jsonArraycustomerAccountInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerAccountInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerAccountInfo` to be an array in the JSON string but got `%s`", jsonObj.get("customerAccountInfo").toString()));
          }

          // validate the optional field `customerAccountInfo` (array)
          for (int i = 0; i < jsonArraycustomerAccountInfo.size(); i++) {
            AccountAndAudit.validateJsonObject(jsonArraycustomerAccountInfo.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerAccountOnboardingInfo") != null && !jsonObj.get("customerAccountOnboardingInfo").isJsonNull()) {
        JsonArray jsonArraycustomerAccountOnboardingInfo = jsonObj.getAsJsonArray("customerAccountOnboardingInfo");
        if (jsonArraycustomerAccountOnboardingInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerAccountOnboardingInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerAccountOnboardingInfo` to be an array in the JSON string but got `%s`", jsonObj.get("customerAccountOnboardingInfo").toString()));
          }

          // validate the optional field `customerAccountOnboardingInfo` (array)
          for (int i = 0; i < jsonArraycustomerAccountOnboardingInfo.size(); i++) {
            AccountOnboardingAndAudit.validateJsonObject(jsonArraycustomerAccountOnboardingInfo.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerAddress") != null && !jsonObj.get("customerAddress").isJsonNull()) {
        JsonArray jsonArraycustomerAddress = jsonObj.getAsJsonArray("customerAddress");
        if (jsonArraycustomerAddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerAddress").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerAddress` to be an array in the JSON string but got `%s`", jsonObj.get("customerAddress").toString()));
          }

          // validate the optional field `customerAddress` (array)
          for (int i = 0; i < jsonArraycustomerAddress.size(); i++) {
            AddressAndAudit.validateJsonObject(jsonArraycustomerAddress.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerEmail") != null && !jsonObj.get("customerEmail").isJsonNull()) {
        JsonArray jsonArraycustomerEmail = jsonObj.getAsJsonArray("customerEmail");
        if (jsonArraycustomerEmail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerEmail").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerEmail` to be an array in the JSON string but got `%s`", jsonObj.get("customerEmail").toString()));
          }

          // validate the optional field `customerEmail` (array)
          for (int i = 0; i < jsonArraycustomerEmail.size(); i++) {
            EmailAndAudit.validateJsonObject(jsonArraycustomerEmail.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerPhone") != null && !jsonObj.get("customerPhone").isJsonNull()) {
        JsonArray jsonArraycustomerPhone = jsonObj.getAsJsonArray("customerPhone");
        if (jsonArraycustomerPhone != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerPhone").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerPhone` to be an array in the JSON string but got `%s`", jsonObj.get("customerPhone").toString()));
          }

          // validate the optional field `customerPhone` (array)
          for (int i = 0; i < jsonArraycustomerPhone.size(); i++) {
            PhoneAndAudit.validateJsonObject(jsonArraycustomerPhone.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerSecurity") != null && !jsonObj.get("customerSecurity").isJsonNull()) {
        JsonArray jsonArraycustomerSecurity = jsonObj.getAsJsonArray("customerSecurity");
        if (jsonArraycustomerSecurity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerSecurity").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerSecurity` to be an array in the JSON string but got `%s`", jsonObj.get("customerSecurity").toString()));
          }

          // validate the optional field `customerSecurity` (array)
          for (int i = 0; i < jsonArraycustomerSecurity.size(); i++) {
            SecurityQueAndAnsAndAudit.validateJsonObject(jsonArraycustomerSecurity.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `customerPreferences`
      if (jsonObj.get("customerPreferences") != null && !jsonObj.get("customerPreferences").isJsonNull()) {
        PreferencesAndAudit.validateJsonObject(jsonObj.getAsJsonObject("customerPreferences"));
      }
      if (jsonObj.get("customerFundingSources") != null && !jsonObj.get("customerFundingSources").isJsonNull()) {
        JsonArray jsonArraycustomerFundingSources = jsonObj.getAsJsonArray("customerFundingSources");
        if (jsonArraycustomerFundingSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerFundingSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerFundingSources` to be an array in the JSON string but got `%s`", jsonObj.get("customerFundingSources").toString()));
          }

          // validate the optional field `customerFundingSources` (array)
          for (int i = 0; i < jsonArraycustomerFundingSources.size(); i++) {
            FundingSourceAndAudit.validateJsonObject(jsonArraycustomerFundingSources.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerReceivers") != null && !jsonObj.get("customerReceivers").isJsonNull()) {
        JsonArray jsonArraycustomerReceivers = jsonObj.getAsJsonArray("customerReceivers");
        if (jsonArraycustomerReceivers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerReceivers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerReceivers` to be an array in the JSON string but got `%s`", jsonObj.get("customerReceivers").toString()));
          }

          // validate the optional field `customerReceivers` (array)
          for (int i = 0; i < jsonArraycustomerReceivers.size(); i++) {
            CustomerReceiverAndAudit.validateJsonObject(jsonArraycustomerReceivers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerKyc") != null && !jsonObj.get("customerKyc").isJsonNull()) {
        JsonArray jsonArraycustomerKyc = jsonObj.getAsJsonArray("customerKyc");
        if (jsonArraycustomerKyc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerKyc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerKyc` to be an array in the JSON string but got `%s`", jsonObj.get("customerKyc").toString()));
          }

          // validate the optional field `customerKyc` (array)
          for (int i = 0; i < jsonArraycustomerKyc.size(); i++) {
            KycAndAudit.validateJsonObject(jsonArraycustomerKyc.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerUab") != null && !jsonObj.get("customerUab").isJsonNull()) {
        JsonArray jsonArraycustomerUab = jsonObj.getAsJsonArray("customerUab");
        if (jsonArraycustomerUab != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerUab").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerUab` to be an array in the JSON string but got `%s`", jsonObj.get("customerUab").toString()));
          }

          // validate the optional field `customerUab` (array)
          for (int i = 0; i < jsonArraycustomerUab.size(); i++) {
            UabAndAudit.validateJsonObject(jsonArraycustomerUab.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `customerUsageStatistics`
      if (jsonObj.get("customerUsageStatistics") != null && !jsonObj.get("customerUsageStatistics").isJsonNull()) {
        CustomerUsageStatisticsAndAudit.validateJsonObject(jsonObj.getAsJsonObject("customerUsageStatistics"));
      }
      // validate the optional field `prepaid`
      if (jsonObj.get("prepaid") != null && !jsonObj.get("prepaid").isJsonNull()) {
        PrepaidAndAudit.validateJsonObject(jsonObj.getAsJsonObject("prepaid"));
      }
      if ((jsonObj.get("notificationStatus") != null && !jsonObj.get("notificationStatus").isJsonNull()) && !jsonObj.get("notificationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerDetailsSet3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerDetailsSet3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerDetailsSet3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerDetailsSet3.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerDetailsSet3>() {
           @Override
           public void write(JsonWriter out, CustomerDetailsSet3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerDetailsSet3 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerDetailsSet3 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerDetailsSet3
  * @throws IOException if the JSON string is invalid with respect to CustomerDetailsSet3
  */
  public static CustomerDetailsSet3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerDetailsSet3.class);
  }

 /**
  * Convert an instance of CustomerDetailsSet3 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

