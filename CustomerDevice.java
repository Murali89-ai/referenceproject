/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * CustomerDevice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class CustomerDevice {
  public static final String SERIALIZED_NAME_DEVICE_SEQ = "deviceSeq";
  @SerializedName(SERIALIZED_NAME_DEVICE_SEQ)
  private Long deviceSeq;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE_ID = "accountTypeId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE_ID)
  private Integer accountTypeId;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_DEVICE_MODEL = "deviceModel";
  @SerializedName(SERIALIZED_NAME_DEVICE_MODEL)
  private String deviceModel;

  public static final String SERIALIZED_NAME_DEVICE_OS = "deviceOs";
  @SerializedName(SERIALIZED_NAME_DEVICE_OS)
  private String deviceOs;

  public static final String SERIALIZED_NAME_OPERATOR_ID = "operatorId";
  @SerializedName(SERIALIZED_NAME_OPERATOR_ID)
  private String operatorId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public CustomerDevice() {
  }

  public CustomerDevice deviceSeq(Long deviceSeq) {
    
    this.deviceSeq = deviceSeq;
    return this;
  }

   /**
   * This field indicates to return the customer&#39;s details and the receiver details for the given deviceSeq.
   * @return deviceSeq
  **/
  @javax.annotation.Nullable
  public Long getDeviceSeq() {
    return deviceSeq;
  }


  public void setDeviceSeq(Long deviceSeq) {
    this.deviceSeq = deviceSeq;
  }


  public CustomerDevice accountTypeId(Integer accountTypeId) {
    
    this.accountTypeId = accountTypeId;
    return this;
  }

   /**
   * Account Type ID values  * 0 - WU COM INTL R3 Nordic * 1 - WUCOM R3 Nordic * 2 - WUGOLD  * 3 - Loyalty  * 4 - TMT  * 5 - Prepaid Cardholder I2C  * 6 - Prepaid Cardholder FIS * 7 - Prepaid Purchaser  * 8 - MTX  * 9 - WUBS  * 10 - R2/R3/R4 SmartPhone  * 11 - R2/R3/R4 Web  * 12 - Banking * 13 - Guest US * 14 - Wallet * 15 - Correction Pay * 16 - Crypto * 17 - Guest EU * 18 - Business Relationship * 99 - OtherAccountTypeID 
   * @return accountTypeId
  **/
  @javax.annotation.Nullable
  public Integer getAccountTypeId() {
    return accountTypeId;
  }


  public void setAccountTypeId(Integer accountTypeId) {
    this.accountTypeId = accountTypeId;
  }


  public CustomerDevice deviceId(String deviceId) {
    
    this.deviceId = deviceId;
    return this;
  }

   /**
   * Id of Customer&#39;s Device.
   * @return deviceId
  **/
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }


  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public CustomerDevice deviceName(String deviceName) {
    
    this.deviceName = deviceName;
    return this;
  }

   /**
   * Name of Customer&#39;s Device.
   * @return deviceName
  **/
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }


  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public CustomerDevice deviceModel(String deviceModel) {
    
    this.deviceModel = deviceModel;
    return this;
  }

   /**
   * Model of Customer&#39;s Device.
   * @return deviceModel
  **/
  @javax.annotation.Nullable
  public String getDeviceModel() {
    return deviceModel;
  }


  public void setDeviceModel(String deviceModel) {
    this.deviceModel = deviceModel;
  }


  public CustomerDevice deviceOs(String deviceOs) {
    
    this.deviceOs = deviceOs;
    return this;
  }

   /**
   * Operating System of Customer&#39;s Device.
   * @return deviceOs
  **/
  @javax.annotation.Nullable
  public String getDeviceOs() {
    return deviceOs;
  }


  public void setDeviceOs(String deviceOs) {
    this.deviceOs = deviceOs;
  }


  public CustomerDevice operatorId(String operatorId) {
    
    this.operatorId = operatorId;
    return this;
  }

   /**
   * If the Device is updated from CTM system. the operator Id is the CTM / Care Agent ID.
   * @return operatorId
  **/
  @javax.annotation.Nullable
  public String getOperatorId() {
    return operatorId;
  }


  public void setOperatorId(String operatorId) {
    this.operatorId = operatorId;
  }


  public CustomerDevice status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of Customer&#39;s Device. * A - Active * I - Inactive * B - Blocked 
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public CustomerDevice startDate(String startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start Timestamp of the Device Status.
   * @return startDate
  **/
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public CustomerDevice endDate(String endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End Timestamp of the Device Status.
   * @return endDate
  **/
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public CustomerDevice comments(String comments) {
    
    this.comments = comments;
    return this;
  }

   /**
   * Comments on Customer&#39;s Device.
   * @return comments
  **/
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }


  public void setComments(String comments) {
    this.comments = comments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerDevice customerDevice = (CustomerDevice) o;
    return Objects.equals(this.deviceSeq, customerDevice.deviceSeq) &&
        Objects.equals(this.accountTypeId, customerDevice.accountTypeId) &&
        Objects.equals(this.deviceId, customerDevice.deviceId) &&
        Objects.equals(this.deviceName, customerDevice.deviceName) &&
        Objects.equals(this.deviceModel, customerDevice.deviceModel) &&
        Objects.equals(this.deviceOs, customerDevice.deviceOs) &&
        Objects.equals(this.operatorId, customerDevice.operatorId) &&
        Objects.equals(this.status, customerDevice.status) &&
        Objects.equals(this.startDate, customerDevice.startDate) &&
        Objects.equals(this.endDate, customerDevice.endDate) &&
        Objects.equals(this.comments, customerDevice.comments);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceSeq, accountTypeId, deviceId, deviceName, deviceModel, deviceOs, operatorId, status, startDate, endDate, comments);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerDevice {\n");
    sb.append("    deviceSeq: ").append(toIndentedString(deviceSeq)).append("\n");
    sb.append("    accountTypeId: ").append(toIndentedString(accountTypeId)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    deviceModel: ").append(toIndentedString(deviceModel)).append("\n");
    sb.append("    deviceOs: ").append(toIndentedString(deviceOs)).append("\n");
    sb.append("    operatorId: ").append(toIndentedString(operatorId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceSeq");
    openapiFields.add("accountTypeId");
    openapiFields.add("deviceId");
    openapiFields.add("deviceName");
    openapiFields.add("deviceModel");
    openapiFields.add("deviceOs");
    openapiFields.add("operatorId");
    openapiFields.add("status");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("comments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerDevice
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerDevice is not found in the empty JSON string", CustomerDevice.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerDevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerDevice` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("deviceId") != null && !jsonObj.get("deviceId").isJsonNull()) && !jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
      if ((jsonObj.get("deviceName") != null && !jsonObj.get("deviceName").isJsonNull()) && !jsonObj.get("deviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceName").toString()));
      }
      if ((jsonObj.get("deviceModel") != null && !jsonObj.get("deviceModel").isJsonNull()) && !jsonObj.get("deviceModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceModel").toString()));
      }
      if ((jsonObj.get("deviceOs") != null && !jsonObj.get("deviceOs").isJsonNull()) && !jsonObj.get("deviceOs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceOs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceOs").toString()));
      }
      if ((jsonObj.get("operatorId") != null && !jsonObj.get("operatorId").isJsonNull()) && !jsonObj.get("operatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatorId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerDevice>() {
           @Override
           public void write(JsonWriter out, CustomerDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerDevice read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerDevice given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerDevice
  * @throws IOException if the JSON string is invalid with respect to CustomerDevice
  */
  public static CustomerDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerDevice.class);
  }

 /**
  * Convert an instance of CustomerDevice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

