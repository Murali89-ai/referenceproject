/*
 * ucd_pmgmt_v1_api
 * Swagger documentation for UCD Profile Management Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.JSON;

/**
 * Address
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T21:22:09.739306500+05:30[Asia/Calcutta]")
public class Address {
  /**
   * AddressType Values *  1 - Primary Address *  2 - Secondary / Previous Address *  3 - PPS - International for Cruise customer *  4 - Japan Receiver Permanent Address *  5 - Mailing Address *  6 - Temporary Address *  7 - Business Address *  8 - For Future Use *  99 - AddressTypeOther 
   */
  @JsonAdapter(AddressTypeEnum.Adapter.class)
  public enum AddressTypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_99(99);

    private Integer value;

    AddressTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AddressTypeEnum fromValue(Integer value) {
      for (AddressTypeEnum b : AddressTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AddressTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddressTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddressTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return AddressTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "addressType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private AddressTypeEnum addressType;

  public static final String SERIALIZED_NAME_STREET_ADDRESS1 = "streetAddress1";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS1)
  private String streetAddress1;

  public static final String SERIALIZED_NAME_STREET_ADDRESS2 = "streetAddress2";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS2)
  private String streetAddress2;

  public static final String SERIALIZED_NAME_STREET_ADDRESS3 = "streetAddress3";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS3)
  private String streetAddress3;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO2 = "countryCodeIso2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO2)
  private String countryCodeIso2;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO3 = "countryCodeIso3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO3)
  private String countryCodeIso3;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_UNI = "countryCodeUni";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_UNI)
  private Long countryCodeUni;

  public static final String SERIALIZED_NAME_STATE_PROVINCE = "stateProvince";
  @SerializedName(SERIALIZED_NAME_STATE_PROVINCE)
  private String stateProvince;

  public static final String SERIALIZED_NAME_STATE_PROVINCE_CODE = "stateProvinceCode";
  @SerializedName(SERIALIZED_NAME_STATE_PROVINCE_CODE)
  private String stateProvinceCode;

  public static final String SERIALIZED_NAME_ZIP_POSTAL_CODE = "zipPostalCode";
  @SerializedName(SERIALIZED_NAME_ZIP_POSTAL_CODE)
  private String zipPostalCode;

  public static final String SERIALIZED_NAME_ADDRESS_FORMAT = "addressFormat";
  @SerializedName(SERIALIZED_NAME_ADDRESS_FORMAT)
  private String addressFormat;

  public static final String SERIALIZED_NAME_REFERENCE_FOR_ADDRESS_TYPE_OTHER = "referenceForAddressTypeOther";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FOR_ADDRESS_TYPE_OTHER)
  private String referenceForAddressTypeOther;

  public static final String SERIALIZED_NAME_ADVV_STATUS = "advvStatus";
  @SerializedName(SERIALIZED_NAME_ADVV_STATUS)
  private String advvStatus;

  public static final String SERIALIZED_NAME_ADVV_STATUS_BY = "advvStatusBy";
  @SerializedName(SERIALIZED_NAME_ADVV_STATUS_BY)
  private String advvStatusBy;

  public static final String SERIALIZED_NAME_ADVV_STATUS_UPDATED_DATE = "advvStatusUpdatedDate";
  @SerializedName(SERIALIZED_NAME_ADVV_STATUS_UPDATED_DATE)
  private OffsetDateTime advvStatusUpdatedDate;

  public static final String SERIALIZED_NAME_ADVV_EXPIRY_DATE = "advvExpiryDate";
  @SerializedName(SERIALIZED_NAME_ADVV_EXPIRY_DATE)
  private OffsetDateTime advvExpiryDate;

  public static final String SERIALIZED_NAME_DOC_REF_LOAD_DATE = "docRefLoadDate";
  @SerializedName(SERIALIZED_NAME_DOC_REF_LOAD_DATE)
  private OffsetDateTime docRefLoadDate;

  public static final String SERIALIZED_NAME_DOC_REF_NUMBER = "docRefNumber";
  @SerializedName(SERIALIZED_NAME_DOC_REF_NUMBER)
  private String docRefNumber;

  public static final String SERIALIZED_NAME_ADVV_PIN = "advvPin";
  @SerializedName(SERIALIZED_NAME_ADVV_PIN)
  private String advvPin;

  public static final String SERIALIZED_NAME_ADDRESS_SEARCH_JSON = "addressSearchJson";
  @SerializedName(SERIALIZED_NAME_ADDRESS_SEARCH_JSON)
  private String addressSearchJson;

  public static final String SERIALIZED_NAME_ADDRESS_DOC_TYPE = "addressDocType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_DOC_TYPE)
  private String addressDocType;

  public static final String SERIALIZED_NAME_DOC_UPLOAD_SYSTEM = "docUploadSystem";
  @SerializedName(SERIALIZED_NAME_DOC_UPLOAD_SYSTEM)
  private String docUploadSystem;

  public Address() {
  }

  public Address addressType(AddressTypeEnum addressType) {
    
    this.addressType = addressType;
    return this;
  }

   /**
   * AddressType Values *  1 - Primary Address *  2 - Secondary / Previous Address *  3 - PPS - International for Cruise customer *  4 - Japan Receiver Permanent Address *  5 - Mailing Address *  6 - Temporary Address *  7 - Business Address *  8 - For Future Use *  99 - AddressTypeOther 
   * @return addressType
  **/
  @javax.annotation.Nonnull
  public AddressTypeEnum getAddressType() {
    return addressType;
  }


  public void setAddressType(AddressTypeEnum addressType) {
    this.addressType = addressType;
  }


  public Address streetAddress1(String streetAddress1) {
    
    this.streetAddress1 = streetAddress1;
    return this;
  }

   /**
   * Customer&#39;s Street Address Line 1
   * @return streetAddress1
  **/
  @javax.annotation.Nullable
  public String getStreetAddress1() {
    return streetAddress1;
  }


  public void setStreetAddress1(String streetAddress1) {
    this.streetAddress1 = streetAddress1;
  }


  public Address streetAddress2(String streetAddress2) {
    
    this.streetAddress2 = streetAddress2;
    return this;
  }

   /**
   * Customer&#39;s Street Address Line 2. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return streetAddress2
  **/
  @javax.annotation.Nullable
  public String getStreetAddress2() {
    return streetAddress2;
  }


  public void setStreetAddress2(String streetAddress2) {
    this.streetAddress2 = streetAddress2;
  }


  public Address streetAddress3(String streetAddress3) {
    
    this.streetAddress3 = streetAddress3;
    return this;
  }

   /**
   * Customer&#39;s Street Address Line 3. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return streetAddress3
  **/
  @javax.annotation.Nullable
  public String getStreetAddress3() {
    return streetAddress3;
  }


  public void setStreetAddress3(String streetAddress3) {
    this.streetAddress3 = streetAddress3;
  }


  public Address city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * City
   * @return city
  **/
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    this.city = city;
  }


  public Address countryCodeIso2(String countryCodeIso2) {
    
    this.countryCodeIso2 = countryCodeIso2;
    return this;
  }

   /**
   * Country Code in ISO2 format. e.g. AT,IN,US
   * @return countryCodeIso2
  **/
  @javax.annotation.Nullable
  public String getCountryCodeIso2() {
    return countryCodeIso2;
  }


  public void setCountryCodeIso2(String countryCodeIso2) {
    this.countryCodeIso2 = countryCodeIso2;
  }


  public Address countryCodeIso3(String countryCodeIso3) {
    
    this.countryCodeIso3 = countryCodeIso3;
    return this;
  }

   /**
   * Country Code in ISO3 format. e.g. AUT,IND,USA
   * @return countryCodeIso3
  **/
  @javax.annotation.Nullable
  public String getCountryCodeIso3() {
    return countryCodeIso3;
  }


  public void setCountryCodeIso3(String countryCodeIso3) {
    this.countryCodeIso3 = countryCodeIso3;
  }


  public Address countryCodeUni(Long countryCodeUni) {
    
    this.countryCodeUni = countryCodeUni;
    return this;
  }

   /**
   * Unique Numeric Country Code. e.g. 40,356,840
   * @return countryCodeUni
  **/
  @javax.annotation.Nullable
  public Long getCountryCodeUni() {
    return countryCodeUni;
  }


  public void setCountryCodeUni(Long countryCodeUni) {
    this.countryCodeUni = countryCodeUni;
  }


  public Address stateProvince(String stateProvince) {
    
    this.stateProvince = stateProvince;
    return this;
  }

   /**
   * State Province Description. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return stateProvince
  **/
  @javax.annotation.Nullable
  public String getStateProvince() {
    return stateProvince;
  }


  public void setStateProvince(String stateProvince) {
    this.stateProvince = stateProvince;
  }


  public Address stateProvinceCode(String stateProvinceCode) {
    
    this.stateProvinceCode = stateProvinceCode;
    return this;
  }

   /**
   * State Province Code. e.g. AG,RO,VL. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return stateProvinceCode
  **/
  @javax.annotation.Nullable
  public String getStateProvinceCode() {
    return stateProvinceCode;
  }


  public void setStateProvinceCode(String stateProvinceCode) {
    this.stateProvinceCode = stateProvinceCode;
  }


  public Address zipPostalCode(String zipPostalCode) {
    
    this.zipPostalCode = zipPostalCode;
    return this;
  }

   /**
   * Zip Postal COde
   * @return zipPostalCode
  **/
  @javax.annotation.Nullable
  public String getZipPostalCode() {
    return zipPostalCode;
  }


  public void setZipPostalCode(String zipPostalCode) {
    this.zipPostalCode = zipPostalCode;
  }


  public Address addressFormat(String addressFormat) {
    
    this.addressFormat = addressFormat;
    return this;
  }

   /**
   * Address Format. * D - USA/Canada * I - Other countries 
   * @return addressFormat
  **/
  @javax.annotation.Nullable
  public String getAddressFormat() {
    return addressFormat;
  }


  public void setAddressFormat(String addressFormat) {
    this.addressFormat = addressFormat;
  }


  public Address referenceForAddressTypeOther(String referenceForAddressTypeOther) {
    
    this.referenceForAddressTypeOther = referenceForAddressTypeOther;
    return this;
  }

   /**
   * When the Address Type ID 99 (Other) is selected, Client needs to send the reference/actual Address type id value in this element.
   * @return referenceForAddressTypeOther
  **/
  @javax.annotation.Nullable
  public String getReferenceForAddressTypeOther() {
    return referenceForAddressTypeOther;
  }


  public void setReferenceForAddressTypeOther(String referenceForAddressTypeOther) {
    this.referenceForAddressTypeOther = referenceForAddressTypeOther;
  }


  public Address advvStatus(String advvStatus) {
    
    this.advvStatus = advvStatus;
    return this;
  }

   /**
   * Address Verification and Validation Status.  * N - Not Verified * Y - Verified * I - In Progress * R - Rejected 
   * @return advvStatus
  **/
  @javax.annotation.Nullable
  public String getAdvvStatus() {
    return advvStatus;
  }


  public void setAdvvStatus(String advvStatus) {
    this.advvStatus = advvStatus;
  }


  public Address advvStatusBy(String advvStatusBy) {
    
    this.advvStatusBy = advvStatusBy;
    return this;
  }

   /**
   * Application/System/End User which added/updated the ADVV Status.
   * @return advvStatusBy
  **/
  @javax.annotation.Nullable
  public String getAdvvStatusBy() {
    return advvStatusBy;
  }


  public void setAdvvStatusBy(String advvStatusBy) {
    this.advvStatusBy = advvStatusBy;
  }


  public Address advvStatusUpdatedDate(OffsetDateTime advvStatusUpdatedDate) {
    
    this.advvStatusUpdatedDate = advvStatusUpdatedDate;
    return this;
  }

   /**
   * Timestamp when the Application/System/End User added/updated the ADVV Status.
   * @return advvStatusUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAdvvStatusUpdatedDate() {
    return advvStatusUpdatedDate;
  }


  public void setAdvvStatusUpdatedDate(OffsetDateTime advvStatusUpdatedDate) {
    this.advvStatusUpdatedDate = advvStatusUpdatedDate;
  }


  public Address advvExpiryDate(OffsetDateTime advvExpiryDate) {
    
    this.advvExpiryDate = advvExpiryDate;
    return this;
  }

   /**
   * Timestamp when the ADVV will get Expire
   * @return advvExpiryDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAdvvExpiryDate() {
    return advvExpiryDate;
  }


  public void setAdvvExpiryDate(OffsetDateTime advvExpiryDate) {
    this.advvExpiryDate = advvExpiryDate;
  }


  public Address docRefLoadDate(OffsetDateTime docRefLoadDate) {
    
    this.docRefLoadDate = docRefLoadDate;
    return this;
  }

   /**
   * Timestamp when the Customer uploaded the Address documents for verification purposes.
   * @return docRefLoadDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDocRefLoadDate() {
    return docRefLoadDate;
  }


  public void setDocRefLoadDate(OffsetDateTime docRefLoadDate) {
    this.docRefLoadDate = docRefLoadDate;
  }


  public Address docRefNumber(String docRefNumber) {
    
    this.docRefNumber = docRefNumber;
    return this;
  }

   /**
   * Reference number for the uploaded Address documents.
   * @return docRefNumber
  **/
  @javax.annotation.Nullable
  public String getDocRefNumber() {
    return docRefNumber;
  }


  public void setDocRefNumber(String docRefNumber) {
    this.docRefNumber = docRefNumber;
  }


  public Address advvPin(String advvPin) {
    
    this.advvPin = advvPin;
    return this;
  }

   /**
   * Verification Pin for ADVV process.
   * @return advvPin
  **/
  @javax.annotation.Nullable
  public String getAdvvPin() {
    return advvPin;
  }


  public void setAdvvPin(String advvPin) {
    this.advvPin = advvPin;
  }


  public Address addressSearchJson(String addressSearchJson) {
    
    this.addressSearchJson = addressSearchJson;
    return this;
  }

   /**
   * Auto Search Address JSON. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return addressSearchJson
  **/
  @javax.annotation.Nullable
  public String getAddressSearchJson() {
    return addressSearchJson;
  }


  public void setAddressSearchJson(String addressSearchJson) {
    this.addressSearchJson = addressSearchJson;
  }


  public Address addressDocType(String addressDocType) {
    
    this.addressDocType = addressDocType;
    return this;
  }

   /**
   * Address Document Type.
   * @return addressDocType
  **/
  @javax.annotation.Nullable
  public String getAddressDocType() {
    return addressDocType;
  }


  public void setAddressDocType(String addressDocType) {
    this.addressDocType = addressDocType;
  }


  public Address docUploadSystem(String docUploadSystem) {
    
    this.docUploadSystem = docUploadSystem;
    return this;
  }

   /**
   * Application/System/End User which uploaded the Address Document.
   * @return docUploadSystem
  **/
  @javax.annotation.Nullable
  public String getDocUploadSystem() {
    return docUploadSystem;
  }


  public void setDocUploadSystem(String docUploadSystem) {
    this.docUploadSystem = docUploadSystem;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Address address = (Address) o;
    return Objects.equals(this.addressType, address.addressType) &&
        Objects.equals(this.streetAddress1, address.streetAddress1) &&
        Objects.equals(this.streetAddress2, address.streetAddress2) &&
        Objects.equals(this.streetAddress3, address.streetAddress3) &&
        Objects.equals(this.city, address.city) &&
        Objects.equals(this.countryCodeIso2, address.countryCodeIso2) &&
        Objects.equals(this.countryCodeIso3, address.countryCodeIso3) &&
        Objects.equals(this.countryCodeUni, address.countryCodeUni) &&
        Objects.equals(this.stateProvince, address.stateProvince) &&
        Objects.equals(this.stateProvinceCode, address.stateProvinceCode) &&
        Objects.equals(this.zipPostalCode, address.zipPostalCode) &&
        Objects.equals(this.addressFormat, address.addressFormat) &&
        Objects.equals(this.referenceForAddressTypeOther, address.referenceForAddressTypeOther) &&
        Objects.equals(this.advvStatus, address.advvStatus) &&
        Objects.equals(this.advvStatusBy, address.advvStatusBy) &&
        Objects.equals(this.advvStatusUpdatedDate, address.advvStatusUpdatedDate) &&
        Objects.equals(this.advvExpiryDate, address.advvExpiryDate) &&
        Objects.equals(this.docRefLoadDate, address.docRefLoadDate) &&
        Objects.equals(this.docRefNumber, address.docRefNumber) &&
        Objects.equals(this.advvPin, address.advvPin) &&
        Objects.equals(this.addressSearchJson, address.addressSearchJson) &&
        Objects.equals(this.addressDocType, address.addressDocType) &&
        Objects.equals(this.docUploadSystem, address.docUploadSystem);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressType, streetAddress1, streetAddress2, streetAddress3, city, countryCodeIso2, countryCodeIso3, countryCodeUni, stateProvince, stateProvinceCode, zipPostalCode, addressFormat, referenceForAddressTypeOther, advvStatus, advvStatusBy, advvStatusUpdatedDate, advvExpiryDate, docRefLoadDate, docRefNumber, advvPin, addressSearchJson, addressDocType, docUploadSystem);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Address {\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    streetAddress1: ").append(toIndentedString(streetAddress1)).append("\n");
    sb.append("    streetAddress2: ").append(toIndentedString(streetAddress2)).append("\n");
    sb.append("    streetAddress3: ").append(toIndentedString(streetAddress3)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    countryCodeIso2: ").append(toIndentedString(countryCodeIso2)).append("\n");
    sb.append("    countryCodeIso3: ").append(toIndentedString(countryCodeIso3)).append("\n");
    sb.append("    countryCodeUni: ").append(toIndentedString(countryCodeUni)).append("\n");
    sb.append("    stateProvince: ").append(toIndentedString(stateProvince)).append("\n");
    sb.append("    stateProvinceCode: ").append(toIndentedString(stateProvinceCode)).append("\n");
    sb.append("    zipPostalCode: ").append(toIndentedString(zipPostalCode)).append("\n");
    sb.append("    addressFormat: ").append(toIndentedString(addressFormat)).append("\n");
    sb.append("    referenceForAddressTypeOther: ").append(toIndentedString(referenceForAddressTypeOther)).append("\n");
    sb.append("    advvStatus: ").append(toIndentedString(advvStatus)).append("\n");
    sb.append("    advvStatusBy: ").append(toIndentedString(advvStatusBy)).append("\n");
    sb.append("    advvStatusUpdatedDate: ").append(toIndentedString(advvStatusUpdatedDate)).append("\n");
    sb.append("    advvExpiryDate: ").append(toIndentedString(advvExpiryDate)).append("\n");
    sb.append("    docRefLoadDate: ").append(toIndentedString(docRefLoadDate)).append("\n");
    sb.append("    docRefNumber: ").append(toIndentedString(docRefNumber)).append("\n");
    sb.append("    advvPin: ").append(toIndentedString(advvPin)).append("\n");
    sb.append("    addressSearchJson: ").append(toIndentedString(addressSearchJson)).append("\n");
    sb.append("    addressDocType: ").append(toIndentedString(addressDocType)).append("\n");
    sb.append("    docUploadSystem: ").append(toIndentedString(docUploadSystem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressType");
    openapiFields.add("streetAddress1");
    openapiFields.add("streetAddress2");
    openapiFields.add("streetAddress3");
    openapiFields.add("city");
    openapiFields.add("countryCodeIso2");
    openapiFields.add("countryCodeIso3");
    openapiFields.add("countryCodeUni");
    openapiFields.add("stateProvince");
    openapiFields.add("stateProvinceCode");
    openapiFields.add("zipPostalCode");
    openapiFields.add("addressFormat");
    openapiFields.add("referenceForAddressTypeOther");
    openapiFields.add("advvStatus");
    openapiFields.add("advvStatusBy");
    openapiFields.add("advvStatusUpdatedDate");
    openapiFields.add("advvExpiryDate");
    openapiFields.add("docRefLoadDate");
    openapiFields.add("docRefNumber");
    openapiFields.add("advvPin");
    openapiFields.add("addressSearchJson");
    openapiFields.add("addressDocType");
    openapiFields.add("docUploadSystem");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addressType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Address
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Address.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Address is not found in the empty JSON string", Address.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Address.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Address` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Address.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("streetAddress1") != null && !jsonObj.get("streetAddress1").isJsonNull()) && !jsonObj.get("streetAddress1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress1").toString()));
      }
      if ((jsonObj.get("streetAddress2") != null && !jsonObj.get("streetAddress2").isJsonNull()) && !jsonObj.get("streetAddress2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress2").toString()));
      }
      if ((jsonObj.get("streetAddress3") != null && !jsonObj.get("streetAddress3").isJsonNull()) && !jsonObj.get("streetAddress3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress3").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("countryCodeIso2") != null && !jsonObj.get("countryCodeIso2").isJsonNull()) && !jsonObj.get("countryCodeIso2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCodeIso2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCodeIso2").toString()));
      }
      if ((jsonObj.get("countryCodeIso3") != null && !jsonObj.get("countryCodeIso3").isJsonNull()) && !jsonObj.get("countryCodeIso3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCodeIso3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCodeIso3").toString()));
      }
      if ((jsonObj.get("stateProvince") != null && !jsonObj.get("stateProvince").isJsonNull()) && !jsonObj.get("stateProvince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateProvince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateProvince").toString()));
      }
      if ((jsonObj.get("stateProvinceCode") != null && !jsonObj.get("stateProvinceCode").isJsonNull()) && !jsonObj.get("stateProvinceCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateProvinceCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateProvinceCode").toString()));
      }
      if ((jsonObj.get("zipPostalCode") != null && !jsonObj.get("zipPostalCode").isJsonNull()) && !jsonObj.get("zipPostalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipPostalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipPostalCode").toString()));
      }
      if ((jsonObj.get("addressFormat") != null && !jsonObj.get("addressFormat").isJsonNull()) && !jsonObj.get("addressFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressFormat").toString()));
      }
      if ((jsonObj.get("referenceForAddressTypeOther") != null && !jsonObj.get("referenceForAddressTypeOther").isJsonNull()) && !jsonObj.get("referenceForAddressTypeOther").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceForAddressTypeOther` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceForAddressTypeOther").toString()));
      }
      if ((jsonObj.get("advvStatus") != null && !jsonObj.get("advvStatus").isJsonNull()) && !jsonObj.get("advvStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advvStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advvStatus").toString()));
      }
      if ((jsonObj.get("advvStatusBy") != null && !jsonObj.get("advvStatusBy").isJsonNull()) && !jsonObj.get("advvStatusBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advvStatusBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advvStatusBy").toString()));
      }
      if ((jsonObj.get("docRefNumber") != null && !jsonObj.get("docRefNumber").isJsonNull()) && !jsonObj.get("docRefNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docRefNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docRefNumber").toString()));
      }
      if ((jsonObj.get("advvPin") != null && !jsonObj.get("advvPin").isJsonNull()) && !jsonObj.get("advvPin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advvPin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advvPin").toString()));
      }
      if ((jsonObj.get("addressSearchJson") != null && !jsonObj.get("addressSearchJson").isJsonNull()) && !jsonObj.get("addressSearchJson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressSearchJson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressSearchJson").toString()));
      }
      if ((jsonObj.get("addressDocType") != null && !jsonObj.get("addressDocType").isJsonNull()) && !jsonObj.get("addressDocType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressDocType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressDocType").toString()));
      }
      if ((jsonObj.get("docUploadSystem") != null && !jsonObj.get("docUploadSystem").isJsonNull()) && !jsonObj.get("docUploadSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docUploadSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docUploadSystem").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Address.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Address' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Address> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Address.class));

       return (TypeAdapter<T>) new TypeAdapter<Address>() {
           @Override
           public void write(JsonWriter out, Address value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Address read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Address given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Address
  * @throws IOException if the JSON string is invalid with respect to Address
  */
  public static Address fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Address.class);
  }

 /**
  * Convert an instance of Address to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

