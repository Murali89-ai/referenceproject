/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * For Key Based Looukp, any one of the below element should be present. If multiple elements are passed, the first element will be considered.   - CustomerUMN   - PCPNumber   - AccountKey   - PartnerKey   - ServiceProviderKey  For Non Key Based Lookup, any one of the below element should be present. If multiple elements are passed, the first element will be considered.   - Name   - ISDCodePlusPhoneNumber   - EmailValue   - CreditCardNumber   - KYCValue   - WUGoldCard   - AccountKey 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class CustomerLookup {
  public static final String SERIALIZED_NAME_CUSTOMER_KEY = "customerKey";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_KEY)
  private CustomerKey customerKey;

  public static final String SERIALIZED_NAME_CUSTOMER_NON_KEY = "customerNonKey";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NON_KEY)
  private CustomerNonKey customerNonKey;

  public CustomerLookup() {
  }

  public CustomerLookup customerKey(CustomerKey customerKey) {
    
    this.customerKey = customerKey;
    return this;
  }

   /**
   * Get customerKey
   * @return customerKey
  **/
  @javax.annotation.Nullable
  public CustomerKey getCustomerKey() {
    return customerKey;
  }


  public void setCustomerKey(CustomerKey customerKey) {
    this.customerKey = customerKey;
  }


  public CustomerLookup customerNonKey(CustomerNonKey customerNonKey) {
    
    this.customerNonKey = customerNonKey;
    return this;
  }

   /**
   * Get customerNonKey
   * @return customerNonKey
  **/
  @javax.annotation.Nullable
  public CustomerNonKey getCustomerNonKey() {
    return customerNonKey;
  }


  public void setCustomerNonKey(CustomerNonKey customerNonKey) {
    this.customerNonKey = customerNonKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerLookup customerLookup = (CustomerLookup) o;
    return Objects.equals(this.customerKey, customerLookup.customerKey) &&
        Objects.equals(this.customerNonKey, customerLookup.customerNonKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerKey, customerNonKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerLookup {\n");
    sb.append("    customerKey: ").append(toIndentedString(customerKey)).append("\n");
    sb.append("    customerNonKey: ").append(toIndentedString(customerNonKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerKey");
    openapiFields.add("customerNonKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerLookup
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerLookup.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerLookup is not found in the empty JSON string", CustomerLookup.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerLookup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerLookup` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `customerKey`
      if (jsonObj.get("customerKey") != null && !jsonObj.get("customerKey").isJsonNull()) {
        CustomerKey.validateJsonObject(jsonObj.getAsJsonObject("customerKey"));
      }
      // validate the optional field `customerNonKey`
      if (jsonObj.get("customerNonKey") != null && !jsonObj.get("customerNonKey").isJsonNull()) {
        CustomerNonKey.validateJsonObject(jsonObj.getAsJsonObject("customerNonKey"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerLookup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerLookup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerLookup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerLookup.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerLookup>() {
           @Override
           public void write(JsonWriter out, CustomerLookup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerLookup read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerLookup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerLookup
  * @throws IOException if the JSON string is invalid with respect to CustomerLookup
  */
  public static CustomerLookup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerLookup.class);
  }

 /**
  * Convert an instance of CustomerLookup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

