/*
 * ucd_pmgmt_v1_api
 * Swagger documentation for UCD Profile Management Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.CustomerKey;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.Header;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.ReceiverName;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.SenderName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.JSON;

/**
 * This is request model for UpdateSenderOrReceiverName service. This is to Update Sender / Receiver name elements for a customer in a single request. If the Sender / Receiver in the request already exist in database then the data will be updated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T21:22:09.739306500+05:30[Asia/Calcutta]")
public class UpdateSenderOrReceiverNameRequest {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Header header;

  public static final String SERIALIZED_NAME_UPDATE_SENDER_OR_RECEIVER_NAME_KEY = "updateSenderOrReceiverNameKey";
  @SerializedName(SERIALIZED_NAME_UPDATE_SENDER_OR_RECEIVER_NAME_KEY)
  private CustomerKey updateSenderOrReceiverNameKey;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private SenderName sender;

  public static final String SERIALIZED_NAME_RECEIVER = "receiver";
  @SerializedName(SERIALIZED_NAME_RECEIVER)
  private ReceiverName receiver;

  public static final String SERIALIZED_NAME_IS_TRNL_REQ_FLAG = "isTrnlReqFlag";
  @SerializedName(SERIALIZED_NAME_IS_TRNL_REQ_FLAG)
  private Boolean isTrnlReqFlag;

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "requestType";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private String requestType;

  public static final String SERIALIZED_NAME_REQUEST_INITIATED_BY = "requestInitiatedBy";
  @SerializedName(SERIALIZED_NAME_REQUEST_INITIATED_BY)
  private String requestInitiatedBy;

  public UpdateSenderOrReceiverNameRequest() {
  }

  public UpdateSenderOrReceiverNameRequest header(Header header) {
    
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nonnull
  public Header getHeader() {
    return header;
  }


  public void setHeader(Header header) {
    this.header = header;
  }


  public UpdateSenderOrReceiverNameRequest updateSenderOrReceiverNameKey(CustomerKey updateSenderOrReceiverNameKey) {
    
    this.updateSenderOrReceiverNameKey = updateSenderOrReceiverNameKey;
    return this;
  }

   /**
   * Get updateSenderOrReceiverNameKey
   * @return updateSenderOrReceiverNameKey
  **/
  @javax.annotation.Nonnull
  public CustomerKey getUpdateSenderOrReceiverNameKey() {
    return updateSenderOrReceiverNameKey;
  }


  public void setUpdateSenderOrReceiverNameKey(CustomerKey updateSenderOrReceiverNameKey) {
    this.updateSenderOrReceiverNameKey = updateSenderOrReceiverNameKey;
  }


  public UpdateSenderOrReceiverNameRequest sender(SenderName sender) {
    
    this.sender = sender;
    return this;
  }

   /**
   * Get sender
   * @return sender
  **/
  @javax.annotation.Nullable
  public SenderName getSender() {
    return sender;
  }


  public void setSender(SenderName sender) {
    this.sender = sender;
  }


  public UpdateSenderOrReceiverNameRequest receiver(ReceiverName receiver) {
    
    this.receiver = receiver;
    return this;
  }

   /**
   * Get receiver
   * @return receiver
  **/
  @javax.annotation.Nullable
  public ReceiverName getReceiver() {
    return receiver;
  }


  public void setReceiver(ReceiverName receiver) {
    this.receiver = receiver;
  }


  public UpdateSenderOrReceiverNameRequest isTrnlReqFlag(Boolean isTrnlReqFlag) {
    
    this.isTrnlReqFlag = isTrnlReqFlag;
    return this;
  }

   /**
   * This field is used in RCM only. N/A for UCD
   * @return isTrnlReqFlag
  **/
  @javax.annotation.Nullable
  public Boolean getIsTrnlReqFlag() {
    return isTrnlReqFlag;
  }


  public void setIsTrnlReqFlag(Boolean isTrnlReqFlag) {
    this.isTrnlReqFlag = isTrnlReqFlag;
  }


  public UpdateSenderOrReceiverNameRequest requestType(String requestType) {
    
    this.requestType = requestType;
    return this;
  }

   /**
   * This field is used in RCM only. N/A for UCD
   * @return requestType
  **/
  @javax.annotation.Nullable
  public String getRequestType() {
    return requestType;
  }


  public void setRequestType(String requestType) {
    this.requestType = requestType;
  }


  public UpdateSenderOrReceiverNameRequest requestInitiatedBy(String requestInitiatedBy) {
    
    this.requestInitiatedBy = requestInitiatedBy;
    return this;
  }

   /**
   * To identify who has initiated the request.
   * @return requestInitiatedBy
  **/
  @javax.annotation.Nonnull
  public String getRequestInitiatedBy() {
    return requestInitiatedBy;
  }


  public void setRequestInitiatedBy(String requestInitiatedBy) {
    this.requestInitiatedBy = requestInitiatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSenderOrReceiverNameRequest updateSenderOrReceiverNameRequest = (UpdateSenderOrReceiverNameRequest) o;
    return Objects.equals(this.header, updateSenderOrReceiverNameRequest.header) &&
        Objects.equals(this.updateSenderOrReceiverNameKey, updateSenderOrReceiverNameRequest.updateSenderOrReceiverNameKey) &&
        Objects.equals(this.sender, updateSenderOrReceiverNameRequest.sender) &&
        Objects.equals(this.receiver, updateSenderOrReceiverNameRequest.receiver) &&
        Objects.equals(this.isTrnlReqFlag, updateSenderOrReceiverNameRequest.isTrnlReqFlag) &&
        Objects.equals(this.requestType, updateSenderOrReceiverNameRequest.requestType) &&
        Objects.equals(this.requestInitiatedBy, updateSenderOrReceiverNameRequest.requestInitiatedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, updateSenderOrReceiverNameKey, sender, receiver, isTrnlReqFlag, requestType, requestInitiatedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSenderOrReceiverNameRequest {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    updateSenderOrReceiverNameKey: ").append(toIndentedString(updateSenderOrReceiverNameKey)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    receiver: ").append(toIndentedString(receiver)).append("\n");
    sb.append("    isTrnlReqFlag: ").append(toIndentedString(isTrnlReqFlag)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    requestInitiatedBy: ").append(toIndentedString(requestInitiatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("updateSenderOrReceiverNameKey");
    openapiFields.add("sender");
    openapiFields.add("receiver");
    openapiFields.add("isTrnlReqFlag");
    openapiFields.add("requestType");
    openapiFields.add("requestInitiatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("header");
    openapiRequiredFields.add("updateSenderOrReceiverNameKey");
    openapiRequiredFields.add("requestInitiatedBy");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateSenderOrReceiverNameRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateSenderOrReceiverNameRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSenderOrReceiverNameRequest is not found in the empty JSON string", UpdateSenderOrReceiverNameRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UpdateSenderOrReceiverNameRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSenderOrReceiverNameRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSenderOrReceiverNameRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `header`
      Header.validateJsonObject(jsonObj.getAsJsonObject("header"));
      // validate the required field `updateSenderOrReceiverNameKey`
      CustomerKey.validateJsonObject(jsonObj.getAsJsonObject("updateSenderOrReceiverNameKey"));
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        SenderName.validateJsonObject(jsonObj.getAsJsonObject("sender"));
      }
      // validate the optional field `receiver`
      if (jsonObj.get("receiver") != null && !jsonObj.get("receiver").isJsonNull()) {
        ReceiverName.validateJsonObject(jsonObj.getAsJsonObject("receiver"));
      }
      if ((jsonObj.get("requestType") != null && !jsonObj.get("requestType").isJsonNull()) && !jsonObj.get("requestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestType").toString()));
      }
      if (!jsonObj.get("requestInitiatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestInitiatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestInitiatedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSenderOrReceiverNameRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSenderOrReceiverNameRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSenderOrReceiverNameRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSenderOrReceiverNameRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSenderOrReceiverNameRequest>() {
           @Override
           public void write(JsonWriter out, UpdateSenderOrReceiverNameRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSenderOrReceiverNameRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateSenderOrReceiverNameRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateSenderOrReceiverNameRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateSenderOrReceiverNameRequest
  */
  public static UpdateSenderOrReceiverNameRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSenderOrReceiverNameRequest.class);
  }

 /**
  * Convert an instance of UpdateSenderOrReceiverNameRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

