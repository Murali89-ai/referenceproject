/*
 * ucd_pmgmt_v1_api
 * Swagger documentation for UCD Profile Management Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.JSON;

/**
 * Name Model Schema. If Name fields (firstName/middleName/lastName/lastNamePaternal/lastNameMaternal/Company) are passed in the request then fullName will be ignored. fullName will only be considered if an only if no Name fields are present
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T21:22:09.739306500+05:30[Asia/Calcutta]")
public class Name2 {
  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_NAME_PREFIX = "namePrefix";
  @SerializedName(SERIALIZED_NAME_NAME_PREFIX)
  private String namePrefix;

  public static final String SERIALIZED_NAME_NAME_SUFFIX = "nameSuffix";
  @SerializedName(SERIALIZED_NAME_NAME_SUFFIX)
  private String nameSuffix;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_LAST_NAME_MATERNAL = "lastNameMaternal";
  @SerializedName(SERIALIZED_NAME_LAST_NAME_MATERNAL)
  private String lastNameMaternal;

  public static final String SERIALIZED_NAME_LAST_NAME_PATERNAL = "lastNamePaternal";
  @SerializedName(SERIALIZED_NAME_LAST_NAME_PATERNAL)
  private String lastNamePaternal;

  public static final String SERIALIZED_NAME_ATTN = "attn";
  @SerializedName(SERIALIZED_NAME_ATTN)
  private String attn;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  /**
   * Name type IDs * C - Company  * D - Domestic(US) * M - Mexican * Other - OtherNameTypeID 
   */
  @JsonAdapter(NameTypeIdEnum.Adapter.class)
  public enum NameTypeIdEnum {
    D("D"),
    
    M("M"),
    
    C("C"),
    
    OTHER("Other");

    private String value;

    NameTypeIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameTypeIdEnum fromValue(String value) {
      for (NameTypeIdEnum b : NameTypeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameTypeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameTypeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameTypeIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameTypeIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NAME_TYPE_ID = "nameTypeId";
  @SerializedName(SERIALIZED_NAME_NAME_TYPE_ID)
  private NameTypeIdEnum nameTypeId;

  public static final String SERIALIZED_NAME_REFERENCE_FOR_NAME_TYPE_ID_OTHER = "referenceForNameTypeIdOther";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FOR_NAME_TYPE_ID_OTHER)
  private String referenceForNameTypeIdOther;

  public Name2() {
  }

  public Name2 fullName(String fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Customer&#39;s Whole Name including firstName/middleName/lastName/lastNamePaternal/lastNameMaternal/Company
   * @return fullName
  **/
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public Name2 namePrefix(String namePrefix) {
    
    this.namePrefix = namePrefix;
    return this;
  }

   /**
   * Title used before a Customer&#39;s name. e.g. Mr, Miss, Mrs etc
   * @return namePrefix
  **/
  @javax.annotation.Nullable
  public String getNamePrefix() {
    return namePrefix;
  }


  public void setNamePrefix(String namePrefix) {
    this.namePrefix = namePrefix;
  }


  public Name2 nameSuffix(String nameSuffix) {
    
    this.nameSuffix = nameSuffix;
    return this;
  }

   /**
   * Additional information about a person and used at the end of a Customer&#39;s name. e.g. Junior (Jr.), Senior (Sr.), I, II, III, IV, etc
   * @return nameSuffix
  **/
  @javax.annotation.Nullable
  public String getNameSuffix() {
    return nameSuffix;
  }


  public void setNameSuffix(String nameSuffix) {
    this.nameSuffix = nameSuffix;
  }


  public Name2 firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Customer&#39;s First Name for Name Type D and M
   * @return firstName
  **/
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Name2 lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Customer&#39;s Last Name for Name Type D
   * @return lastName
  **/
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Name2 middleName(String middleName) {
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Customer&#39;s Middle Name for Name Type D
   * @return middleName
  **/
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public Name2 lastNameMaternal(String lastNameMaternal) {
    
    this.lastNameMaternal = lastNameMaternal;
    return this;
  }

   /**
   * Customer&#39;s Maternal Last Name for Name Type M
   * @return lastNameMaternal
  **/
  @javax.annotation.Nullable
  public String getLastNameMaternal() {
    return lastNameMaternal;
  }


  public void setLastNameMaternal(String lastNameMaternal) {
    this.lastNameMaternal = lastNameMaternal;
  }


  public Name2 lastNamePaternal(String lastNamePaternal) {
    
    this.lastNamePaternal = lastNamePaternal;
    return this;
  }

   /**
   * Customer&#39;s Paternal Last Name for Name Type M
   * @return lastNamePaternal
  **/
  @javax.annotation.Nullable
  public String getLastNamePaternal() {
    return lastNamePaternal;
  }


  public void setLastNamePaternal(String lastNamePaternal) {
    this.lastNamePaternal = lastNamePaternal;
  }


  public Name2 attn(String attn) {
    
    this.attn = attn;
    return this;
  }

   /**
   * Value to represent the concerned party/person in the company or organization for Name Type C
   * @return attn
  **/
  @javax.annotation.Nullable
  public String getAttn() {
    return attn;
  }


  public void setAttn(String attn) {
    this.attn = attn;
  }


  public Name2 company(String company) {
    
    this.company = company;
    return this;
  }

   /**
   * Name of the Company or Organization for Name Type C
   * @return company
  **/
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }


  public void setCompany(String company) {
    this.company = company;
  }


  public Name2 nameTypeId(NameTypeIdEnum nameTypeId) {
    
    this.nameTypeId = nameTypeId;
    return this;
  }

   /**
   * Name type IDs * C - Company  * D - Domestic(US) * M - Mexican * Other - OtherNameTypeID 
   * @return nameTypeId
  **/
  @javax.annotation.Nullable
  public NameTypeIdEnum getNameTypeId() {
    return nameTypeId;
  }


  public void setNameTypeId(NameTypeIdEnum nameTypeId) {
    this.nameTypeId = nameTypeId;
  }


  public Name2 referenceForNameTypeIdOther(String referenceForNameTypeIdOther) {
    
    this.referenceForNameTypeIdOther = referenceForNameTypeIdOther;
    return this;
  }

   /**
   * When the Name Type Other is selected, Client needs to send the reference/actual Name Type Id value in this element
   * @return referenceForNameTypeIdOther
  **/
  @javax.annotation.Nullable
  public String getReferenceForNameTypeIdOther() {
    return referenceForNameTypeIdOther;
  }


  public void setReferenceForNameTypeIdOther(String referenceForNameTypeIdOther) {
    this.referenceForNameTypeIdOther = referenceForNameTypeIdOther;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Name2 name2 = (Name2) o;
    return Objects.equals(this.fullName, name2.fullName) &&
        Objects.equals(this.namePrefix, name2.namePrefix) &&
        Objects.equals(this.nameSuffix, name2.nameSuffix) &&
        Objects.equals(this.firstName, name2.firstName) &&
        Objects.equals(this.lastName, name2.lastName) &&
        Objects.equals(this.middleName, name2.middleName) &&
        Objects.equals(this.lastNameMaternal, name2.lastNameMaternal) &&
        Objects.equals(this.lastNamePaternal, name2.lastNamePaternal) &&
        Objects.equals(this.attn, name2.attn) &&
        Objects.equals(this.company, name2.company) &&
        Objects.equals(this.nameTypeId, name2.nameTypeId) &&
        Objects.equals(this.referenceForNameTypeIdOther, name2.referenceForNameTypeIdOther);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullName, namePrefix, nameSuffix, firstName, lastName, middleName, lastNameMaternal, lastNamePaternal, attn, company, nameTypeId, referenceForNameTypeIdOther);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Name2 {\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    namePrefix: ").append(toIndentedString(namePrefix)).append("\n");
    sb.append("    nameSuffix: ").append(toIndentedString(nameSuffix)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastNameMaternal: ").append(toIndentedString(lastNameMaternal)).append("\n");
    sb.append("    lastNamePaternal: ").append(toIndentedString(lastNamePaternal)).append("\n");
    sb.append("    attn: ").append(toIndentedString(attn)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    nameTypeId: ").append(toIndentedString(nameTypeId)).append("\n");
    sb.append("    referenceForNameTypeIdOther: ").append(toIndentedString(referenceForNameTypeIdOther)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fullName");
    openapiFields.add("namePrefix");
    openapiFields.add("nameSuffix");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("middleName");
    openapiFields.add("lastNameMaternal");
    openapiFields.add("lastNamePaternal");
    openapiFields.add("attn");
    openapiFields.add("company");
    openapiFields.add("nameTypeId");
    openapiFields.add("referenceForNameTypeIdOther");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Name2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Name2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Name2 is not found in the empty JSON string", Name2.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Name2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Name2` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("namePrefix") != null && !jsonObj.get("namePrefix").isJsonNull()) && !jsonObj.get("namePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namePrefix").toString()));
      }
      if ((jsonObj.get("nameSuffix") != null && !jsonObj.get("nameSuffix").isJsonNull()) && !jsonObj.get("nameSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameSuffix").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if ((jsonObj.get("lastNameMaternal") != null && !jsonObj.get("lastNameMaternal").isJsonNull()) && !jsonObj.get("lastNameMaternal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastNameMaternal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastNameMaternal").toString()));
      }
      if ((jsonObj.get("lastNamePaternal") != null && !jsonObj.get("lastNamePaternal").isJsonNull()) && !jsonObj.get("lastNamePaternal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastNamePaternal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastNamePaternal").toString()));
      }
      if ((jsonObj.get("attn") != null && !jsonObj.get("attn").isJsonNull()) && !jsonObj.get("attn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attn").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("nameTypeId") != null && !jsonObj.get("nameTypeId").isJsonNull()) && !jsonObj.get("nameTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameTypeId").toString()));
      }
      if ((jsonObj.get("referenceForNameTypeIdOther") != null && !jsonObj.get("referenceForNameTypeIdOther").isJsonNull()) && !jsonObj.get("referenceForNameTypeIdOther").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceForNameTypeIdOther` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceForNameTypeIdOther").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Name2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Name2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Name2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Name2.class));

       return (TypeAdapter<T>) new TypeAdapter<Name2>() {
           @Override
           public void write(JsonWriter out, Name2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Name2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Name2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Name2
  * @throws IOException if the JSON string is invalid with respect to Name2
  */
  public static Name2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Name2.class);
  }

 /**
  * Convert an instance of Name2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

