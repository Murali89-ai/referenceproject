/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * This is the request model for NonKeyLookupCustomerByLimit service. This is to search for a customer by supplying non-key elements (such as PhoneNumber, Email, Name) and receive the UCD profile of the customer found.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class NonKeyLookupCustomerByLimitRequest {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Header header;

  public static final String SERIALIZED_NAME_LOOKUP_KEY = "lookupKey";
  @SerializedName(SERIALIZED_NAME_LOOKUP_KEY)
  private NonKeyLookupCustomerByLimitKey lookupKey;

  public static final String SERIALIZED_NAME_START_INDEX = "startIndex";
  @SerializedName(SERIALIZED_NAME_START_INDEX)
  private Integer startIndex;

  public static final String SERIALIZED_NAME_RETURN_SIZE = "returnSize";
  @SerializedName(SERIALIZED_NAME_RETURN_SIZE)
  private Integer returnSize;

  /**
   * Based on the flag, UCD WS will return only Active Customers or all the Customers.
   */
  @JsonAdapter(CustomerActiveFlagEnum.Adapter.class)
  public enum CustomerActiveFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    CustomerActiveFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerActiveFlagEnum fromValue(String value) {
      for (CustomerActiveFlagEnum b : CustomerActiveFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomerActiveFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerActiveFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerActiveFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomerActiveFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMER_ACTIVE_FLAG = "customerActiveFlag";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACTIVE_FLAG)
  private CustomerActiveFlagEnum customerActiveFlag = CustomerActiveFlagEnum.N;

  /**
   * If this flag is not sent then by default will look in My_WU customers. If the flag value is Y, then will look in My_WU+Non_My_WU customers. If the flag value is N then will look in only My_WU Customers.
   */
  @JsonAdapter(SendNonWuAlsoFlagEnum.Adapter.class)
  public enum SendNonWuAlsoFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendNonWuAlsoFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendNonWuAlsoFlagEnum fromValue(String value) {
      for (SendNonWuAlsoFlagEnum b : SendNonWuAlsoFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendNonWuAlsoFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendNonWuAlsoFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendNonWuAlsoFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendNonWuAlsoFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_NON_WU_ALSO_FLAG = "sendNonWuAlsoFlag";
  @SerializedName(SERIALIZED_NAME_SEND_NON_WU_ALSO_FLAG)
  private SendNonWuAlsoFlagEnum sendNonWuAlsoFlag = SendNonWuAlsoFlagEnum.Y;

  /**
   * If this flag is not sent then by default will look in Full customers. If the flag value is Y, then will look in Full + Partial customers. If the flag value is N then will look in only Full customers.
   */
  @JsonAdapter(SendPartialCustomerFlagEnum.Adapter.class)
  public enum SendPartialCustomerFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendPartialCustomerFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendPartialCustomerFlagEnum fromValue(String value) {
      for (SendPartialCustomerFlagEnum b : SendPartialCustomerFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendPartialCustomerFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendPartialCustomerFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendPartialCustomerFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendPartialCustomerFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_PARTIAL_CUSTOMER_FLAG = "sendPartialCustomerFlag";
  @SerializedName(SERIALIZED_NAME_SEND_PARTIAL_CUSTOMER_FLAG)
  private SendPartialCustomerFlagEnum sendPartialCustomerFlag = SendPartialCustomerFlagEnum.N;

  /**
   * This flag would indicate that the search should include Convenience or not.    If this flag is not sent then by default the search will be for Customers only.    If the flag value is Y, then the search will be for both Convenience and Customers.    If the flag value is N then the search will be for Customers only.
   */
  @JsonAdapter(IncludeConvenienceFlagEnum.Adapter.class)
  public enum IncludeConvenienceFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    IncludeConvenienceFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncludeConvenienceFlagEnum fromValue(String value) {
      for (IncludeConvenienceFlagEnum b : IncludeConvenienceFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncludeConvenienceFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncludeConvenienceFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncludeConvenienceFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncludeConvenienceFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INCLUDE_CONVENIENCE_FLAG = "includeConvenienceFlag";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CONVENIENCE_FLAG)
  private IncludeConvenienceFlagEnum includeConvenienceFlag = IncludeConvenienceFlagEnum.N;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform = "W";

  /**
   * Customer(s) with LevelCode - XXC, WU6, WU7 will not be returned in response by default. Customer(s) with LevelCode - XXC, WU6, WU7 will only be returned if this field is send as Y in the request.
   */
  @JsonAdapter(SendAllPfcEnum.Adapter.class)
  public enum SendAllPfcEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendAllPfcEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendAllPfcEnum fromValue(String value) {
      for (SendAllPfcEnum b : SendAllPfcEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendAllPfcEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendAllPfcEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendAllPfcEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendAllPfcEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_ALL_PFC = "sendAllPfc";
  @SerializedName(SERIALIZED_NAME_SEND_ALL_PFC)
  private SendAllPfcEnum sendAllPfc = SendAllPfcEnum.N;

  /**
   * Flag which indicates to/not to convert the Special Characters to ASCII for Sender &amp; Receiver details (Name, Address, Address in UAB). For Loyalty, this flag will be defaulted to Y. * If not passed in the request, as is values will be returned in response by default. * If passed as N in the request, as is values will be returned in response. * If passed as Y in the request, the Special Characters will be converted to ASCII and will be returned in response. 
   */
  @JsonAdapter(EnableTransliterationFlagEnum.Adapter.class)
  public enum EnableTransliterationFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EnableTransliterationFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnableTransliterationFlagEnum fromValue(String value) {
      for (EnableTransliterationFlagEnum b : EnableTransliterationFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnableTransliterationFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnableTransliterationFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnableTransliterationFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnableTransliterationFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENABLE_TRANSLITERATION_FLAG = "enableTransliterationFlag";
  @SerializedName(SERIALIZED_NAME_ENABLE_TRANSLITERATION_FLAG)
  private EnableTransliterationFlagEnum enableTransliterationFlag = EnableTransliterationFlagEnum.N;

  /**
   * It is optional field in Customer Lookup depending upon which KYC details will be returned in Customer Lookup Response. If not passed in request, by default KYC details will be returned irrespective of the KycTypeId. If passed in request, KYC details will be returned for the KycTypeId passsed in the request. Possible KycTypeId Values 1 ALTERNATE ID 2 SSN 3 Drivers License 4 Matricular Consular Number 5 Passport 6 Visa 7 Green Card 8 Brazilian Tax ID 9 Tax ID 99 KYCTypeIDOther
   */
  @JsonAdapter(KycTypeIdEnum.Adapter.class)
  public enum KycTypeIdEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_99(99);

    private Integer value;

    KycTypeIdEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KycTypeIdEnum fromValue(Integer value) {
      for (KycTypeIdEnum b : KycTypeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KycTypeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KycTypeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KycTypeIdEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return KycTypeIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_KYC_TYPE_ID = "kycTypeId";
  @SerializedName(SERIALIZED_NAME_KYC_TYPE_ID)
  private KycTypeIdEnum kycTypeId;

  /**
   * If available, PhoneVvStatus - N / L / M / P will be returned in response by default. PhoneVvStatus - Z / T / R / S / V / A / B / U / C / D will only be returned if this field is send as Y in the request.
   */
  @JsonAdapter(SendAllPhoneVvStatusEnum.Adapter.class)
  public enum SendAllPhoneVvStatusEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendAllPhoneVvStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendAllPhoneVvStatusEnum fromValue(String value) {
      for (SendAllPhoneVvStatusEnum b : SendAllPhoneVvStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendAllPhoneVvStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendAllPhoneVvStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendAllPhoneVvStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendAllPhoneVvStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_ALL_PHONE_VV_STATUS = "sendAllPhoneVvStatus";
  @SerializedName(SERIALIZED_NAME_SEND_ALL_PHONE_VV_STATUS)
  private SendAllPhoneVvStatusEnum sendAllPhoneVvStatus = SendAllPhoneVvStatusEnum.N;

  /**
   * This flag would indicate to include complete customer details or not (if a single match is found).   * If this flag value is N or not sent, then it will return limited details of the Customer.   * If the flag value is &#39;Y&#39;, then web service will return all the details of the Customer if a single match is found else will return limited details of the Customers. 
   */
  @JsonAdapter(SendAllCustomerDetailsEnum.Adapter.class)
  public enum SendAllCustomerDetailsEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendAllCustomerDetailsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendAllCustomerDetailsEnum fromValue(String value) {
      for (SendAllCustomerDetailsEnum b : SendAllCustomerDetailsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendAllCustomerDetailsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendAllCustomerDetailsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendAllCustomerDetailsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendAllCustomerDetailsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_ALL_CUSTOMER_DETAILS = "sendAllCustomerDetails";
  @SerializedName(SERIALIZED_NAME_SEND_ALL_CUSTOMER_DETAILS)
  private SendAllCustomerDetailsEnum sendAllCustomerDetails = SendAllCustomerDetailsEnum.N;

  /**
   * Flag which indicates to search across All profiles or only Primary UMN profile. * If not passed in the request, all the profiles will be returned in response by default. * If passed as N in the request, all the profiles will be returned in response. * If passed as Y in the request, then   * Only the Primary UMN profile will be returned in response.   * platform will get defaulted to A   * noOfYearsInSearch passed in the request will get ignored 
   */
  @JsonAdapter(EnableCrossChannelFlagEnum.Adapter.class)
  public enum EnableCrossChannelFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EnableCrossChannelFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnableCrossChannelFlagEnum fromValue(String value) {
      for (EnableCrossChannelFlagEnum b : EnableCrossChannelFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnableCrossChannelFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnableCrossChannelFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnableCrossChannelFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnableCrossChannelFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENABLE_CROSS_CHANNEL_FLAG = "enableCrossChannelFlag";
  @SerializedName(SERIALIZED_NAME_ENABLE_CROSS_CHANNEL_FLAG)
  private EnableCrossChannelFlagEnum enableCrossChannelFlag = EnableCrossChannelFlagEnum.N;

  /**
   * This flag would indicate to include consolidated funding sources from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return funding sources from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated funding sources from both primary &amp; scondary profiles. 
   */
  @JsonAdapter(SendConsolidatedFundingSourcesEnum.Adapter.class)
  public enum SendConsolidatedFundingSourcesEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendConsolidatedFundingSourcesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendConsolidatedFundingSourcesEnum fromValue(String value) {
      for (SendConsolidatedFundingSourcesEnum b : SendConsolidatedFundingSourcesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendConsolidatedFundingSourcesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendConsolidatedFundingSourcesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendConsolidatedFundingSourcesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendConsolidatedFundingSourcesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_CONSOLIDATED_FUNDING_SOURCES = "sendConsolidatedFundingSources";
  @SerializedName(SERIALIZED_NAME_SEND_CONSOLIDATED_FUNDING_SOURCES)
  private SendConsolidatedFundingSourcesEnum sendConsolidatedFundingSources = SendConsolidatedFundingSourcesEnum.N;

  /**
   * This flag would indicate to include consolidated receviers from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return receviers from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated receivers from both primary &amp; scondary profiles. 
   */
  @JsonAdapter(SendConsolidatedReceiversEnum.Adapter.class)
  public enum SendConsolidatedReceiversEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendConsolidatedReceiversEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendConsolidatedReceiversEnum fromValue(String value) {
      for (SendConsolidatedReceiversEnum b : SendConsolidatedReceiversEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendConsolidatedReceiversEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendConsolidatedReceiversEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendConsolidatedReceiversEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendConsolidatedReceiversEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_CONSOLIDATED_RECEIVERS = "sendConsolidatedReceivers";
  @SerializedName(SERIALIZED_NAME_SEND_CONSOLIDATED_RECEIVERS)
  private SendConsolidatedReceiversEnum sendConsolidatedReceivers = SendConsolidatedReceiversEnum.N;

  public static final String SERIALIZED_NAME_SEND_CUST_HAVING_ACCOUNT_FLAG = "sendCustHavingAccountFlag";
  @SerializedName(SERIALIZED_NAME_SEND_CUST_HAVING_ACCOUNT_FLAG)
  private List<Integer> sendCustHavingAccountFlag;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO2 = "countryCodeIso2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO2)
  private String countryCodeIso2;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO3 = "countryCodeIso3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO3)
  private String countryCodeIso3;

  public static final String SERIALIZED_NAME_REQUEST_INITIATED_BY = "requestInitiatedBy";
  @SerializedName(SERIALIZED_NAME_REQUEST_INITIATED_BY)
  private String requestInitiatedBy;

  public NonKeyLookupCustomerByLimitRequest() {
  }

  public NonKeyLookupCustomerByLimitRequest header(Header header) {
    
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nonnull
  public Header getHeader() {
    return header;
  }


  public void setHeader(Header header) {
    this.header = header;
  }


  public NonKeyLookupCustomerByLimitRequest lookupKey(NonKeyLookupCustomerByLimitKey lookupKey) {
    
    this.lookupKey = lookupKey;
    return this;
  }

   /**
   * Get lookupKey
   * @return lookupKey
  **/
  @javax.annotation.Nonnull
  public NonKeyLookupCustomerByLimitKey getLookupKey() {
    return lookupKey;
  }


  public void setLookupKey(NonKeyLookupCustomerByLimitKey lookupKey) {
    this.lookupKey = lookupKey;
  }


  public NonKeyLookupCustomerByLimitRequest startIndex(Integer startIndex) {
    
    this.startIndex = startIndex;
    return this;
  }

   /**
   * If StartIndex field is 0 or given value for this element is not available then web service will return customer&#39;s from Customer Sequence No #1 to number of receivers specified in returnSize field.
   * @return startIndex
  **/
  @javax.annotation.Nonnull
  public Integer getStartIndex() {
    return startIndex;
  }


  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }


  public NonKeyLookupCustomerByLimitRequest returnSize(Integer returnSize) {
    
    this.returnSize = returnSize;
    return this;
  }

   /**
   * If StartIndex field is &#39;X&#39; (greater than 0) then UCD will return customer&#39;s from Customer Sequence No #&#39;X+1&#39; to number of Customer&#39;s specified in ReturnSize field.
   * @return returnSize
  **/
  @javax.annotation.Nonnull
  public Integer getReturnSize() {
    return returnSize;
  }


  public void setReturnSize(Integer returnSize) {
    this.returnSize = returnSize;
  }


  public NonKeyLookupCustomerByLimitRequest customerActiveFlag(CustomerActiveFlagEnum customerActiveFlag) {
    
    this.customerActiveFlag = customerActiveFlag;
    return this;
  }

   /**
   * Based on the flag, UCD WS will return only Active Customers or all the Customers.
   * @return customerActiveFlag
  **/
  @javax.annotation.Nonnull
  public CustomerActiveFlagEnum getCustomerActiveFlag() {
    return customerActiveFlag;
  }


  public void setCustomerActiveFlag(CustomerActiveFlagEnum customerActiveFlag) {
    this.customerActiveFlag = customerActiveFlag;
  }


  public NonKeyLookupCustomerByLimitRequest sendNonWuAlsoFlag(SendNonWuAlsoFlagEnum sendNonWuAlsoFlag) {
    
    this.sendNonWuAlsoFlag = sendNonWuAlsoFlag;
    return this;
  }

   /**
   * If this flag is not sent then by default will look in My_WU customers. If the flag value is Y, then will look in My_WU+Non_My_WU customers. If the flag value is N then will look in only My_WU Customers.
   * @return sendNonWuAlsoFlag
  **/
  @javax.annotation.Nullable
  public SendNonWuAlsoFlagEnum getSendNonWuAlsoFlag() {
    return sendNonWuAlsoFlag;
  }


  public void setSendNonWuAlsoFlag(SendNonWuAlsoFlagEnum sendNonWuAlsoFlag) {
    this.sendNonWuAlsoFlag = sendNonWuAlsoFlag;
  }


  public NonKeyLookupCustomerByLimitRequest sendPartialCustomerFlag(SendPartialCustomerFlagEnum sendPartialCustomerFlag) {
    
    this.sendPartialCustomerFlag = sendPartialCustomerFlag;
    return this;
  }

   /**
   * If this flag is not sent then by default will look in Full customers. If the flag value is Y, then will look in Full + Partial customers. If the flag value is N then will look in only Full customers.
   * @return sendPartialCustomerFlag
  **/
  @javax.annotation.Nullable
  public SendPartialCustomerFlagEnum getSendPartialCustomerFlag() {
    return sendPartialCustomerFlag;
  }


  public void setSendPartialCustomerFlag(SendPartialCustomerFlagEnum sendPartialCustomerFlag) {
    this.sendPartialCustomerFlag = sendPartialCustomerFlag;
  }


  public NonKeyLookupCustomerByLimitRequest includeConvenienceFlag(IncludeConvenienceFlagEnum includeConvenienceFlag) {
    
    this.includeConvenienceFlag = includeConvenienceFlag;
    return this;
  }

   /**
   * This flag would indicate that the search should include Convenience or not.    If this flag is not sent then by default the search will be for Customers only.    If the flag value is Y, then the search will be for both Convenience and Customers.    If the flag value is N then the search will be for Customers only.
   * @return includeConvenienceFlag
  **/
  @javax.annotation.Nullable
  public IncludeConvenienceFlagEnum getIncludeConvenienceFlag() {
    return includeConvenienceFlag;
  }


  public void setIncludeConvenienceFlag(IncludeConvenienceFlagEnum includeConvenienceFlag) {
    this.includeConvenienceFlag = includeConvenienceFlag;
  }


  public NonKeyLookupCustomerByLimitRequest platform(String platform) {
    
    this.platform = platform;
    return this;
  }

   /**
   * Added as part of OVI/VIGO changes, where this flag is responsible for filtering out the OVI/VIGO customer based on the flag passed in the request. For Phoenix, this flag will be defaulted to A. * If the flag value is \&quot;A\&quot;, lookup details irrespective of platform will be returned. * If the flag value is \&quot;O\&quot;, lookup details who are part of OVI platform will be returned. * If the flag value is \&quot;V\&quot;, lookup details who are part of VIGO platform will be returned. * The default value is \&quot;W\&quot; and lookup details who are WU customers needs to be returned, but not OVI/VIGO. 
   * @return platform
  **/
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }


  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public NonKeyLookupCustomerByLimitRequest sendAllPfc(SendAllPfcEnum sendAllPfc) {
    
    this.sendAllPfc = sendAllPfc;
    return this;
  }

   /**
   * Customer(s) with LevelCode - XXC, WU6, WU7 will not be returned in response by default. Customer(s) with LevelCode - XXC, WU6, WU7 will only be returned if this field is send as Y in the request.
   * @return sendAllPfc
  **/
  @javax.annotation.Nullable
  public SendAllPfcEnum getSendAllPfc() {
    return sendAllPfc;
  }


  public void setSendAllPfc(SendAllPfcEnum sendAllPfc) {
    this.sendAllPfc = sendAllPfc;
  }


  public NonKeyLookupCustomerByLimitRequest enableTransliterationFlag(EnableTransliterationFlagEnum enableTransliterationFlag) {
    
    this.enableTransliterationFlag = enableTransliterationFlag;
    return this;
  }

   /**
   * Flag which indicates to/not to convert the Special Characters to ASCII for Sender &amp; Receiver details (Name, Address, Address in UAB). For Loyalty, this flag will be defaulted to Y. * If not passed in the request, as is values will be returned in response by default. * If passed as N in the request, as is values will be returned in response. * If passed as Y in the request, the Special Characters will be converted to ASCII and will be returned in response. 
   * @return enableTransliterationFlag
  **/
  @javax.annotation.Nullable
  public EnableTransliterationFlagEnum getEnableTransliterationFlag() {
    return enableTransliterationFlag;
  }


  public void setEnableTransliterationFlag(EnableTransliterationFlagEnum enableTransliterationFlag) {
    this.enableTransliterationFlag = enableTransliterationFlag;
  }


  public NonKeyLookupCustomerByLimitRequest kycTypeId(KycTypeIdEnum kycTypeId) {
    
    this.kycTypeId = kycTypeId;
    return this;
  }

   /**
   * It is optional field in Customer Lookup depending upon which KYC details will be returned in Customer Lookup Response. If not passed in request, by default KYC details will be returned irrespective of the KycTypeId. If passed in request, KYC details will be returned for the KycTypeId passsed in the request. Possible KycTypeId Values 1 ALTERNATE ID 2 SSN 3 Drivers License 4 Matricular Consular Number 5 Passport 6 Visa 7 Green Card 8 Brazilian Tax ID 9 Tax ID 99 KYCTypeIDOther
   * @return kycTypeId
  **/
  @javax.annotation.Nullable
  public KycTypeIdEnum getKycTypeId() {
    return kycTypeId;
  }


  public void setKycTypeId(KycTypeIdEnum kycTypeId) {
    this.kycTypeId = kycTypeId;
  }


  public NonKeyLookupCustomerByLimitRequest sendAllPhoneVvStatus(SendAllPhoneVvStatusEnum sendAllPhoneVvStatus) {
    
    this.sendAllPhoneVvStatus = sendAllPhoneVvStatus;
    return this;
  }

   /**
   * If available, PhoneVvStatus - N / L / M / P will be returned in response by default. PhoneVvStatus - Z / T / R / S / V / A / B / U / C / D will only be returned if this field is send as Y in the request.
   * @return sendAllPhoneVvStatus
  **/
  @javax.annotation.Nullable
  public SendAllPhoneVvStatusEnum getSendAllPhoneVvStatus() {
    return sendAllPhoneVvStatus;
  }


  public void setSendAllPhoneVvStatus(SendAllPhoneVvStatusEnum sendAllPhoneVvStatus) {
    this.sendAllPhoneVvStatus = sendAllPhoneVvStatus;
  }


  public NonKeyLookupCustomerByLimitRequest sendAllCustomerDetails(SendAllCustomerDetailsEnum sendAllCustomerDetails) {
    
    this.sendAllCustomerDetails = sendAllCustomerDetails;
    return this;
  }

   /**
   * This flag would indicate to include complete customer details or not (if a single match is found).   * If this flag value is N or not sent, then it will return limited details of the Customer.   * If the flag value is &#39;Y&#39;, then web service will return all the details of the Customer if a single match is found else will return limited details of the Customers. 
   * @return sendAllCustomerDetails
  **/
  @javax.annotation.Nullable
  public SendAllCustomerDetailsEnum getSendAllCustomerDetails() {
    return sendAllCustomerDetails;
  }


  public void setSendAllCustomerDetails(SendAllCustomerDetailsEnum sendAllCustomerDetails) {
    this.sendAllCustomerDetails = sendAllCustomerDetails;
  }


  public NonKeyLookupCustomerByLimitRequest enableCrossChannelFlag(EnableCrossChannelFlagEnum enableCrossChannelFlag) {
    
    this.enableCrossChannelFlag = enableCrossChannelFlag;
    return this;
  }

   /**
   * Flag which indicates to search across All profiles or only Primary UMN profile. * If not passed in the request, all the profiles will be returned in response by default. * If passed as N in the request, all the profiles will be returned in response. * If passed as Y in the request, then   * Only the Primary UMN profile will be returned in response.   * platform will get defaulted to A   * noOfYearsInSearch passed in the request will get ignored 
   * @return enableCrossChannelFlag
  **/
  @javax.annotation.Nullable
  public EnableCrossChannelFlagEnum getEnableCrossChannelFlag() {
    return enableCrossChannelFlag;
  }


  public void setEnableCrossChannelFlag(EnableCrossChannelFlagEnum enableCrossChannelFlag) {
    this.enableCrossChannelFlag = enableCrossChannelFlag;
  }


  public NonKeyLookupCustomerByLimitRequest sendConsolidatedFundingSources(SendConsolidatedFundingSourcesEnum sendConsolidatedFundingSources) {
    
    this.sendConsolidatedFundingSources = sendConsolidatedFundingSources;
    return this;
  }

   /**
   * This flag would indicate to include consolidated funding sources from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return funding sources from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated funding sources from both primary &amp; scondary profiles. 
   * @return sendConsolidatedFundingSources
  **/
  @javax.annotation.Nullable
  public SendConsolidatedFundingSourcesEnum getSendConsolidatedFundingSources() {
    return sendConsolidatedFundingSources;
  }


  public void setSendConsolidatedFundingSources(SendConsolidatedFundingSourcesEnum sendConsolidatedFundingSources) {
    this.sendConsolidatedFundingSources = sendConsolidatedFundingSources;
  }


  public NonKeyLookupCustomerByLimitRequest sendConsolidatedReceivers(SendConsolidatedReceiversEnum sendConsolidatedReceivers) {
    
    this.sendConsolidatedReceivers = sendConsolidatedReceivers;
    return this;
  }

   /**
   * This flag would indicate to include consolidated receviers from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return receviers from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated receivers from both primary &amp; scondary profiles. 
   * @return sendConsolidatedReceivers
  **/
  @javax.annotation.Nullable
  public SendConsolidatedReceiversEnum getSendConsolidatedReceivers() {
    return sendConsolidatedReceivers;
  }


  public void setSendConsolidatedReceivers(SendConsolidatedReceiversEnum sendConsolidatedReceivers) {
    this.sendConsolidatedReceivers = sendConsolidatedReceivers;
  }


  public NonKeyLookupCustomerByLimitRequest sendCustHavingAccountFlag(List<Integer> sendCustHavingAccountFlag) {
    
    this.sendCustHavingAccountFlag = sendCustHavingAccountFlag;
    return this;
  }

  public NonKeyLookupCustomerByLimitRequest addSendCustHavingAccountFlagItem(Integer sendCustHavingAccountFlagItem) {
    if (this.sendCustHavingAccountFlag == null) {
      this.sendCustHavingAccountFlag = new ArrayList<>();
    }
    this.sendCustHavingAccountFlag.add(sendCustHavingAccountFlagItem);
    return this;
  }

   /**
   * This flag would indicate to return only those customers having the account type id&#39;s passed in this field. 
   * @return sendCustHavingAccountFlag
  **/
  @javax.annotation.Nullable
  public List<Integer> getSendCustHavingAccountFlag() {
    return sendCustHavingAccountFlag;
  }


  public void setSendCustHavingAccountFlag(List<Integer> sendCustHavingAccountFlag) {
    this.sendCustHavingAccountFlag = sendCustHavingAccountFlag;
  }


  public NonKeyLookupCustomerByLimitRequest countryCodeIso2(String countryCodeIso2) {
    
    this.countryCodeIso2 = countryCodeIso2;
    return this;
  }

   /**
   * Country code in ISO2 format. e.g. AT, IN, US etc. If countryCodeIso1 is passed and if the country is SCV enbaled, then   * enableCrossChannelFlag will get defaulted to Y   * platform will get defaulted to A\\   * noOfYearsInSearch passed in the request will get ignored 
   * @return countryCodeIso2
  **/
  @javax.annotation.Nullable
  public String getCountryCodeIso2() {
    return countryCodeIso2;
  }


  public void setCountryCodeIso2(String countryCodeIso2) {
    this.countryCodeIso2 = countryCodeIso2;
  }


  public NonKeyLookupCustomerByLimitRequest countryCodeIso3(String countryCodeIso3) {
    
    this.countryCodeIso3 = countryCodeIso3;
    return this;
  }

   /**
   * Country code in ISO3 format. e.g. AUT, IND, USA etc. If countryCodeIso1 is passed and if the country is SCV enbaled, then   * enableCrossChannelFlag will get defaulted to Y   * platform will get defaulted to A\\   * noOfYearsInSearch passed in the request will get ignored 
   * @return countryCodeIso3
  **/
  @javax.annotation.Nullable
  public String getCountryCodeIso3() {
    return countryCodeIso3;
  }


  public void setCountryCodeIso3(String countryCodeIso3) {
    this.countryCodeIso3 = countryCodeIso3;
  }


  public NonKeyLookupCustomerByLimitRequest requestInitiatedBy(String requestInitiatedBy) {
    
    this.requestInitiatedBy = requestInitiatedBy;
    return this;
  }

   /**
   * To identify who has initiated the request.
   * @return requestInitiatedBy
  **/
  @javax.annotation.Nonnull
  public String getRequestInitiatedBy() {
    return requestInitiatedBy;
  }


  public void setRequestInitiatedBy(String requestInitiatedBy) {
    this.requestInitiatedBy = requestInitiatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NonKeyLookupCustomerByLimitRequest nonKeyLookupCustomerByLimitRequest = (NonKeyLookupCustomerByLimitRequest) o;
    return Objects.equals(this.header, nonKeyLookupCustomerByLimitRequest.header) &&
        Objects.equals(this.lookupKey, nonKeyLookupCustomerByLimitRequest.lookupKey) &&
        Objects.equals(this.startIndex, nonKeyLookupCustomerByLimitRequest.startIndex) &&
        Objects.equals(this.returnSize, nonKeyLookupCustomerByLimitRequest.returnSize) &&
        Objects.equals(this.customerActiveFlag, nonKeyLookupCustomerByLimitRequest.customerActiveFlag) &&
        Objects.equals(this.sendNonWuAlsoFlag, nonKeyLookupCustomerByLimitRequest.sendNonWuAlsoFlag) &&
        Objects.equals(this.sendPartialCustomerFlag, nonKeyLookupCustomerByLimitRequest.sendPartialCustomerFlag) &&
        Objects.equals(this.includeConvenienceFlag, nonKeyLookupCustomerByLimitRequest.includeConvenienceFlag) &&
        Objects.equals(this.platform, nonKeyLookupCustomerByLimitRequest.platform) &&
        Objects.equals(this.sendAllPfc, nonKeyLookupCustomerByLimitRequest.sendAllPfc) &&
        Objects.equals(this.enableTransliterationFlag, nonKeyLookupCustomerByLimitRequest.enableTransliterationFlag) &&
        Objects.equals(this.kycTypeId, nonKeyLookupCustomerByLimitRequest.kycTypeId) &&
        Objects.equals(this.sendAllPhoneVvStatus, nonKeyLookupCustomerByLimitRequest.sendAllPhoneVvStatus) &&
        Objects.equals(this.sendAllCustomerDetails, nonKeyLookupCustomerByLimitRequest.sendAllCustomerDetails) &&
        Objects.equals(this.enableCrossChannelFlag, nonKeyLookupCustomerByLimitRequest.enableCrossChannelFlag) &&
        Objects.equals(this.sendConsolidatedFundingSources, nonKeyLookupCustomerByLimitRequest.sendConsolidatedFundingSources) &&
        Objects.equals(this.sendConsolidatedReceivers, nonKeyLookupCustomerByLimitRequest.sendConsolidatedReceivers) &&
        Objects.equals(this.sendCustHavingAccountFlag, nonKeyLookupCustomerByLimitRequest.sendCustHavingAccountFlag) &&
        Objects.equals(this.countryCodeIso2, nonKeyLookupCustomerByLimitRequest.countryCodeIso2) &&
        Objects.equals(this.countryCodeIso3, nonKeyLookupCustomerByLimitRequest.countryCodeIso3) &&
        Objects.equals(this.requestInitiatedBy, nonKeyLookupCustomerByLimitRequest.requestInitiatedBy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, lookupKey, startIndex, returnSize, customerActiveFlag, sendNonWuAlsoFlag, sendPartialCustomerFlag, includeConvenienceFlag, platform, sendAllPfc, enableTransliterationFlag, kycTypeId, sendAllPhoneVvStatus, sendAllCustomerDetails, enableCrossChannelFlag, sendConsolidatedFundingSources, sendConsolidatedReceivers, sendCustHavingAccountFlag, countryCodeIso2, countryCodeIso3, requestInitiatedBy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NonKeyLookupCustomerByLimitRequest {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    lookupKey: ").append(toIndentedString(lookupKey)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("    returnSize: ").append(toIndentedString(returnSize)).append("\n");
    sb.append("    customerActiveFlag: ").append(toIndentedString(customerActiveFlag)).append("\n");
    sb.append("    sendNonWuAlsoFlag: ").append(toIndentedString(sendNonWuAlsoFlag)).append("\n");
    sb.append("    sendPartialCustomerFlag: ").append(toIndentedString(sendPartialCustomerFlag)).append("\n");
    sb.append("    includeConvenienceFlag: ").append(toIndentedString(includeConvenienceFlag)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    sendAllPfc: ").append(toIndentedString(sendAllPfc)).append("\n");
    sb.append("    enableTransliterationFlag: ").append(toIndentedString(enableTransliterationFlag)).append("\n");
    sb.append("    kycTypeId: ").append(toIndentedString(kycTypeId)).append("\n");
    sb.append("    sendAllPhoneVvStatus: ").append(toIndentedString(sendAllPhoneVvStatus)).append("\n");
    sb.append("    sendAllCustomerDetails: ").append(toIndentedString(sendAllCustomerDetails)).append("\n");
    sb.append("    enableCrossChannelFlag: ").append(toIndentedString(enableCrossChannelFlag)).append("\n");
    sb.append("    sendConsolidatedFundingSources: ").append(toIndentedString(sendConsolidatedFundingSources)).append("\n");
    sb.append("    sendConsolidatedReceivers: ").append(toIndentedString(sendConsolidatedReceivers)).append("\n");
    sb.append("    sendCustHavingAccountFlag: ").append(toIndentedString(sendCustHavingAccountFlag)).append("\n");
    sb.append("    countryCodeIso2: ").append(toIndentedString(countryCodeIso2)).append("\n");
    sb.append("    countryCodeIso3: ").append(toIndentedString(countryCodeIso3)).append("\n");
    sb.append("    requestInitiatedBy: ").append(toIndentedString(requestInitiatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("lookupKey");
    openapiFields.add("startIndex");
    openapiFields.add("returnSize");
    openapiFields.add("customerActiveFlag");
    openapiFields.add("sendNonWuAlsoFlag");
    openapiFields.add("sendPartialCustomerFlag");
    openapiFields.add("includeConvenienceFlag");
    openapiFields.add("platform");
    openapiFields.add("sendAllPfc");
    openapiFields.add("enableTransliterationFlag");
    openapiFields.add("kycTypeId");
    openapiFields.add("sendAllPhoneVvStatus");
    openapiFields.add("sendAllCustomerDetails");
    openapiFields.add("enableCrossChannelFlag");
    openapiFields.add("sendConsolidatedFundingSources");
    openapiFields.add("sendConsolidatedReceivers");
    openapiFields.add("sendCustHavingAccountFlag");
    openapiFields.add("countryCodeIso2");
    openapiFields.add("countryCodeIso3");
    openapiFields.add("requestInitiatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("header");
    openapiRequiredFields.add("lookupKey");
    openapiRequiredFields.add("startIndex");
    openapiRequiredFields.add("returnSize");
    openapiRequiredFields.add("customerActiveFlag");
    openapiRequiredFields.add("requestInitiatedBy");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NonKeyLookupCustomerByLimitRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NonKeyLookupCustomerByLimitRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NonKeyLookupCustomerByLimitRequest is not found in the empty JSON string", NonKeyLookupCustomerByLimitRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NonKeyLookupCustomerByLimitRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NonKeyLookupCustomerByLimitRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NonKeyLookupCustomerByLimitRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `header`
      Header.validateJsonObject(jsonObj.getAsJsonObject("header"));
      // validate the required field `lookupKey`
      NonKeyLookupCustomerByLimitKey.validateJsonObject(jsonObj.getAsJsonObject("lookupKey"));
      if (!jsonObj.get("customerActiveFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerActiveFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerActiveFlag").toString()));
      }
      if ((jsonObj.get("sendNonWuAlsoFlag") != null && !jsonObj.get("sendNonWuAlsoFlag").isJsonNull()) && !jsonObj.get("sendNonWuAlsoFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendNonWuAlsoFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendNonWuAlsoFlag").toString()));
      }
      if ((jsonObj.get("sendPartialCustomerFlag") != null && !jsonObj.get("sendPartialCustomerFlag").isJsonNull()) && !jsonObj.get("sendPartialCustomerFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendPartialCustomerFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendPartialCustomerFlag").toString()));
      }
      if ((jsonObj.get("includeConvenienceFlag") != null && !jsonObj.get("includeConvenienceFlag").isJsonNull()) && !jsonObj.get("includeConvenienceFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeConvenienceFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("includeConvenienceFlag").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("sendAllPfc") != null && !jsonObj.get("sendAllPfc").isJsonNull()) && !jsonObj.get("sendAllPfc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendAllPfc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendAllPfc").toString()));
      }
      if ((jsonObj.get("enableTransliterationFlag") != null && !jsonObj.get("enableTransliterationFlag").isJsonNull()) && !jsonObj.get("enableTransliterationFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableTransliterationFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enableTransliterationFlag").toString()));
      }
      if ((jsonObj.get("sendAllPhoneVvStatus") != null && !jsonObj.get("sendAllPhoneVvStatus").isJsonNull()) && !jsonObj.get("sendAllPhoneVvStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendAllPhoneVvStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendAllPhoneVvStatus").toString()));
      }
      if ((jsonObj.get("sendAllCustomerDetails") != null && !jsonObj.get("sendAllCustomerDetails").isJsonNull()) && !jsonObj.get("sendAllCustomerDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendAllCustomerDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendAllCustomerDetails").toString()));
      }
      if ((jsonObj.get("enableCrossChannelFlag") != null && !jsonObj.get("enableCrossChannelFlag").isJsonNull()) && !jsonObj.get("enableCrossChannelFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableCrossChannelFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enableCrossChannelFlag").toString()));
      }
      if ((jsonObj.get("sendConsolidatedFundingSources") != null && !jsonObj.get("sendConsolidatedFundingSources").isJsonNull()) && !jsonObj.get("sendConsolidatedFundingSources").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendConsolidatedFundingSources` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendConsolidatedFundingSources").toString()));
      }
      if ((jsonObj.get("sendConsolidatedReceivers") != null && !jsonObj.get("sendConsolidatedReceivers").isJsonNull()) && !jsonObj.get("sendConsolidatedReceivers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendConsolidatedReceivers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendConsolidatedReceivers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sendCustHavingAccountFlag") != null && !jsonObj.get("sendCustHavingAccountFlag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendCustHavingAccountFlag` to be an array in the JSON string but got `%s`", jsonObj.get("sendCustHavingAccountFlag").toString()));
      }
      if ((jsonObj.get("countryCodeIso2") != null && !jsonObj.get("countryCodeIso2").isJsonNull()) && !jsonObj.get("countryCodeIso2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCodeIso2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCodeIso2").toString()));
      }
      if ((jsonObj.get("countryCodeIso3") != null && !jsonObj.get("countryCodeIso3").isJsonNull()) && !jsonObj.get("countryCodeIso3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCodeIso3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCodeIso3").toString()));
      }
      if (!jsonObj.get("requestInitiatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestInitiatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestInitiatedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NonKeyLookupCustomerByLimitRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NonKeyLookupCustomerByLimitRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NonKeyLookupCustomerByLimitRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NonKeyLookupCustomerByLimitRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<NonKeyLookupCustomerByLimitRequest>() {
           @Override
           public void write(JsonWriter out, NonKeyLookupCustomerByLimitRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NonKeyLookupCustomerByLimitRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NonKeyLookupCustomerByLimitRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NonKeyLookupCustomerByLimitRequest
  * @throws IOException if the JSON string is invalid with respect to NonKeyLookupCustomerByLimitRequest
  */
  public static NonKeyLookupCustomerByLimitRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NonKeyLookupCustomerByLimitRequest.class);
  }

 /**
  * Convert an instance of NonKeyLookupCustomerByLimitRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

