/*
 * ucd_cregn_v1_api
 * Swagger documentation for UCD Customer Registration Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerregistration;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.JSON;

/**
 * CustomerServiceProvider
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:58:59.701576900+05:30[Asia/Calcutta]")
public class CustomerServiceProvider {
  public static final String SERIALIZED_NAME_PC_ID = "pcId";
  @SerializedName(SERIALIZED_NAME_PC_ID)
  private String pcId;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private String providerId;

  public static final String SERIALIZED_NAME_ACTIVE_FLAG = "activeFlag";
  @SerializedName(SERIALIZED_NAME_ACTIVE_FLAG)
  private String activeFlag;

  public static final String SERIALIZED_NAME_PARTNER_REF_ID = "partnerRefId";
  @SerializedName(SERIALIZED_NAME_PARTNER_REF_ID)
  private String partnerRefId;

  public static final String SERIALIZED_NAME_PARTNER_ACCOUNT_STATUS = "partnerAccountStatus";
  @SerializedName(SERIALIZED_NAME_PARTNER_ACCOUNT_STATUS)
  private String partnerAccountStatus;

  public static final String SERIALIZED_NAME_DND_COUNTER = "dndCounter";
  @SerializedName(SERIALIZED_NAME_DND_COUNTER)
  private Integer dndCounter;

  public static final String SERIALIZED_NAME_DND_UPDATED_DATE = "dndUpdatedDate";
  @SerializedName(SERIALIZED_NAME_DND_UPDATED_DATE)
  private OffsetDateTime dndUpdatedDate;

  public static final String SERIALIZED_NAME_CI_CONSENT_STATUS = "ciConsentStatus";
  @SerializedName(SERIALIZED_NAME_CI_CONSENT_STATUS)
  private String ciConsentStatus;

  public static final String SERIALIZED_NAME_CI_CONSENT_UPDATED_DATE = "ciConsentUpdatedDate";
  @SerializedName(SERIALIZED_NAME_CI_CONSENT_UPDATED_DATE)
  private OffsetDateTime ciConsentUpdatedDate;

  public CustomerServiceProvider() {
  }

  public CustomerServiceProvider pcId(String pcId) {
    
    this.pcId = pcId;
    return this;
  }

   /**
   * Unique ID generated by UCD for customer to communicate with external service provider.
   * @return pcId
  **/
  @javax.annotation.Nullable
  public String getPcId() {
    return pcId;
  }


  public void setPcId(String pcId) {
    this.pcId = pcId;
  }


  public CustomerServiceProvider providerName(String providerName) {
    
    this.providerName = providerName;
    return this;
  }

   /**
   * Service Provider Name
   * @return providerName
  **/
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }


  public void setProviderName(String providerName) {
    this.providerName = providerName;
  }


  public CustomerServiceProvider providerId(String providerId) {
    
    this.providerId = providerId;
    return this;
  }

   /**
   * Service Provider Id
   * @return providerId
  **/
  @javax.annotation.Nullable
  public String getProviderId() {
    return providerId;
  }


  public void setProviderId(String providerId) {
    this.providerId = providerId;
  }


  public CustomerServiceProvider activeFlag(String activeFlag) {
    
    this.activeFlag = activeFlag;
    return this;
  }

   /**
   * Service Provider Account Status
   * @return activeFlag
  **/
  @javax.annotation.Nullable
  public String getActiveFlag() {
    return activeFlag;
  }


  public void setActiveFlag(String activeFlag) {
    this.activeFlag = activeFlag;
  }


  public CustomerServiceProvider partnerRefId(String partnerRefId) {
    
    this.partnerRefId = partnerRefId;
    return this;
  }

   /**
   * Service Provider&#39;s Partner Account Reference Number
   * @return partnerRefId
  **/
  @javax.annotation.Nullable
  public String getPartnerRefId() {
    return partnerRefId;
  }


  public void setPartnerRefId(String partnerRefId) {
    this.partnerRefId = partnerRefId;
  }


  public CustomerServiceProvider partnerAccountStatus(String partnerAccountStatus) {
    
    this.partnerAccountStatus = partnerAccountStatus;
    return this;
  }

   /**
   * Service Provider&#39;s Partner Account Status
   * @return partnerAccountStatus
  **/
  @javax.annotation.Nullable
  public String getPartnerAccountStatus() {
    return partnerAccountStatus;
  }


  public void setPartnerAccountStatus(String partnerAccountStatus) {
    this.partnerAccountStatus = partnerAccountStatus;
  }


  public CustomerServiceProvider dndCounter(Integer dndCounter) {
    
    this.dndCounter = dndCounter;
    return this;
  }

   /**
   * Do not Display Counter for Banner for Credit Builder/Provider
   * @return dndCounter
  **/
  @javax.annotation.Nullable
  public Integer getDndCounter() {
    return dndCounter;
  }


  public void setDndCounter(Integer dndCounter) {
    this.dndCounter = dndCounter;
  }


  public CustomerServiceProvider dndUpdatedDate(OffsetDateTime dndUpdatedDate) {
    
    this.dndUpdatedDate = dndUpdatedDate;
    return this;
  }

   /**
   * Timestamp when Do not Display Counter is added/updated.
   * @return dndUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDndUpdatedDate() {
    return dndUpdatedDate;
  }


  public void setDndUpdatedDate(OffsetDateTime dndUpdatedDate) {
    this.dndUpdatedDate = dndUpdatedDate;
  }


  public CustomerServiceProvider ciConsentStatus(String ciConsentStatus) {
    
    this.ciConsentStatus = ciConsentStatus;
    return this;
  }

   /**
   * Credit Insight Consent Status. Y - Accepted, N or NULL - Not Accepted
   * @return ciConsentStatus
  **/
  @javax.annotation.Nullable
  public String getCiConsentStatus() {
    return ciConsentStatus;
  }


  public void setCiConsentStatus(String ciConsentStatus) {
    this.ciConsentStatus = ciConsentStatus;
  }


  public CustomerServiceProvider ciConsentUpdatedDate(OffsetDateTime ciConsentUpdatedDate) {
    
    this.ciConsentUpdatedDate = ciConsentUpdatedDate;
    return this;
  }

   /**
   * Timestamp when Credit Insight Consent was Capture and added/updated.
   * @return ciConsentUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCiConsentUpdatedDate() {
    return ciConsentUpdatedDate;
  }


  public void setCiConsentUpdatedDate(OffsetDateTime ciConsentUpdatedDate) {
    this.ciConsentUpdatedDate = ciConsentUpdatedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerServiceProvider customerServiceProvider = (CustomerServiceProvider) o;
    return Objects.equals(this.pcId, customerServiceProvider.pcId) &&
        Objects.equals(this.providerName, customerServiceProvider.providerName) &&
        Objects.equals(this.providerId, customerServiceProvider.providerId) &&
        Objects.equals(this.activeFlag, customerServiceProvider.activeFlag) &&
        Objects.equals(this.partnerRefId, customerServiceProvider.partnerRefId) &&
        Objects.equals(this.partnerAccountStatus, customerServiceProvider.partnerAccountStatus) &&
        Objects.equals(this.dndCounter, customerServiceProvider.dndCounter) &&
        Objects.equals(this.dndUpdatedDate, customerServiceProvider.dndUpdatedDate) &&
        Objects.equals(this.ciConsentStatus, customerServiceProvider.ciConsentStatus) &&
        Objects.equals(this.ciConsentUpdatedDate, customerServiceProvider.ciConsentUpdatedDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pcId, providerName, providerId, activeFlag, partnerRefId, partnerAccountStatus, dndCounter, dndUpdatedDate, ciConsentStatus, ciConsentUpdatedDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerServiceProvider {\n");
    sb.append("    pcId: ").append(toIndentedString(pcId)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    activeFlag: ").append(toIndentedString(activeFlag)).append("\n");
    sb.append("    partnerRefId: ").append(toIndentedString(partnerRefId)).append("\n");
    sb.append("    partnerAccountStatus: ").append(toIndentedString(partnerAccountStatus)).append("\n");
    sb.append("    dndCounter: ").append(toIndentedString(dndCounter)).append("\n");
    sb.append("    dndUpdatedDate: ").append(toIndentedString(dndUpdatedDate)).append("\n");
    sb.append("    ciConsentStatus: ").append(toIndentedString(ciConsentStatus)).append("\n");
    sb.append("    ciConsentUpdatedDate: ").append(toIndentedString(ciConsentUpdatedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pcId");
    openapiFields.add("providerName");
    openapiFields.add("providerId");
    openapiFields.add("activeFlag");
    openapiFields.add("partnerRefId");
    openapiFields.add("partnerAccountStatus");
    openapiFields.add("dndCounter");
    openapiFields.add("dndUpdatedDate");
    openapiFields.add("ciConsentStatus");
    openapiFields.add("ciConsentUpdatedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerServiceProvider
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerServiceProvider.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerServiceProvider is not found in the empty JSON string", CustomerServiceProvider.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerServiceProvider.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerServiceProvider` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("pcId") != null && !jsonObj.get("pcId").isJsonNull()) && !jsonObj.get("pcId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pcId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pcId").toString()));
      }
      if ((jsonObj.get("providerName") != null && !jsonObj.get("providerName").isJsonNull()) && !jsonObj.get("providerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
      if ((jsonObj.get("providerId") != null && !jsonObj.get("providerId").isJsonNull()) && !jsonObj.get("providerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerId").toString()));
      }
      if ((jsonObj.get("activeFlag") != null && !jsonObj.get("activeFlag").isJsonNull()) && !jsonObj.get("activeFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeFlag").toString()));
      }
      if ((jsonObj.get("partnerRefId") != null && !jsonObj.get("partnerRefId").isJsonNull()) && !jsonObj.get("partnerRefId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerRefId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerRefId").toString()));
      }
      if ((jsonObj.get("partnerAccountStatus") != null && !jsonObj.get("partnerAccountStatus").isJsonNull()) && !jsonObj.get("partnerAccountStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerAccountStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerAccountStatus").toString()));
      }
      if ((jsonObj.get("ciConsentStatus") != null && !jsonObj.get("ciConsentStatus").isJsonNull()) && !jsonObj.get("ciConsentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciConsentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ciConsentStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerServiceProvider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerServiceProvider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerServiceProvider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerServiceProvider.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerServiceProvider>() {
           @Override
           public void write(JsonWriter out, CustomerServiceProvider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerServiceProvider read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerServiceProvider given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerServiceProvider
  * @throws IOException if the JSON string is invalid with respect to CustomerServiceProvider
  */
  public static CustomerServiceProvider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerServiceProvider.class);
  }

 /**
  * Convert an instance of CustomerServiceProvider to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

