/*
 * ucd_pmgmt_v1_api
 * Swagger documentation for UCD Profile Management Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.Account;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.AccountOnboarding;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.Address;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.CounterPartyLink;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.Customer;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.CustomerAccountRepresentative;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.CustomerDevice;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.CustomerKycDetail;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.CustomerMiscFlags;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.CustomerPartner;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.CustomerReceiver;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.CustomerRole;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.CustomerServiceProvider;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.CustomerUsageStatistics;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.CustomerVerificationDetail;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.Email;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.FundingSource;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.Header;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.Kyc;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.Phone;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.Preferences;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.SecurityQueAndAns;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.Uab;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.JSON;

/**
 * This is request model for AddOrUpdateProfileElements service. This is to Add or Update multiple profile elements for a customer in a single request. If the elements in request does not exist in database then the data  will be  inserted. If the elements in request already exist in database then the data will be updated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T21:22:09.739306500+05:30[Asia/Calcutta]")
public class AddOrUpdateProfileElementsRequest {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Header header;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<Address> address;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private Account account;

  public static final String SERIALIZED_NAME_ACCOUNT_ONBOARDING = "accountOnboarding";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ONBOARDING)
  private AccountOnboarding accountOnboarding;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private List<Phone> phone;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private List<Email> email;

  public static final String SERIALIZED_NAME_SECURITY = "security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private List<SecurityQueAndAns> security;

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private Preferences preferences;

  public static final String SERIALIZED_NAME_FUNDING_SOURCES = "fundingSources";
  @SerializedName(SERIALIZED_NAME_FUNDING_SOURCES)
  private List<FundingSource> fundingSources;

  public static final String SERIALIZED_NAME_UAB = "uab";
  @SerializedName(SERIALIZED_NAME_UAB)
  private List<Uab> uab;

  public static final String SERIALIZED_NAME_KYC = "kyc";
  @SerializedName(SERIALIZED_NAME_KYC)
  private List<Kyc> kyc;

  public static final String SERIALIZED_NAME_CUSTOMER_KYC_DETAILS = "customerKycDetails";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_KYC_DETAILS)
  private List<CustomerKycDetail> customerKycDetails;

  public static final String SERIALIZED_NAME_CUSTOMER_VERIFICATION = "customerVerification";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_VERIFICATION)
  private List<CustomerVerificationDetail> customerVerification;

  public static final String SERIALIZED_NAME_COUNTER_PARTY_LINK = "counterPartyLink";
  @SerializedName(SERIALIZED_NAME_COUNTER_PARTY_LINK)
  private CounterPartyLink counterPartyLink;

  public static final String SERIALIZED_NAME_CUSTOMER_RECEIVER = "customerReceiver";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_RECEIVER)
  private List<CustomerReceiver> customerReceiver;

  public static final String SERIALIZED_NAME_CUSTOMER_USAGE_STATISTICS = "customerUsageStatistics";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_USAGE_STATISTICS)
  private CustomerUsageStatistics customerUsageStatistics;

  public static final String SERIALIZED_NAME_CUSTOMER_PARTNER = "customerPartner";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PARTNER)
  private CustomerPartner customerPartner;

  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_REPRESENTATIVE = "customerAccountRepresentative";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_REPRESENTATIVE)
  private List<CustomerAccountRepresentative> customerAccountRepresentative;

  public static final String SERIALIZED_NAME_CUSTOMER_SERVICE_PROVIDER = "customerServiceProvider";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SERVICE_PROVIDER)
  private CustomerServiceProvider customerServiceProvider;

  public static final String SERIALIZED_NAME_CUSTOMER_DEVICE = "customerDevice";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_DEVICE)
  private CustomerDevice customerDevice;

  public static final String SERIALIZED_NAME_CUSTOMER_MISC_FLAGS = "customerMiscFlags";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_MISC_FLAGS)
  private List<CustomerMiscFlags> customerMiscFlags;

  public static final String SERIALIZED_NAME_CUSTOMER_ROLE = "customerRole";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ROLE)
  private CustomerRole customerRole;

  public static final String SERIALIZED_NAME_IS_TRNL_REQ_FLAG = "isTrnlReqFlag";
  @SerializedName(SERIALIZED_NAME_IS_TRNL_REQ_FLAG)
  private Boolean isTrnlReqFlag;

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "requestType";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private String requestType;

  /**
   * This flag could be used to delete Customer Kyc Details entries. * A - All the IDs will be deleted * Y - All the IDs except for Source of Funds (Id Type &#x3D; SF &amp; KYC Details Seq &#x3D; 5) will be deleted. If the CustomerVerification details is passed in the request then existing CustomerVerification Datails will be deleted and the CustomerVerification details passed in the request will be added. * N / Null / Not Sent - No IDs will be deleted. 
   */
  @JsonAdapter(DeleteCustomerKycDetailsFlagEnum.Adapter.class)
  public enum DeleteCustomerKycDetailsFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    DeleteCustomerKycDetailsFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeleteCustomerKycDetailsFlagEnum fromValue(String value) {
      for (DeleteCustomerKycDetailsFlagEnum b : DeleteCustomerKycDetailsFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeleteCustomerKycDetailsFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeleteCustomerKycDetailsFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeleteCustomerKycDetailsFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeleteCustomerKycDetailsFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DELETE_CUSTOMER_KYC_DETAILS_FLAG = "deleteCustomerKycDetailsFlag";
  @SerializedName(SERIALIZED_NAME_DELETE_CUSTOMER_KYC_DETAILS_FLAG)
  private DeleteCustomerKycDetailsFlagEnum deleteCustomerKycDetailsFlag = DeleteCustomerKycDetailsFlagEnum.N;

  public static final String SERIALIZED_NAME_CHANNEL_TYPE = "channelType";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TYPE)
  private Integer channelType;

  /**
   * This flag could be used to register Customer Profiles which could be identified across channels and impose the following constraints. * Primary Phone as mandatory (if enabled) * DOB as mandatory (if enabled) * GID as mandatory (if enabled) * Phone + DOB uniqueness (if enabled) * Phone restrictions to allow Primary / Mobile Phone to be assigned to maximum of 5 Customer Profiles (if enabled) * Identify already existing Customer with GID instead of NAPEM (Name + Address + Primary Phone + Email/Mobile Phone) / NA (Name + Address) / NP (Name + Phone) / NM (Name + Mobile)) (if enabled) * Mark Profile as Primary for a successful Customer Registration / Update (default) Default is N. * Y - Will impose the above constraits. * N / Null / Not Sent - Will not impose the above constraints. 
   */
  @JsonAdapter(EnableCrossChannelFlagEnum.Adapter.class)
  public enum EnableCrossChannelFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EnableCrossChannelFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnableCrossChannelFlagEnum fromValue(String value) {
      for (EnableCrossChannelFlagEnum b : EnableCrossChannelFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnableCrossChannelFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnableCrossChannelFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnableCrossChannelFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnableCrossChannelFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENABLE_CROSS_CHANNEL_FLAG = "enableCrossChannelFlag";
  @SerializedName(SERIALIZED_NAME_ENABLE_CROSS_CHANNEL_FLAG)
  private EnableCrossChannelFlagEnum enableCrossChannelFlag = EnableCrossChannelFlagEnum.N;

  public static final String SERIALIZED_NAME_REQUEST_INITIATED_BY = "requestInitiatedBy";
  @SerializedName(SERIALIZED_NAME_REQUEST_INITIATED_BY)
  private String requestInitiatedBy;

  public AddOrUpdateProfileElementsRequest() {
  }

  public AddOrUpdateProfileElementsRequest header(Header header) {
    
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nonnull
  public Header getHeader() {
    return header;
  }


  public void setHeader(Header header) {
    this.header = header;
  }


  public AddOrUpdateProfileElementsRequest customer(Customer customer) {
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  public Customer getCustomer() {
    return customer;
  }


  public void setCustomer(Customer customer) {
    this.customer = customer;
  }


  public AddOrUpdateProfileElementsRequest address(List<Address> address) {
    
    this.address = address;
    return this;
  }

  public AddOrUpdateProfileElementsRequest addAddressItem(Address addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public List<Address> getAddress() {
    return address;
  }


  public void setAddress(List<Address> address) {
    this.address = address;
  }


  public AddOrUpdateProfileElementsRequest account(Account account) {
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable
  public Account getAccount() {
    return account;
  }


  public void setAccount(Account account) {
    this.account = account;
  }


  public AddOrUpdateProfileElementsRequest accountOnboarding(AccountOnboarding accountOnboarding) {
    
    this.accountOnboarding = accountOnboarding;
    return this;
  }

   /**
   * Get accountOnboarding
   * @return accountOnboarding
  **/
  @javax.annotation.Nullable
  public AccountOnboarding getAccountOnboarding() {
    return accountOnboarding;
  }


  public void setAccountOnboarding(AccountOnboarding accountOnboarding) {
    this.accountOnboarding = accountOnboarding;
  }


  public AddOrUpdateProfileElementsRequest phone(List<Phone> phone) {
    
    this.phone = phone;
    return this;
  }

  public AddOrUpdateProfileElementsRequest addPhoneItem(Phone phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<>();
    }
    this.phone.add(phoneItem);
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nullable
  public List<Phone> getPhone() {
    return phone;
  }


  public void setPhone(List<Phone> phone) {
    this.phone = phone;
  }


  public AddOrUpdateProfileElementsRequest email(List<Email> email) {
    
    this.email = email;
    return this;
  }

  public AddOrUpdateProfileElementsRequest addEmailItem(Email emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  public List<Email> getEmail() {
    return email;
  }


  public void setEmail(List<Email> email) {
    this.email = email;
  }


  public AddOrUpdateProfileElementsRequest security(List<SecurityQueAndAns> security) {
    
    this.security = security;
    return this;
  }

  public AddOrUpdateProfileElementsRequest addSecurityItem(SecurityQueAndAns securityItem) {
    if (this.security == null) {
      this.security = new ArrayList<>();
    }
    this.security.add(securityItem);
    return this;
  }

   /**
   * Get security
   * @return security
  **/
  @javax.annotation.Nullable
  public List<SecurityQueAndAns> getSecurity() {
    return security;
  }


  public void setSecurity(List<SecurityQueAndAns> security) {
    this.security = security;
  }


  public AddOrUpdateProfileElementsRequest preferences(Preferences preferences) {
    
    this.preferences = preferences;
    return this;
  }

   /**
   * Get preferences
   * @return preferences
  **/
  @javax.annotation.Nullable
  public Preferences getPreferences() {
    return preferences;
  }


  public void setPreferences(Preferences preferences) {
    this.preferences = preferences;
  }


  public AddOrUpdateProfileElementsRequest fundingSources(List<FundingSource> fundingSources) {
    
    this.fundingSources = fundingSources;
    return this;
  }

  public AddOrUpdateProfileElementsRequest addFundingSourcesItem(FundingSource fundingSourcesItem) {
    if (this.fundingSources == null) {
      this.fundingSources = new ArrayList<>();
    }
    this.fundingSources.add(fundingSourcesItem);
    return this;
  }

   /**
   * Get fundingSources
   * @return fundingSources
  **/
  @javax.annotation.Nullable
  public List<FundingSource> getFundingSources() {
    return fundingSources;
  }


  public void setFundingSources(List<FundingSource> fundingSources) {
    this.fundingSources = fundingSources;
  }


  public AddOrUpdateProfileElementsRequest uab(List<Uab> uab) {
    
    this.uab = uab;
    return this;
  }

  public AddOrUpdateProfileElementsRequest addUabItem(Uab uabItem) {
    if (this.uab == null) {
      this.uab = new ArrayList<>();
    }
    this.uab.add(uabItem);
    return this;
  }

   /**
   * Get uab
   * @return uab
  **/
  @javax.annotation.Nullable
  public List<Uab> getUab() {
    return uab;
  }


  public void setUab(List<Uab> uab) {
    this.uab = uab;
  }


  public AddOrUpdateProfileElementsRequest kyc(List<Kyc> kyc) {
    
    this.kyc = kyc;
    return this;
  }

  public AddOrUpdateProfileElementsRequest addKycItem(Kyc kycItem) {
    if (this.kyc == null) {
      this.kyc = new ArrayList<>();
    }
    this.kyc.add(kycItem);
    return this;
  }

   /**
   * Get kyc
   * @return kyc
  **/
  @javax.annotation.Nullable
  public List<Kyc> getKyc() {
    return kyc;
  }


  public void setKyc(List<Kyc> kyc) {
    this.kyc = kyc;
  }


  public AddOrUpdateProfileElementsRequest customerKycDetails(List<CustomerKycDetail> customerKycDetails) {
    
    this.customerKycDetails = customerKycDetails;
    return this;
  }

  public AddOrUpdateProfileElementsRequest addCustomerKycDetailsItem(CustomerKycDetail customerKycDetailsItem) {
    if (this.customerKycDetails == null) {
      this.customerKycDetails = new ArrayList<>();
    }
    this.customerKycDetails.add(customerKycDetailsItem);
    return this;
  }

   /**
   * Get customerKycDetails
   * @return customerKycDetails
  **/
  @javax.annotation.Nullable
  public List<CustomerKycDetail> getCustomerKycDetails() {
    return customerKycDetails;
  }


  public void setCustomerKycDetails(List<CustomerKycDetail> customerKycDetails) {
    this.customerKycDetails = customerKycDetails;
  }


  public AddOrUpdateProfileElementsRequest customerVerification(List<CustomerVerificationDetail> customerVerification) {
    
    this.customerVerification = customerVerification;
    return this;
  }

  public AddOrUpdateProfileElementsRequest addCustomerVerificationItem(CustomerVerificationDetail customerVerificationItem) {
    if (this.customerVerification == null) {
      this.customerVerification = new ArrayList<>();
    }
    this.customerVerification.add(customerVerificationItem);
    return this;
  }

   /**
   * Get customerVerification
   * @return customerVerification
  **/
  @javax.annotation.Nullable
  public List<CustomerVerificationDetail> getCustomerVerification() {
    return customerVerification;
  }


  public void setCustomerVerification(List<CustomerVerificationDetail> customerVerification) {
    this.customerVerification = customerVerification;
  }


  public AddOrUpdateProfileElementsRequest counterPartyLink(CounterPartyLink counterPartyLink) {
    
    this.counterPartyLink = counterPartyLink;
    return this;
  }

   /**
   * Get counterPartyLink
   * @return counterPartyLink
  **/
  @javax.annotation.Nullable
  public CounterPartyLink getCounterPartyLink() {
    return counterPartyLink;
  }


  public void setCounterPartyLink(CounterPartyLink counterPartyLink) {
    this.counterPartyLink = counterPartyLink;
  }


  public AddOrUpdateProfileElementsRequest customerReceiver(List<CustomerReceiver> customerReceiver) {
    
    this.customerReceiver = customerReceiver;
    return this;
  }

  public AddOrUpdateProfileElementsRequest addCustomerReceiverItem(CustomerReceiver customerReceiverItem) {
    if (this.customerReceiver == null) {
      this.customerReceiver = new ArrayList<>();
    }
    this.customerReceiver.add(customerReceiverItem);
    return this;
  }

   /**
   * Get customerReceiver
   * @return customerReceiver
  **/
  @javax.annotation.Nullable
  public List<CustomerReceiver> getCustomerReceiver() {
    return customerReceiver;
  }


  public void setCustomerReceiver(List<CustomerReceiver> customerReceiver) {
    this.customerReceiver = customerReceiver;
  }


  public AddOrUpdateProfileElementsRequest customerUsageStatistics(CustomerUsageStatistics customerUsageStatistics) {
    
    this.customerUsageStatistics = customerUsageStatistics;
    return this;
  }

   /**
   * Get customerUsageStatistics
   * @return customerUsageStatistics
  **/
  @javax.annotation.Nullable
  public CustomerUsageStatistics getCustomerUsageStatistics() {
    return customerUsageStatistics;
  }


  public void setCustomerUsageStatistics(CustomerUsageStatistics customerUsageStatistics) {
    this.customerUsageStatistics = customerUsageStatistics;
  }


  public AddOrUpdateProfileElementsRequest customerPartner(CustomerPartner customerPartner) {
    
    this.customerPartner = customerPartner;
    return this;
  }

   /**
   * Get customerPartner
   * @return customerPartner
  **/
  @javax.annotation.Nullable
  public CustomerPartner getCustomerPartner() {
    return customerPartner;
  }


  public void setCustomerPartner(CustomerPartner customerPartner) {
    this.customerPartner = customerPartner;
  }


  public AddOrUpdateProfileElementsRequest customerAccountRepresentative(List<CustomerAccountRepresentative> customerAccountRepresentative) {
    
    this.customerAccountRepresentative = customerAccountRepresentative;
    return this;
  }

  public AddOrUpdateProfileElementsRequest addCustomerAccountRepresentativeItem(CustomerAccountRepresentative customerAccountRepresentativeItem) {
    if (this.customerAccountRepresentative == null) {
      this.customerAccountRepresentative = new ArrayList<>();
    }
    this.customerAccountRepresentative.add(customerAccountRepresentativeItem);
    return this;
  }

   /**
   * Get customerAccountRepresentative
   * @return customerAccountRepresentative
  **/
  @javax.annotation.Nullable
  public List<CustomerAccountRepresentative> getCustomerAccountRepresentative() {
    return customerAccountRepresentative;
  }


  public void setCustomerAccountRepresentative(List<CustomerAccountRepresentative> customerAccountRepresentative) {
    this.customerAccountRepresentative = customerAccountRepresentative;
  }


  public AddOrUpdateProfileElementsRequest customerServiceProvider(CustomerServiceProvider customerServiceProvider) {
    
    this.customerServiceProvider = customerServiceProvider;
    return this;
  }

   /**
   * Get customerServiceProvider
   * @return customerServiceProvider
  **/
  @javax.annotation.Nullable
  public CustomerServiceProvider getCustomerServiceProvider() {
    return customerServiceProvider;
  }


  public void setCustomerServiceProvider(CustomerServiceProvider customerServiceProvider) {
    this.customerServiceProvider = customerServiceProvider;
  }


  public AddOrUpdateProfileElementsRequest customerDevice(CustomerDevice customerDevice) {
    
    this.customerDevice = customerDevice;
    return this;
  }

   /**
   * Get customerDevice
   * @return customerDevice
  **/
  @javax.annotation.Nullable
  public CustomerDevice getCustomerDevice() {
    return customerDevice;
  }


  public void setCustomerDevice(CustomerDevice customerDevice) {
    this.customerDevice = customerDevice;
  }


  public AddOrUpdateProfileElementsRequest customerMiscFlags(List<CustomerMiscFlags> customerMiscFlags) {
    
    this.customerMiscFlags = customerMiscFlags;
    return this;
  }

  public AddOrUpdateProfileElementsRequest addCustomerMiscFlagsItem(CustomerMiscFlags customerMiscFlagsItem) {
    if (this.customerMiscFlags == null) {
      this.customerMiscFlags = new ArrayList<>();
    }
    this.customerMiscFlags.add(customerMiscFlagsItem);
    return this;
  }

   /**
   * Get customerMiscFlags
   * @return customerMiscFlags
  **/
  @javax.annotation.Nullable
  public List<CustomerMiscFlags> getCustomerMiscFlags() {
    return customerMiscFlags;
  }


  public void setCustomerMiscFlags(List<CustomerMiscFlags> customerMiscFlags) {
    this.customerMiscFlags = customerMiscFlags;
  }


  public AddOrUpdateProfileElementsRequest customerRole(CustomerRole customerRole) {
    
    this.customerRole = customerRole;
    return this;
  }

   /**
   * Get customerRole
   * @return customerRole
  **/
  @javax.annotation.Nullable
  public CustomerRole getCustomerRole() {
    return customerRole;
  }


  public void setCustomerRole(CustomerRole customerRole) {
    this.customerRole = customerRole;
  }


  public AddOrUpdateProfileElementsRequest isTrnlReqFlag(Boolean isTrnlReqFlag) {
    
    this.isTrnlReqFlag = isTrnlReqFlag;
    return this;
  }

   /**
   * Transactional Request Flag. This field is used in RCM only. N/A for UCD. 
   * @return isTrnlReqFlag
  **/
  @javax.annotation.Nullable
  public Boolean getIsTrnlReqFlag() {
    return isTrnlReqFlag;
  }


  public void setIsTrnlReqFlag(Boolean isTrnlReqFlag) {
    this.isTrnlReqFlag = isTrnlReqFlag;
  }


  public AddOrUpdateProfileElementsRequest requestType(String requestType) {
    
    this.requestType = requestType;
    return this;
  }

   /**
   * Request Type. This field is used in RCM only. N/A for UCD. 
   * @return requestType
  **/
  @javax.annotation.Nullable
  public String getRequestType() {
    return requestType;
  }


  public void setRequestType(String requestType) {
    this.requestType = requestType;
  }


  public AddOrUpdateProfileElementsRequest deleteCustomerKycDetailsFlag(DeleteCustomerKycDetailsFlagEnum deleteCustomerKycDetailsFlag) {
    
    this.deleteCustomerKycDetailsFlag = deleteCustomerKycDetailsFlag;
    return this;
  }

   /**
   * This flag could be used to delete Customer Kyc Details entries. * A - All the IDs will be deleted * Y - All the IDs except for Source of Funds (Id Type &#x3D; SF &amp; KYC Details Seq &#x3D; 5) will be deleted. If the CustomerVerification details is passed in the request then existing CustomerVerification Datails will be deleted and the CustomerVerification details passed in the request will be added. * N / Null / Not Sent - No IDs will be deleted. 
   * @return deleteCustomerKycDetailsFlag
  **/
  @javax.annotation.Nullable
  public DeleteCustomerKycDetailsFlagEnum getDeleteCustomerKycDetailsFlag() {
    return deleteCustomerKycDetailsFlag;
  }


  public void setDeleteCustomerKycDetailsFlag(DeleteCustomerKycDetailsFlagEnum deleteCustomerKycDetailsFlag) {
    this.deleteCustomerKycDetailsFlag = deleteCustomerKycDetailsFlag;
  }


  public AddOrUpdateProfileElementsRequest channelType(Integer channelType) {
    
    this.channelType = channelType;
    return this;
  }

   /**
   * This field works along with deleteCustomerKycDetailsFlag. If deleteCustomerKycDetailsFlag flag is sent in the request as \&quot;Y\&quot; then this flag will be checked in the request. Depending upon the ChannelType passed in the request, IDs with those ChannelType will be deleted. If ChannelType is passed as -1, all the IDs will be deleted irrespective of ChannelType except for Source of Funds (Id Type &#x3D; SF &amp; KYC Details Seq &#x3D; 5). If ChannelType is not passed in request, IDs with ChannelType 1 will be deleted. 
   * @return channelType
  **/
  @javax.annotation.Nullable
  public Integer getChannelType() {
    return channelType;
  }


  public void setChannelType(Integer channelType) {
    this.channelType = channelType;
  }


  public AddOrUpdateProfileElementsRequest enableCrossChannelFlag(EnableCrossChannelFlagEnum enableCrossChannelFlag) {
    
    this.enableCrossChannelFlag = enableCrossChannelFlag;
    return this;
  }

   /**
   * This flag could be used to register Customer Profiles which could be identified across channels and impose the following constraints. * Primary Phone as mandatory (if enabled) * DOB as mandatory (if enabled) * GID as mandatory (if enabled) * Phone + DOB uniqueness (if enabled) * Phone restrictions to allow Primary / Mobile Phone to be assigned to maximum of 5 Customer Profiles (if enabled) * Identify already existing Customer with GID instead of NAPEM (Name + Address + Primary Phone + Email/Mobile Phone) / NA (Name + Address) / NP (Name + Phone) / NM (Name + Mobile)) (if enabled) * Mark Profile as Primary for a successful Customer Registration / Update (default) Default is N. * Y - Will impose the above constraits. * N / Null / Not Sent - Will not impose the above constraints. 
   * @return enableCrossChannelFlag
  **/
  @javax.annotation.Nullable
  public EnableCrossChannelFlagEnum getEnableCrossChannelFlag() {
    return enableCrossChannelFlag;
  }


  public void setEnableCrossChannelFlag(EnableCrossChannelFlagEnum enableCrossChannelFlag) {
    this.enableCrossChannelFlag = enableCrossChannelFlag;
  }


  public AddOrUpdateProfileElementsRequest requestInitiatedBy(String requestInitiatedBy) {
    
    this.requestInitiatedBy = requestInitiatedBy;
    return this;
  }

   /**
   * To identify who has initiated the request.
   * @return requestInitiatedBy
  **/
  @javax.annotation.Nonnull
  public String getRequestInitiatedBy() {
    return requestInitiatedBy;
  }


  public void setRequestInitiatedBy(String requestInitiatedBy) {
    this.requestInitiatedBy = requestInitiatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddOrUpdateProfileElementsRequest addOrUpdateProfileElementsRequest = (AddOrUpdateProfileElementsRequest) o;
    return Objects.equals(this.header, addOrUpdateProfileElementsRequest.header) &&
        Objects.equals(this.customer, addOrUpdateProfileElementsRequest.customer) &&
        Objects.equals(this.address, addOrUpdateProfileElementsRequest.address) &&
        Objects.equals(this.account, addOrUpdateProfileElementsRequest.account) &&
        Objects.equals(this.accountOnboarding, addOrUpdateProfileElementsRequest.accountOnboarding) &&
        Objects.equals(this.phone, addOrUpdateProfileElementsRequest.phone) &&
        Objects.equals(this.email, addOrUpdateProfileElementsRequest.email) &&
        Objects.equals(this.security, addOrUpdateProfileElementsRequest.security) &&
        Objects.equals(this.preferences, addOrUpdateProfileElementsRequest.preferences) &&
        Objects.equals(this.fundingSources, addOrUpdateProfileElementsRequest.fundingSources) &&
        Objects.equals(this.uab, addOrUpdateProfileElementsRequest.uab) &&
        Objects.equals(this.kyc, addOrUpdateProfileElementsRequest.kyc) &&
        Objects.equals(this.customerKycDetails, addOrUpdateProfileElementsRequest.customerKycDetails) &&
        Objects.equals(this.customerVerification, addOrUpdateProfileElementsRequest.customerVerification) &&
        Objects.equals(this.counterPartyLink, addOrUpdateProfileElementsRequest.counterPartyLink) &&
        Objects.equals(this.customerReceiver, addOrUpdateProfileElementsRequest.customerReceiver) &&
        Objects.equals(this.customerUsageStatistics, addOrUpdateProfileElementsRequest.customerUsageStatistics) &&
        Objects.equals(this.customerPartner, addOrUpdateProfileElementsRequest.customerPartner) &&
        Objects.equals(this.customerAccountRepresentative, addOrUpdateProfileElementsRequest.customerAccountRepresentative) &&
        Objects.equals(this.customerServiceProvider, addOrUpdateProfileElementsRequest.customerServiceProvider) &&
        Objects.equals(this.customerDevice, addOrUpdateProfileElementsRequest.customerDevice) &&
        Objects.equals(this.customerMiscFlags, addOrUpdateProfileElementsRequest.customerMiscFlags) &&
        Objects.equals(this.customerRole, addOrUpdateProfileElementsRequest.customerRole) &&
        Objects.equals(this.isTrnlReqFlag, addOrUpdateProfileElementsRequest.isTrnlReqFlag) &&
        Objects.equals(this.requestType, addOrUpdateProfileElementsRequest.requestType) &&
        Objects.equals(this.deleteCustomerKycDetailsFlag, addOrUpdateProfileElementsRequest.deleteCustomerKycDetailsFlag) &&
        Objects.equals(this.channelType, addOrUpdateProfileElementsRequest.channelType) &&
        Objects.equals(this.enableCrossChannelFlag, addOrUpdateProfileElementsRequest.enableCrossChannelFlag) &&
        Objects.equals(this.requestInitiatedBy, addOrUpdateProfileElementsRequest.requestInitiatedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, customer, address, account, accountOnboarding, phone, email, security, preferences, fundingSources, uab, kyc, customerKycDetails, customerVerification, counterPartyLink, customerReceiver, customerUsageStatistics, customerPartner, customerAccountRepresentative, customerServiceProvider, customerDevice, customerMiscFlags, customerRole, isTrnlReqFlag, requestType, deleteCustomerKycDetailsFlag, channelType, enableCrossChannelFlag, requestInitiatedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddOrUpdateProfileElementsRequest {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    accountOnboarding: ").append(toIndentedString(accountOnboarding)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    fundingSources: ").append(toIndentedString(fundingSources)).append("\n");
    sb.append("    uab: ").append(toIndentedString(uab)).append("\n");
    sb.append("    kyc: ").append(toIndentedString(kyc)).append("\n");
    sb.append("    customerKycDetails: ").append(toIndentedString(customerKycDetails)).append("\n");
    sb.append("    customerVerification: ").append(toIndentedString(customerVerification)).append("\n");
    sb.append("    counterPartyLink: ").append(toIndentedString(counterPartyLink)).append("\n");
    sb.append("    customerReceiver: ").append(toIndentedString(customerReceiver)).append("\n");
    sb.append("    customerUsageStatistics: ").append(toIndentedString(customerUsageStatistics)).append("\n");
    sb.append("    customerPartner: ").append(toIndentedString(customerPartner)).append("\n");
    sb.append("    customerAccountRepresentative: ").append(toIndentedString(customerAccountRepresentative)).append("\n");
    sb.append("    customerServiceProvider: ").append(toIndentedString(customerServiceProvider)).append("\n");
    sb.append("    customerDevice: ").append(toIndentedString(customerDevice)).append("\n");
    sb.append("    customerMiscFlags: ").append(toIndentedString(customerMiscFlags)).append("\n");
    sb.append("    customerRole: ").append(toIndentedString(customerRole)).append("\n");
    sb.append("    isTrnlReqFlag: ").append(toIndentedString(isTrnlReqFlag)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    deleteCustomerKycDetailsFlag: ").append(toIndentedString(deleteCustomerKycDetailsFlag)).append("\n");
    sb.append("    channelType: ").append(toIndentedString(channelType)).append("\n");
    sb.append("    enableCrossChannelFlag: ").append(toIndentedString(enableCrossChannelFlag)).append("\n");
    sb.append("    requestInitiatedBy: ").append(toIndentedString(requestInitiatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("customer");
    openapiFields.add("address");
    openapiFields.add("account");
    openapiFields.add("accountOnboarding");
    openapiFields.add("phone");
    openapiFields.add("email");
    openapiFields.add("security");
    openapiFields.add("preferences");
    openapiFields.add("fundingSources");
    openapiFields.add("uab");
    openapiFields.add("kyc");
    openapiFields.add("customerKycDetails");
    openapiFields.add("customerVerification");
    openapiFields.add("counterPartyLink");
    openapiFields.add("customerReceiver");
    openapiFields.add("customerUsageStatistics");
    openapiFields.add("customerPartner");
    openapiFields.add("customerAccountRepresentative");
    openapiFields.add("customerServiceProvider");
    openapiFields.add("customerDevice");
    openapiFields.add("customerMiscFlags");
    openapiFields.add("customerRole");
    openapiFields.add("isTrnlReqFlag");
    openapiFields.add("requestType");
    openapiFields.add("deleteCustomerKycDetailsFlag");
    openapiFields.add("channelType");
    openapiFields.add("enableCrossChannelFlag");
    openapiFields.add("requestInitiatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("header");
    openapiRequiredFields.add("requestInitiatedBy");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddOrUpdateProfileElementsRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddOrUpdateProfileElementsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddOrUpdateProfileElementsRequest is not found in the empty JSON string", AddOrUpdateProfileElementsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AddOrUpdateProfileElementsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddOrUpdateProfileElementsRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddOrUpdateProfileElementsRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `header`
      Header.validateJsonObject(jsonObj.getAsJsonObject("header"));
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
          }

          // validate the optional field `address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            Address.validateJsonObject(jsonArrayaddress.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        Account.validateJsonObject(jsonObj.getAsJsonObject("account"));
      }
      // validate the optional field `accountOnboarding`
      if (jsonObj.get("accountOnboarding") != null && !jsonObj.get("accountOnboarding").isJsonNull()) {
        AccountOnboarding.validateJsonObject(jsonObj.getAsJsonObject("accountOnboarding"));
      }
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) {
        JsonArray jsonArrayphone = jsonObj.getAsJsonArray("phone");
        if (jsonArrayphone != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phone").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phone` to be an array in the JSON string but got `%s`", jsonObj.get("phone").toString()));
          }

          // validate the optional field `phone` (array)
          for (int i = 0; i < jsonArrayphone.size(); i++) {
            Phone.validateJsonObject(jsonArrayphone.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) {
        JsonArray jsonArrayemail = jsonObj.getAsJsonArray("email");
        if (jsonArrayemail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("email").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `email` to be an array in the JSON string but got `%s`", jsonObj.get("email").toString()));
          }

          // validate the optional field `email` (array)
          for (int i = 0; i < jsonArrayemail.size(); i++) {
            Email.validateJsonObject(jsonArrayemail.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("security") != null && !jsonObj.get("security").isJsonNull()) {
        JsonArray jsonArraysecurity = jsonObj.getAsJsonArray("security");
        if (jsonArraysecurity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("security").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `security` to be an array in the JSON string but got `%s`", jsonObj.get("security").toString()));
          }

          // validate the optional field `security` (array)
          for (int i = 0; i < jsonArraysecurity.size(); i++) {
            SecurityQueAndAns.validateJsonObject(jsonArraysecurity.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `preferences`
      if (jsonObj.get("preferences") != null && !jsonObj.get("preferences").isJsonNull()) {
        Preferences.validateJsonObject(jsonObj.getAsJsonObject("preferences"));
      }
      if (jsonObj.get("fundingSources") != null && !jsonObj.get("fundingSources").isJsonNull()) {
        JsonArray jsonArrayfundingSources = jsonObj.getAsJsonArray("fundingSources");
        if (jsonArrayfundingSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fundingSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fundingSources` to be an array in the JSON string but got `%s`", jsonObj.get("fundingSources").toString()));
          }

          // validate the optional field `fundingSources` (array)
          for (int i = 0; i < jsonArrayfundingSources.size(); i++) {
            FundingSource.validateJsonObject(jsonArrayfundingSources.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("uab") != null && !jsonObj.get("uab").isJsonNull()) {
        JsonArray jsonArrayuab = jsonObj.getAsJsonArray("uab");
        if (jsonArrayuab != null) {
          // ensure the json data is an array
          if (!jsonObj.get("uab").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `uab` to be an array in the JSON string but got `%s`", jsonObj.get("uab").toString()));
          }

          // validate the optional field `uab` (array)
          for (int i = 0; i < jsonArrayuab.size(); i++) {
            Uab.validateJsonObject(jsonArrayuab.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("kyc") != null && !jsonObj.get("kyc").isJsonNull()) {
        JsonArray jsonArraykyc = jsonObj.getAsJsonArray("kyc");
        if (jsonArraykyc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("kyc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `kyc` to be an array in the JSON string but got `%s`", jsonObj.get("kyc").toString()));
          }

          // validate the optional field `kyc` (array)
          for (int i = 0; i < jsonArraykyc.size(); i++) {
            Kyc.validateJsonObject(jsonArraykyc.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerKycDetails") != null && !jsonObj.get("customerKycDetails").isJsonNull()) {
        JsonArray jsonArraycustomerKycDetails = jsonObj.getAsJsonArray("customerKycDetails");
        if (jsonArraycustomerKycDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerKycDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerKycDetails` to be an array in the JSON string but got `%s`", jsonObj.get("customerKycDetails").toString()));
          }

          // validate the optional field `customerKycDetails` (array)
          for (int i = 0; i < jsonArraycustomerKycDetails.size(); i++) {
            CustomerKycDetail.validateJsonObject(jsonArraycustomerKycDetails.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerVerification") != null && !jsonObj.get("customerVerification").isJsonNull()) {
        JsonArray jsonArraycustomerVerification = jsonObj.getAsJsonArray("customerVerification");
        if (jsonArraycustomerVerification != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerVerification").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerVerification` to be an array in the JSON string but got `%s`", jsonObj.get("customerVerification").toString()));
          }

          // validate the optional field `customerVerification` (array)
          for (int i = 0; i < jsonArraycustomerVerification.size(); i++) {
            CustomerVerificationDetail.validateJsonObject(jsonArraycustomerVerification.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `counterPartyLink`
      if (jsonObj.get("counterPartyLink") != null && !jsonObj.get("counterPartyLink").isJsonNull()) {
        CounterPartyLink.validateJsonObject(jsonObj.getAsJsonObject("counterPartyLink"));
      }
      if (jsonObj.get("customerReceiver") != null && !jsonObj.get("customerReceiver").isJsonNull()) {
        JsonArray jsonArraycustomerReceiver = jsonObj.getAsJsonArray("customerReceiver");
        if (jsonArraycustomerReceiver != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerReceiver").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerReceiver` to be an array in the JSON string but got `%s`", jsonObj.get("customerReceiver").toString()));
          }

          // validate the optional field `customerReceiver` (array)
          for (int i = 0; i < jsonArraycustomerReceiver.size(); i++) {
            CustomerReceiver.validateJsonObject(jsonArraycustomerReceiver.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `customerUsageStatistics`
      if (jsonObj.get("customerUsageStatistics") != null && !jsonObj.get("customerUsageStatistics").isJsonNull()) {
        CustomerUsageStatistics.validateJsonObject(jsonObj.getAsJsonObject("customerUsageStatistics"));
      }
      // validate the optional field `customerPartner`
      if (jsonObj.get("customerPartner") != null && !jsonObj.get("customerPartner").isJsonNull()) {
        CustomerPartner.validateJsonObject(jsonObj.getAsJsonObject("customerPartner"));
      }
      if (jsonObj.get("customerAccountRepresentative") != null && !jsonObj.get("customerAccountRepresentative").isJsonNull()) {
        JsonArray jsonArraycustomerAccountRepresentative = jsonObj.getAsJsonArray("customerAccountRepresentative");
        if (jsonArraycustomerAccountRepresentative != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerAccountRepresentative").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerAccountRepresentative` to be an array in the JSON string but got `%s`", jsonObj.get("customerAccountRepresentative").toString()));
          }

          // validate the optional field `customerAccountRepresentative` (array)
          for (int i = 0; i < jsonArraycustomerAccountRepresentative.size(); i++) {
            CustomerAccountRepresentative.validateJsonObject(jsonArraycustomerAccountRepresentative.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `customerServiceProvider`
      if (jsonObj.get("customerServiceProvider") != null && !jsonObj.get("customerServiceProvider").isJsonNull()) {
        CustomerServiceProvider.validateJsonObject(jsonObj.getAsJsonObject("customerServiceProvider"));
      }
      // validate the optional field `customerDevice`
      if (jsonObj.get("customerDevice") != null && !jsonObj.get("customerDevice").isJsonNull()) {
        CustomerDevice.validateJsonObject(jsonObj.getAsJsonObject("customerDevice"));
      }
      if (jsonObj.get("customerMiscFlags") != null && !jsonObj.get("customerMiscFlags").isJsonNull()) {
        JsonArray jsonArraycustomerMiscFlags = jsonObj.getAsJsonArray("customerMiscFlags");
        if (jsonArraycustomerMiscFlags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerMiscFlags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerMiscFlags` to be an array in the JSON string but got `%s`", jsonObj.get("customerMiscFlags").toString()));
          }

          // validate the optional field `customerMiscFlags` (array)
          for (int i = 0; i < jsonArraycustomerMiscFlags.size(); i++) {
            CustomerMiscFlags.validateJsonObject(jsonArraycustomerMiscFlags.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `customerRole`
      if (jsonObj.get("customerRole") != null && !jsonObj.get("customerRole").isJsonNull()) {
        CustomerRole.validateJsonObject(jsonObj.getAsJsonObject("customerRole"));
      }
      if ((jsonObj.get("requestType") != null && !jsonObj.get("requestType").isJsonNull()) && !jsonObj.get("requestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestType").toString()));
      }
      if ((jsonObj.get("deleteCustomerKycDetailsFlag") != null && !jsonObj.get("deleteCustomerKycDetailsFlag").isJsonNull()) && !jsonObj.get("deleteCustomerKycDetailsFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteCustomerKycDetailsFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteCustomerKycDetailsFlag").toString()));
      }
      if ((jsonObj.get("enableCrossChannelFlag") != null && !jsonObj.get("enableCrossChannelFlag").isJsonNull()) && !jsonObj.get("enableCrossChannelFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableCrossChannelFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enableCrossChannelFlag").toString()));
      }
      if (!jsonObj.get("requestInitiatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestInitiatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestInitiatedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddOrUpdateProfileElementsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddOrUpdateProfileElementsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddOrUpdateProfileElementsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddOrUpdateProfileElementsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddOrUpdateProfileElementsRequest>() {
           @Override
           public void write(JsonWriter out, AddOrUpdateProfileElementsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddOrUpdateProfileElementsRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddOrUpdateProfileElementsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddOrUpdateProfileElementsRequest
  * @throws IOException if the JSON string is invalid with respect to AddOrUpdateProfileElementsRequest
  */
  public static AddOrUpdateProfileElementsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddOrUpdateProfileElementsRequest.class);
  }

 /**
  * Convert an instance of AddOrUpdateProfileElementsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

