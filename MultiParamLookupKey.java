/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;

import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * Customer profile elements to be used for Lookup. - Available Elements- Name, ISDCodePlusPhoneNumber(PhoneHash), Phone (Primary/Mobile), Email, Address, LookupKey1, LookupKey2. - Currently this operations supports lookup using only following elements.     1. Name     2. DOB     3. PhoneHash     4. IdType     5. IdNumber     6. CountryCodeIso2     7. CountryCodeIso3 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class MultiParamLookupKey {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private MultiParamLookupKeyName name;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private LocalDate dob;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private Email email;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_ISD_CODE_PLUS_PHONE_NUMBER = "isdCodePlusPhoneNumber";
  @SerializedName(SERIALIZED_NAME_ISD_CODE_PLUS_PHONE_NUMBER)
  private String isdCodePlusPhoneNumber;

  public static final String SERIALIZED_NAME_ISD_CODE = "isdCode";
  @SerializedName(SERIALIZED_NAME_ISD_CODE)
  private String isdCode;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_ID_TYPE = "idType";
  @SerializedName(SERIALIZED_NAME_ID_TYPE)
  private String idType;

  public static final String SERIALIZED_NAME_ID_NUMBER = "idNumber";
  @SerializedName(SERIALIZED_NAME_ID_NUMBER)
  private String idNumber;

  public MultiParamLookupKey() {
  }

  public MultiParamLookupKey name(MultiParamLookupKeyName name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public MultiParamLookupKeyName getName() {
    return name;
  }


  public void setName(MultiParamLookupKeyName name) {
    this.name = name;
  }


  public MultiParamLookupKey dob(LocalDate dob) {
    
    this.dob = dob;
    return this;
  }

   /**
   * This field is recommended to pass for Date of Birth. The dob field inside the Name schema will be deprecated in future.
   * @return dob
  **/
  @javax.annotation.Nullable
  public LocalDate getDob() {
    return dob;
  }


  public void setDob(LocalDate dob) {
    this.dob = dob;
  }


  public MultiParamLookupKey email(Email email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  public Email getEmail() {
    return email;
  }


  public void setEmail(Email email) {
    this.email = email;
  }


  public MultiParamLookupKey address(Address address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }


  public void setAddress(Address address) {
    this.address = address;
  }


  public MultiParamLookupKey isdCodePlusPhoneNumber(String isdCodePlusPhoneNumber) {
    
    this.isdCodePlusPhoneNumber = isdCodePlusPhoneNumber;
    return this;
  }

   /**
   * Clients have to send either the phone number as is entered while inserting the data or the concatenated ISDCode + strippedOf(PhoneNumber) in this element.    - This value will be stripped of all the special characters and will search against PHONE_HASH column in PHONE table.    - If it doesn&#39;t find a match, then, the lookup will be done against the PHONE_NUMBER column with the value received as is from the request.    - This is a partial match with minimum 5 digit with IsdCode + Phone Number / Phone Number. 
   * @return isdCodePlusPhoneNumber
  **/
  @javax.annotation.Nullable
  public String getIsdCodePlusPhoneNumber() {
    return isdCodePlusPhoneNumber;
  }


  public void setIsdCodePlusPhoneNumber(String isdCodePlusPhoneNumber) {
    this.isdCodePlusPhoneNumber = isdCodePlusPhoneNumber;
  }


  public MultiParamLookupKey isdCode(String isdCode) {
    
    this.isdCode = isdCode;
    return this;
  }

   /**
   * Customer&#39;s International Dialing Code. e.g. 1 for USA, 44 for UK, 91 for India, etc
   * @return isdCode
  **/
  @javax.annotation.Nullable
  public String getIsdCode() {
    return isdCode;
  }


  public void setIsdCode(String isdCode) {
    this.isdCode = isdCode;
  }


  public MultiParamLookupKey phoneNumber(String phoneNumber) {
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Customer&#39;s Phone Number
   * @return phoneNumber
  **/
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public MultiParamLookupKey idType(String idType) {
    
    this.idType = idType;
    return this;
  }

   /**
   * Id Type in Customer Kyc Details
   * @return idType
  **/
  @javax.annotation.Nullable
  public String getIdType() {
    return idType;
  }


  public void setIdType(String idType) {
    this.idType = idType;
  }


  public MultiParamLookupKey idNumber(String idNumber) {
    
    this.idNumber = idNumber;
    return this;
  }

   /**
   * Id Number in Customer KYC Details.
   * @return idNumber
  **/
  @javax.annotation.Nullable
  public String getIdNumber() {
    return idNumber;
  }


  public void setIdNumber(String idNumber) {
    this.idNumber = idNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiParamLookupKey multiParamLookupKey = (MultiParamLookupKey) o;
    return Objects.equals(this.name, multiParamLookupKey.name) &&
        Objects.equals(this.dob, multiParamLookupKey.dob) &&
        Objects.equals(this.email, multiParamLookupKey.email) &&
        Objects.equals(this.address, multiParamLookupKey.address) &&
        Objects.equals(this.isdCodePlusPhoneNumber, multiParamLookupKey.isdCodePlusPhoneNumber) &&
        Objects.equals(this.isdCode, multiParamLookupKey.isdCode) &&
        Objects.equals(this.phoneNumber, multiParamLookupKey.phoneNumber) &&
        Objects.equals(this.idType, multiParamLookupKey.idType) &&
        Objects.equals(this.idNumber, multiParamLookupKey.idNumber);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, dob, email, address, isdCodePlusPhoneNumber, isdCode, phoneNumber, idType, idNumber);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiParamLookupKey {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    isdCodePlusPhoneNumber: ").append(toIndentedString(isdCodePlusPhoneNumber)).append("\n");
    sb.append("    isdCode: ").append(toIndentedString(isdCode)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    idType: ").append(toIndentedString(idType)).append("\n");
    sb.append("    idNumber: ").append(toIndentedString(idNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("dob");
    openapiFields.add("email");
    openapiFields.add("address");
    openapiFields.add("isdCodePlusPhoneNumber");
    openapiFields.add("isdCode");
    openapiFields.add("phoneNumber");
    openapiFields.add("idType");
    openapiFields.add("idNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MultiParamLookupKey
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MultiParamLookupKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiParamLookupKey is not found in the empty JSON string", MultiParamLookupKey.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MultiParamLookupKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiParamLookupKey` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        MultiParamLookupKeyName.validateJsonObject(jsonObj.getAsJsonObject("name"));
      }
      // validate the optional field `email`
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) {
        Email.validateJsonObject(jsonObj.getAsJsonObject("email"));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      if ((jsonObj.get("isdCodePlusPhoneNumber") != null && !jsonObj.get("isdCodePlusPhoneNumber").isJsonNull()) && !jsonObj.get("isdCodePlusPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isdCodePlusPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isdCodePlusPhoneNumber").toString()));
      }
      if ((jsonObj.get("isdCode") != null && !jsonObj.get("isdCode").isJsonNull()) && !jsonObj.get("isdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isdCode").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("idType") != null && !jsonObj.get("idType").isJsonNull()) && !jsonObj.get("idType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idType").toString()));
      }
      if ((jsonObj.get("idNumber") != null && !jsonObj.get("idNumber").isJsonNull()) && !jsonObj.get("idNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiParamLookupKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiParamLookupKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiParamLookupKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiParamLookupKey.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiParamLookupKey>() {
           @Override
           public void write(JsonWriter out, MultiParamLookupKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiParamLookupKey read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MultiParamLookupKey given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MultiParamLookupKey
  * @throws IOException if the JSON string is invalid with respect to MultiParamLookupKey
  */
  public static MultiParamLookupKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiParamLookupKey.class);
  }

 /**
  * Convert an instance of MultiParamLookupKey to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

