/*
 * ucd_cregn_v1_api
 * Swagger documentation for UCD Customer Registration Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerregistration;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.AccountAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.AccountOnboardingAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.AddressAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerAccountRepresentativeAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerDeviceAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerKycDetailAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerMiscFlagsAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerPartnerAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerReceiverAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerRoleAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerServiceProviderAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerUsageStatisticsAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.CustomerVerificationDetailAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.EmailAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.FundingSourceAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.Header;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.KycAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.PepProfileEntitiesAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.PhoneAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.PreferencesAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.PrepaidAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.ProfileAttributesAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.ResponseStatus;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.SecurityQueAndAnsAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.SegmentationCodesAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.UabAndAudit;
import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.UcbDisplayFlagAndAudit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.JSON;

/**
 * This is the response model for CustomerRegistration service. If the duplicate customer exists, info of existing customers UMN and if IncludeSenderInfo in the request is Y, then the details of the existing customer are sent back in the response. If the Customer is new, customer is registered and CustomerUMN/ConvenienceNo is sent back in the response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:58:59.701576900+05:30[Asia/Calcutta]")
public class CustomerRegistrationResponse {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Header header;

  public static final String SERIALIZED_NAME_RESPONSE_STATUS = "responseStatus";
  @SerializedName(SERIALIZED_NAME_RESPONSE_STATUS)
  private ResponseStatus responseStatus;

  public static final String SERIALIZED_NAME_CUSTOMER_UMN = "customerUmn";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_UMN)
  private String customerUmn;

  public static final String SERIALIZED_NAME_CONVENIENCE_NO = "convenienceNo";
  @SerializedName(SERIALIZED_NAME_CONVENIENCE_NO)
  private String convenienceNo;

  public static final String SERIALIZED_NAME_LEAD_ID = "leadId";
  @SerializedName(SERIALIZED_NAME_LEAD_ID)
  private Long leadId;

  public static final String SERIALIZED_NAME_CUSTOMER_ALREADY_REGISTERED = "customerAlreadyRegistered";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ALREADY_REGISTERED)
  private Boolean customerAlreadyRegistered;

  public static final String SERIALIZED_NAME_DO_NOT_DISPLAY = "doNotDisplay";
  @SerializedName(SERIALIZED_NAME_DO_NOT_DISPLAY)
  private Boolean doNotDisplay;

  public static final String SERIALIZED_NAME_IS_CONVENIENCE = "isConvenience";
  @SerializedName(SERIALIZED_NAME_IS_CONVENIENCE)
  private Boolean isConvenience;

  public static final String SERIALIZED_NAME_LEVEL_CODE = "levelCode";
  @SerializedName(SERIALIZED_NAME_LEVEL_CODE)
  private String levelCode;

  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  /**
   * Enrollment Type - Explicit (E)/Convenience (C). If this field is not passed it will be treated as Implicit.
   */
  @JsonAdapter(EnrollmentTypeEnum.Adapter.class)
  public enum EnrollmentTypeEnum {
    E("E"),
    
    C("C");

    private String value;

    EnrollmentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnrollmentTypeEnum fromValue(String value) {
      for (EnrollmentTypeEnum b : EnrollmentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnrollmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnrollmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnrollmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnrollmentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENROLLMENT_TYPE = "enrollmentType";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_TYPE)
  private EnrollmentTypeEnum enrollmentType;

  /**
   * A - if auto enroll , C - Conveneince enroll, Y - previously enrolled
   */
  @JsonAdapter(AutoEnrollFlagEnum.Adapter.class)
  public enum AutoEnrollFlagEnum {
    A("A"),
    
    C("C"),
    
    Y("Y");

    private String value;

    AutoEnrollFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoEnrollFlagEnum fromValue(String value) {
      for (AutoEnrollFlagEnum b : AutoEnrollFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoEnrollFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoEnrollFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoEnrollFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoEnrollFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTO_ENROLL_FLAG = "autoEnrollFlag";
  @SerializedName(SERIALIZED_NAME_AUTO_ENROLL_FLAG)
  private AutoEnrollFlagEnum autoEnrollFlag;

  public static final String SERIALIZED_NAME_CARD_CLASS = "cardClass";
  @SerializedName(SERIALIZED_NAME_CARD_CLASS)
  private String cardClass;

  public static final String SERIALIZED_NAME_NOTIFICATION_STATUS = "notificationStatus";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_STATUS)
  private String notificationStatus;

  public static final String SERIALIZED_NAME_CREATED_SYNC = "createdSync";
  @SerializedName(SERIALIZED_NAME_CREATED_SYNC)
  private String createdSync;

  public static final String SERIALIZED_NAME_UPDATED_SYNC = "updatedSync";
  @SerializedName(SERIALIZED_NAME_UPDATED_SYNC)
  private String updatedSync;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CUSTOMER_SEQUENCE_NO = "customerSequenceNo";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SEQUENCE_NO)
  private String customerSequenceNo;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private CustomerAndAudit customer;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private List<AccountAndAudit> account;

  public static final String SERIALIZED_NAME_ACCOUNT_ONBOARDING = "accountOnboarding";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ONBOARDING)
  private List<AccountOnboardingAndAudit> accountOnboarding;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<AddressAndAudit> address;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private List<EmailAndAudit> email;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private List<PhoneAndAudit> phone;

  public static final String SERIALIZED_NAME_SECURITY = "security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private List<SecurityQueAndAnsAndAudit> security;

  public static final String SERIALIZED_NAME_FUNDING_SOURCES = "fundingSources";
  @SerializedName(SERIALIZED_NAME_FUNDING_SOURCES)
  private List<FundingSourceAndAudit> fundingSources;

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private PreferencesAndAudit preferences;

  public static final String SERIALIZED_NAME_KYC = "kyc";
  @SerializedName(SERIALIZED_NAME_KYC)
  private List<KycAndAudit> kyc;

  public static final String SERIALIZED_NAME_CUSTOMER_KYC_DETAILS = "customerKycDetails";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_KYC_DETAILS)
  private List<CustomerKycDetailAndAudit> customerKycDetails;

  public static final String SERIALIZED_NAME_CUSTOMER_VERIFICATION_DETAILS = "customerVerificationDetails";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_VERIFICATION_DETAILS)
  private List<CustomerVerificationDetailAndAudit> customerVerificationDetails;

  public static final String SERIALIZED_NAME_CUSTOMER_RECEIVER = "customerReceiver";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_RECEIVER)
  private List<CustomerReceiverAndAudit> customerReceiver;

  public static final String SERIALIZED_NAME_UAB = "uab";
  @SerializedName(SERIALIZED_NAME_UAB)
  private List<UabAndAudit> uab;

  public static final String SERIALIZED_NAME_CUSTOMER_USAGE_STATISTICS = "customerUsageStatistics";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_USAGE_STATISTICS)
  private CustomerUsageStatisticsAndAudit customerUsageStatistics;

  public static final String SERIALIZED_NAME_PARTNER = "partner";
  @SerializedName(SERIALIZED_NAME_PARTNER)
  private CustomerPartnerAndAudit partner;

  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_REPRESENTATIVE = "customerAccountRepresentative";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_REPRESENTATIVE)
  private List<CustomerAccountRepresentativeAndAudit> customerAccountRepresentative;

  public static final String SERIALIZED_NAME_CUSTOMER_SERVICE_PROVIDER = "customerServiceProvider";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SERVICE_PROVIDER)
  private List<CustomerServiceProviderAndAudit> customerServiceProvider;

  public static final String SERIALIZED_NAME_CUSTOMER_DEVICES = "customerDevices";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_DEVICES)
  private List<CustomerDeviceAndAudit> customerDevices;

  public static final String SERIALIZED_NAME_CUSTOMER_MISC_FLAGS = "customerMiscFlags";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_MISC_FLAGS)
  private List<CustomerMiscFlagsAndAudit> customerMiscFlags;

  public static final String SERIALIZED_NAME_PROFILE_ATTRIBUTES = "profileAttributes";
  @SerializedName(SERIALIZED_NAME_PROFILE_ATTRIBUTES)
  private ProfileAttributesAndAudit profileAttributes;

  public static final String SERIALIZED_NAME_CUSTOMER_ROLE = "customerRole";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ROLE)
  private CustomerRoleAndAudit customerRole;

  public static final String SERIALIZED_NAME_PREPAID = "prepaid";
  @SerializedName(SERIALIZED_NAME_PREPAID)
  private PrepaidAndAudit prepaid;

  public static final String SERIALIZED_NAME_SEGMENTATION_CODES = "segmentationCodes";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_CODES)
  private SegmentationCodesAndAudit segmentationCodes;

  public static final String SERIALIZED_NAME_PEP_PROFILE_ENTITIES = "pepProfileEntities";
  @SerializedName(SERIALIZED_NAME_PEP_PROFILE_ENTITIES)
  private PepProfileEntitiesAndAudit pepProfileEntities;

  public static final String SERIALIZED_NAME_UCB_DISPLAY_FLAG = "ucbDisplayFlag";
  @SerializedName(SERIALIZED_NAME_UCB_DISPLAY_FLAG)
  private UcbDisplayFlagAndAudit ucbDisplayFlag;

  public CustomerRegistrationResponse() {
  }

  public CustomerRegistrationResponse header(Header header) {
    
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nullable
  public Header getHeader() {
    return header;
  }


  public void setHeader(Header header) {
    this.header = header;
  }


  public CustomerRegistrationResponse responseStatus(ResponseStatus responseStatus) {
    
    this.responseStatus = responseStatus;
    return this;
  }

   /**
   * Get responseStatus
   * @return responseStatus
  **/
  @javax.annotation.Nullable
  public ResponseStatus getResponseStatus() {
    return responseStatus;
  }


  public void setResponseStatus(ResponseStatus responseStatus) {
    this.responseStatus = responseStatus;
  }


  public CustomerRegistrationResponse customerUmn(String customerUmn) {
    
    this.customerUmn = customerUmn;
    return this;
  }

   /**
   * This field will be passed only on successful Customer Registration
   * @return customerUmn
  **/
  @javax.annotation.Nullable
  public String getCustomerUmn() {
    return customerUmn;
  }


  public void setCustomerUmn(String customerUmn) {
    this.customerUmn = customerUmn;
  }


  public CustomerRegistrationResponse convenienceNo(String convenienceNo) {
    
    this.convenienceNo = convenienceNo;
    return this;
  }

   /**
   * This field will be passed only on successful Convenience Registration
   * @return convenienceNo
  **/
  @javax.annotation.Nullable
  public String getConvenienceNo() {
    return convenienceNo;
  }


  public void setConvenienceNo(String convenienceNo) {
    this.convenienceNo = convenienceNo;
  }


  public CustomerRegistrationResponse leadId(Long leadId) {
    
    this.leadId = leadId;
    return this;
  }

   /**
   * This field will be passed only on Lead to Customer Registration conversion
   * @return leadId
  **/
  @javax.annotation.Nullable
  public Long getLeadId() {
    return leadId;
  }


  public void setLeadId(Long leadId) {
    this.leadId = leadId;
  }


  public CustomerRegistrationResponse customerAlreadyRegistered(Boolean customerAlreadyRegistered) {
    
    this.customerAlreadyRegistered = customerAlreadyRegistered;
    return this;
  }

   /**
   * This flag indicates if the incoming Customer Registration request is new/existing. New - false, Existing - true
   * @return customerAlreadyRegistered
  **/
  @javax.annotation.Nullable
  public Boolean getCustomerAlreadyRegistered() {
    return customerAlreadyRegistered;
  }


  public void setCustomerAlreadyRegistered(Boolean customerAlreadyRegistered) {
    this.customerAlreadyRegistered = customerAlreadyRegistered;
  }


  public CustomerRegistrationResponse doNotDisplay(Boolean doNotDisplay) {
    
    this.doNotDisplay = doNotDisplay;
    return this;
  }

   /**
   * This flag is used to mark the Customer to be displayed/not displayed in POS. For Convenience it is always true
   * @return doNotDisplay
  **/
  @javax.annotation.Nullable
  public Boolean getDoNotDisplay() {
    return doNotDisplay;
  }


  public void setDoNotDisplay(Boolean doNotDisplay) {
    this.doNotDisplay = doNotDisplay;
  }


  public CustomerRegistrationResponse isConvenience(Boolean isConvenience) {
    
    this.isConvenience = isConvenience;
    return this;
  }

   /**
   * This flag is used to mark the Customer is Convenience or not
   * @return isConvenience
  **/
  @javax.annotation.Nullable
  public Boolean getIsConvenience() {
    return isConvenience;
  }


  public void setIsConvenience(Boolean isConvenience) {
    this.isConvenience = isConvenience;
  }


  public CustomerRegistrationResponse levelCode(String levelCode) {
    
    this.levelCode = levelCode;
    return this;
  }

   /**
   * Customer Level Code. Example values are XXC, YYC, WU6, WU7 etc.
   * @return levelCode
  **/
  @javax.annotation.Nullable
  public String getLevelCode() {
    return levelCode;
  }


  public void setLevelCode(String levelCode) {
    this.levelCode = levelCode;
  }


  public CustomerRegistrationResponse ruleId(String ruleId) {
    
    this.ruleId = ruleId;
    return this;
  }

   /**
   * Rule Id
   * @return ruleId
  **/
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }


  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public CustomerRegistrationResponse enrollmentType(EnrollmentTypeEnum enrollmentType) {
    
    this.enrollmentType = enrollmentType;
    return this;
  }

   /**
   * Enrollment Type - Explicit (E)/Convenience (C). If this field is not passed it will be treated as Implicit.
   * @return enrollmentType
  **/
  @javax.annotation.Nullable
  public EnrollmentTypeEnum getEnrollmentType() {
    return enrollmentType;
  }


  public void setEnrollmentType(EnrollmentTypeEnum enrollmentType) {
    this.enrollmentType = enrollmentType;
  }


  public CustomerRegistrationResponse autoEnrollFlag(AutoEnrollFlagEnum autoEnrollFlag) {
    
    this.autoEnrollFlag = autoEnrollFlag;
    return this;
  }

   /**
   * A - if auto enroll , C - Conveneince enroll, Y - previously enrolled
   * @return autoEnrollFlag
  **/
  @javax.annotation.Nullable
  public AutoEnrollFlagEnum getAutoEnrollFlag() {
    return autoEnrollFlag;
  }


  public void setAutoEnrollFlag(AutoEnrollFlagEnum autoEnrollFlag) {
    this.autoEnrollFlag = autoEnrollFlag;
  }


  public CustomerRegistrationResponse cardClass(String cardClass) {
    
    this.cardClass = cardClass;
    return this;
  }

   /**
   * This is an extension of Level Code.
   * @return cardClass
  **/
  @javax.annotation.Nullable
  public String getCardClass() {
    return cardClass;
  }


  public void setCardClass(String cardClass) {
    this.cardClass = cardClass;
  }


  public CustomerRegistrationResponse notificationStatus(String notificationStatus) {
    
    this.notificationStatus = notificationStatus;
    return this;
  }

   /**
   * 
   * @return notificationStatus
  **/
  @javax.annotation.Nullable
  public String getNotificationStatus() {
    return notificationStatus;
  }


  public void setNotificationStatus(String notificationStatus) {
    this.notificationStatus = notificationStatus;
  }


  public CustomerRegistrationResponse createdSync(String createdSync) {
    
    this.createdSync = createdSync;
    return this;
  }

   /**
   * Get createdSync
   * @return createdSync
  **/
  @javax.annotation.Nullable
  public String getCreatedSync() {
    return createdSync;
  }


  public void setCreatedSync(String createdSync) {
    this.createdSync = createdSync;
  }


  public CustomerRegistrationResponse updatedSync(String updatedSync) {
    
    this.updatedSync = updatedSync;
    return this;
  }

   /**
   * Get updatedSync
   * @return updatedSync
  **/
  @javax.annotation.Nullable
  public String getUpdatedSync() {
    return updatedSync;
  }


  public void setUpdatedSync(String updatedSync) {
    this.updatedSync = updatedSync;
  }


  public CustomerRegistrationResponse description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Summary of the Customer Registration response
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CustomerRegistrationResponse customerSequenceNo(String customerSequenceNo) {
    
    this.customerSequenceNo = customerSequenceNo;
    return this;
  }

   /**
   * Sequence number of the customers
   * @return customerSequenceNo
  **/
  @javax.annotation.Nullable
  public String getCustomerSequenceNo() {
    return customerSequenceNo;
  }


  public void setCustomerSequenceNo(String customerSequenceNo) {
    this.customerSequenceNo = customerSequenceNo;
  }


  public CustomerRegistrationResponse customer(CustomerAndAudit customer) {
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  public CustomerAndAudit getCustomer() {
    return customer;
  }


  public void setCustomer(CustomerAndAudit customer) {
    this.customer = customer;
  }


  public CustomerRegistrationResponse account(List<AccountAndAudit> account) {
    
    this.account = account;
    return this;
  }

  public CustomerRegistrationResponse addAccountItem(AccountAndAudit accountItem) {
    if (this.account == null) {
      this.account = new ArrayList<>();
    }
    this.account.add(accountItem);
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable
  public List<AccountAndAudit> getAccount() {
    return account;
  }


  public void setAccount(List<AccountAndAudit> account) {
    this.account = account;
  }


  public CustomerRegistrationResponse accountOnboarding(List<AccountOnboardingAndAudit> accountOnboarding) {
    
    this.accountOnboarding = accountOnboarding;
    return this;
  }

  public CustomerRegistrationResponse addAccountOnboardingItem(AccountOnboardingAndAudit accountOnboardingItem) {
    if (this.accountOnboarding == null) {
      this.accountOnboarding = new ArrayList<>();
    }
    this.accountOnboarding.add(accountOnboardingItem);
    return this;
  }

   /**
   * Get accountOnboarding
   * @return accountOnboarding
  **/
  @javax.annotation.Nullable
  public List<AccountOnboardingAndAudit> getAccountOnboarding() {
    return accountOnboarding;
  }


  public void setAccountOnboarding(List<AccountOnboardingAndAudit> accountOnboarding) {
    this.accountOnboarding = accountOnboarding;
  }


  public CustomerRegistrationResponse address(List<AddressAndAudit> address) {
    
    this.address = address;
    return this;
  }

  public CustomerRegistrationResponse addAddressItem(AddressAndAudit addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public List<AddressAndAudit> getAddress() {
    return address;
  }


  public void setAddress(List<AddressAndAudit> address) {
    this.address = address;
  }


  public CustomerRegistrationResponse email(List<EmailAndAudit> email) {
    
    this.email = email;
    return this;
  }

  public CustomerRegistrationResponse addEmailItem(EmailAndAudit emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  public List<EmailAndAudit> getEmail() {
    return email;
  }


  public void setEmail(List<EmailAndAudit> email) {
    this.email = email;
  }


  public CustomerRegistrationResponse phone(List<PhoneAndAudit> phone) {
    
    this.phone = phone;
    return this;
  }

  public CustomerRegistrationResponse addPhoneItem(PhoneAndAudit phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<>();
    }
    this.phone.add(phoneItem);
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nullable
  public List<PhoneAndAudit> getPhone() {
    return phone;
  }


  public void setPhone(List<PhoneAndAudit> phone) {
    this.phone = phone;
  }


  public CustomerRegistrationResponse security(List<SecurityQueAndAnsAndAudit> security) {
    
    this.security = security;
    return this;
  }

  public CustomerRegistrationResponse addSecurityItem(SecurityQueAndAnsAndAudit securityItem) {
    if (this.security == null) {
      this.security = new ArrayList<>();
    }
    this.security.add(securityItem);
    return this;
  }

   /**
   * Get security
   * @return security
  **/
  @javax.annotation.Nullable
  public List<SecurityQueAndAnsAndAudit> getSecurity() {
    return security;
  }


  public void setSecurity(List<SecurityQueAndAnsAndAudit> security) {
    this.security = security;
  }


  public CustomerRegistrationResponse fundingSources(List<FundingSourceAndAudit> fundingSources) {
    
    this.fundingSources = fundingSources;
    return this;
  }

  public CustomerRegistrationResponse addFundingSourcesItem(FundingSourceAndAudit fundingSourcesItem) {
    if (this.fundingSources == null) {
      this.fundingSources = new ArrayList<>();
    }
    this.fundingSources.add(fundingSourcesItem);
    return this;
  }

   /**
   * Get fundingSources
   * @return fundingSources
  **/
  @javax.annotation.Nullable
  public List<FundingSourceAndAudit> getFundingSources() {
    return fundingSources;
  }


  public void setFundingSources(List<FundingSourceAndAudit> fundingSources) {
    this.fundingSources = fundingSources;
  }


  public CustomerRegistrationResponse preferences(PreferencesAndAudit preferences) {
    
    this.preferences = preferences;
    return this;
  }

   /**
   * Get preferences
   * @return preferences
  **/
  @javax.annotation.Nullable
  public PreferencesAndAudit getPreferences() {
    return preferences;
  }


  public void setPreferences(PreferencesAndAudit preferences) {
    this.preferences = preferences;
  }


  public CustomerRegistrationResponse kyc(List<KycAndAudit> kyc) {
    
    this.kyc = kyc;
    return this;
  }

  public CustomerRegistrationResponse addKycItem(KycAndAudit kycItem) {
    if (this.kyc == null) {
      this.kyc = new ArrayList<>();
    }
    this.kyc.add(kycItem);
    return this;
  }

   /**
   * Get kyc
   * @return kyc
  **/
  @javax.annotation.Nullable
  public List<KycAndAudit> getKyc() {
    return kyc;
  }


  public void setKyc(List<KycAndAudit> kyc) {
    this.kyc = kyc;
  }


  public CustomerRegistrationResponse customerKycDetails(List<CustomerKycDetailAndAudit> customerKycDetails) {
    
    this.customerKycDetails = customerKycDetails;
    return this;
  }

  public CustomerRegistrationResponse addCustomerKycDetailsItem(CustomerKycDetailAndAudit customerKycDetailsItem) {
    if (this.customerKycDetails == null) {
      this.customerKycDetails = new ArrayList<>();
    }
    this.customerKycDetails.add(customerKycDetailsItem);
    return this;
  }

   /**
   * Get customerKycDetails
   * @return customerKycDetails
  **/
  @javax.annotation.Nullable
  public List<CustomerKycDetailAndAudit> getCustomerKycDetails() {
    return customerKycDetails;
  }


  public void setCustomerKycDetails(List<CustomerKycDetailAndAudit> customerKycDetails) {
    this.customerKycDetails = customerKycDetails;
  }


  public CustomerRegistrationResponse customerVerificationDetails(List<CustomerVerificationDetailAndAudit> customerVerificationDetails) {
    
    this.customerVerificationDetails = customerVerificationDetails;
    return this;
  }

  public CustomerRegistrationResponse addCustomerVerificationDetailsItem(CustomerVerificationDetailAndAudit customerVerificationDetailsItem) {
    if (this.customerVerificationDetails == null) {
      this.customerVerificationDetails = new ArrayList<>();
    }
    this.customerVerificationDetails.add(customerVerificationDetailsItem);
    return this;
  }

   /**
   * Get customerVerificationDetails
   * @return customerVerificationDetails
  **/
  @javax.annotation.Nullable
  public List<CustomerVerificationDetailAndAudit> getCustomerVerificationDetails() {
    return customerVerificationDetails;
  }


  public void setCustomerVerificationDetails(List<CustomerVerificationDetailAndAudit> customerVerificationDetails) {
    this.customerVerificationDetails = customerVerificationDetails;
  }


  public CustomerRegistrationResponse customerReceiver(List<CustomerReceiverAndAudit> customerReceiver) {
    
    this.customerReceiver = customerReceiver;
    return this;
  }

  public CustomerRegistrationResponse addCustomerReceiverItem(CustomerReceiverAndAudit customerReceiverItem) {
    if (this.customerReceiver == null) {
      this.customerReceiver = new ArrayList<>();
    }
    this.customerReceiver.add(customerReceiverItem);
    return this;
  }

   /**
   * Get customerReceiver
   * @return customerReceiver
  **/
  @javax.annotation.Nullable
  public List<CustomerReceiverAndAudit> getCustomerReceiver() {
    return customerReceiver;
  }


  public void setCustomerReceiver(List<CustomerReceiverAndAudit> customerReceiver) {
    this.customerReceiver = customerReceiver;
  }


  public CustomerRegistrationResponse uab(List<UabAndAudit> uab) {
    
    this.uab = uab;
    return this;
  }

  public CustomerRegistrationResponse addUabItem(UabAndAudit uabItem) {
    if (this.uab == null) {
      this.uab = new ArrayList<>();
    }
    this.uab.add(uabItem);
    return this;
  }

   /**
   * Get uab
   * @return uab
  **/
  @javax.annotation.Nullable
  public List<UabAndAudit> getUab() {
    return uab;
  }


  public void setUab(List<UabAndAudit> uab) {
    this.uab = uab;
  }


  public CustomerRegistrationResponse customerUsageStatistics(CustomerUsageStatisticsAndAudit customerUsageStatistics) {
    
    this.customerUsageStatistics = customerUsageStatistics;
    return this;
  }

   /**
   * Get customerUsageStatistics
   * @return customerUsageStatistics
  **/
  @javax.annotation.Nullable
  public CustomerUsageStatisticsAndAudit getCustomerUsageStatistics() {
    return customerUsageStatistics;
  }


  public void setCustomerUsageStatistics(CustomerUsageStatisticsAndAudit customerUsageStatistics) {
    this.customerUsageStatistics = customerUsageStatistics;
  }


  public CustomerRegistrationResponse partner(CustomerPartnerAndAudit partner) {
    
    this.partner = partner;
    return this;
  }

   /**
   * Get partner
   * @return partner
  **/
  @javax.annotation.Nullable
  public CustomerPartnerAndAudit getPartner() {
    return partner;
  }


  public void setPartner(CustomerPartnerAndAudit partner) {
    this.partner = partner;
  }


  public CustomerRegistrationResponse customerAccountRepresentative(List<CustomerAccountRepresentativeAndAudit> customerAccountRepresentative) {
    
    this.customerAccountRepresentative = customerAccountRepresentative;
    return this;
  }

  public CustomerRegistrationResponse addCustomerAccountRepresentativeItem(CustomerAccountRepresentativeAndAudit customerAccountRepresentativeItem) {
    if (this.customerAccountRepresentative == null) {
      this.customerAccountRepresentative = new ArrayList<>();
    }
    this.customerAccountRepresentative.add(customerAccountRepresentativeItem);
    return this;
  }

   /**
   * Get customerAccountRepresentative
   * @return customerAccountRepresentative
  **/
  @javax.annotation.Nullable
  public List<CustomerAccountRepresentativeAndAudit> getCustomerAccountRepresentative() {
    return customerAccountRepresentative;
  }


  public void setCustomerAccountRepresentative(List<CustomerAccountRepresentativeAndAudit> customerAccountRepresentative) {
    this.customerAccountRepresentative = customerAccountRepresentative;
  }


  public CustomerRegistrationResponse customerServiceProvider(List<CustomerServiceProviderAndAudit> customerServiceProvider) {
    
    this.customerServiceProvider = customerServiceProvider;
    return this;
  }

  public CustomerRegistrationResponse addCustomerServiceProviderItem(CustomerServiceProviderAndAudit customerServiceProviderItem) {
    if (this.customerServiceProvider == null) {
      this.customerServiceProvider = new ArrayList<>();
    }
    this.customerServiceProvider.add(customerServiceProviderItem);
    return this;
  }

   /**
   * Get customerServiceProvider
   * @return customerServiceProvider
  **/
  @javax.annotation.Nullable
  public List<CustomerServiceProviderAndAudit> getCustomerServiceProvider() {
    return customerServiceProvider;
  }


  public void setCustomerServiceProvider(List<CustomerServiceProviderAndAudit> customerServiceProvider) {
    this.customerServiceProvider = customerServiceProvider;
  }


  public CustomerRegistrationResponse customerDevices(List<CustomerDeviceAndAudit> customerDevices) {
    
    this.customerDevices = customerDevices;
    return this;
  }

  public CustomerRegistrationResponse addCustomerDevicesItem(CustomerDeviceAndAudit customerDevicesItem) {
    if (this.customerDevices == null) {
      this.customerDevices = new ArrayList<>();
    }
    this.customerDevices.add(customerDevicesItem);
    return this;
  }

   /**
   * Get customerDevices
   * @return customerDevices
  **/
  @javax.annotation.Nullable
  public List<CustomerDeviceAndAudit> getCustomerDevices() {
    return customerDevices;
  }


  public void setCustomerDevices(List<CustomerDeviceAndAudit> customerDevices) {
    this.customerDevices = customerDevices;
  }


  public CustomerRegistrationResponse customerMiscFlags(List<CustomerMiscFlagsAndAudit> customerMiscFlags) {
    
    this.customerMiscFlags = customerMiscFlags;
    return this;
  }

  public CustomerRegistrationResponse addCustomerMiscFlagsItem(CustomerMiscFlagsAndAudit customerMiscFlagsItem) {
    if (this.customerMiscFlags == null) {
      this.customerMiscFlags = new ArrayList<>();
    }
    this.customerMiscFlags.add(customerMiscFlagsItem);
    return this;
  }

   /**
   * Get customerMiscFlags
   * @return customerMiscFlags
  **/
  @javax.annotation.Nullable
  public List<CustomerMiscFlagsAndAudit> getCustomerMiscFlags() {
    return customerMiscFlags;
  }


  public void setCustomerMiscFlags(List<CustomerMiscFlagsAndAudit> customerMiscFlags) {
    this.customerMiscFlags = customerMiscFlags;
  }


  public CustomerRegistrationResponse profileAttributes(ProfileAttributesAndAudit profileAttributes) {
    
    this.profileAttributes = profileAttributes;
    return this;
  }

   /**
   * Get profileAttributes
   * @return profileAttributes
  **/
  @javax.annotation.Nullable
  public ProfileAttributesAndAudit getProfileAttributes() {
    return profileAttributes;
  }


  public void setProfileAttributes(ProfileAttributesAndAudit profileAttributes) {
    this.profileAttributes = profileAttributes;
  }


  public CustomerRegistrationResponse customerRole(CustomerRoleAndAudit customerRole) {
    
    this.customerRole = customerRole;
    return this;
  }

   /**
   * Get customerRole
   * @return customerRole
  **/
  @javax.annotation.Nullable
  public CustomerRoleAndAudit getCustomerRole() {
    return customerRole;
  }


  public void setCustomerRole(CustomerRoleAndAudit customerRole) {
    this.customerRole = customerRole;
  }


  public CustomerRegistrationResponse prepaid(PrepaidAndAudit prepaid) {
    
    this.prepaid = prepaid;
    return this;
  }

   /**
   * Get prepaid
   * @return prepaid
  **/
  @javax.annotation.Nullable
  public PrepaidAndAudit getPrepaid() {
    return prepaid;
  }


  public void setPrepaid(PrepaidAndAudit prepaid) {
    this.prepaid = prepaid;
  }


  public CustomerRegistrationResponse segmentationCodes(SegmentationCodesAndAudit segmentationCodes) {
    
    this.segmentationCodes = segmentationCodes;
    return this;
  }

   /**
   * Get segmentationCodes
   * @return segmentationCodes
  **/
  @javax.annotation.Nullable
  public SegmentationCodesAndAudit getSegmentationCodes() {
    return segmentationCodes;
  }


  public void setSegmentationCodes(SegmentationCodesAndAudit segmentationCodes) {
    this.segmentationCodes = segmentationCodes;
  }


  public CustomerRegistrationResponse pepProfileEntities(PepProfileEntitiesAndAudit pepProfileEntities) {
    
    this.pepProfileEntities = pepProfileEntities;
    return this;
  }

   /**
   * Get pepProfileEntities
   * @return pepProfileEntities
  **/
  @javax.annotation.Nullable
  public PepProfileEntitiesAndAudit getPepProfileEntities() {
    return pepProfileEntities;
  }


  public void setPepProfileEntities(PepProfileEntitiesAndAudit pepProfileEntities) {
    this.pepProfileEntities = pepProfileEntities;
  }


  public CustomerRegistrationResponse ucbDisplayFlag(UcbDisplayFlagAndAudit ucbDisplayFlag) {
    
    this.ucbDisplayFlag = ucbDisplayFlag;
    return this;
  }

   /**
   * Get ucbDisplayFlag
   * @return ucbDisplayFlag
  **/
  @javax.annotation.Nullable
  public UcbDisplayFlagAndAudit getUcbDisplayFlag() {
    return ucbDisplayFlag;
  }


  public void setUcbDisplayFlag(UcbDisplayFlagAndAudit ucbDisplayFlag) {
    this.ucbDisplayFlag = ucbDisplayFlag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerRegistrationResponse customerRegistrationResponse = (CustomerRegistrationResponse) o;
    return Objects.equals(this.header, customerRegistrationResponse.header) &&
        Objects.equals(this.responseStatus, customerRegistrationResponse.responseStatus) &&
        Objects.equals(this.customerUmn, customerRegistrationResponse.customerUmn) &&
        Objects.equals(this.convenienceNo, customerRegistrationResponse.convenienceNo) &&
        Objects.equals(this.leadId, customerRegistrationResponse.leadId) &&
        Objects.equals(this.customerAlreadyRegistered, customerRegistrationResponse.customerAlreadyRegistered) &&
        Objects.equals(this.doNotDisplay, customerRegistrationResponse.doNotDisplay) &&
        Objects.equals(this.isConvenience, customerRegistrationResponse.isConvenience) &&
        Objects.equals(this.levelCode, customerRegistrationResponse.levelCode) &&
        Objects.equals(this.ruleId, customerRegistrationResponse.ruleId) &&
        Objects.equals(this.enrollmentType, customerRegistrationResponse.enrollmentType) &&
        Objects.equals(this.autoEnrollFlag, customerRegistrationResponse.autoEnrollFlag) &&
        Objects.equals(this.cardClass, customerRegistrationResponse.cardClass) &&
        Objects.equals(this.notificationStatus, customerRegistrationResponse.notificationStatus) &&
        Objects.equals(this.createdSync, customerRegistrationResponse.createdSync) &&
        Objects.equals(this.updatedSync, customerRegistrationResponse.updatedSync) &&
        Objects.equals(this.description, customerRegistrationResponse.description) &&
        Objects.equals(this.customerSequenceNo, customerRegistrationResponse.customerSequenceNo) &&
        Objects.equals(this.customer, customerRegistrationResponse.customer) &&
        Objects.equals(this.account, customerRegistrationResponse.account) &&
        Objects.equals(this.accountOnboarding, customerRegistrationResponse.accountOnboarding) &&
        Objects.equals(this.address, customerRegistrationResponse.address) &&
        Objects.equals(this.email, customerRegistrationResponse.email) &&
        Objects.equals(this.phone, customerRegistrationResponse.phone) &&
        Objects.equals(this.security, customerRegistrationResponse.security) &&
        Objects.equals(this.fundingSources, customerRegistrationResponse.fundingSources) &&
        Objects.equals(this.preferences, customerRegistrationResponse.preferences) &&
        Objects.equals(this.kyc, customerRegistrationResponse.kyc) &&
        Objects.equals(this.customerKycDetails, customerRegistrationResponse.customerKycDetails) &&
        Objects.equals(this.customerVerificationDetails, customerRegistrationResponse.customerVerificationDetails) &&
        Objects.equals(this.customerReceiver, customerRegistrationResponse.customerReceiver) &&
        Objects.equals(this.uab, customerRegistrationResponse.uab) &&
        Objects.equals(this.customerUsageStatistics, customerRegistrationResponse.customerUsageStatistics) &&
        Objects.equals(this.partner, customerRegistrationResponse.partner) &&
        Objects.equals(this.customerAccountRepresentative, customerRegistrationResponse.customerAccountRepresentative) &&
        Objects.equals(this.customerServiceProvider, customerRegistrationResponse.customerServiceProvider) &&
        Objects.equals(this.customerDevices, customerRegistrationResponse.customerDevices) &&
        Objects.equals(this.customerMiscFlags, customerRegistrationResponse.customerMiscFlags) &&
        Objects.equals(this.profileAttributes, customerRegistrationResponse.profileAttributes) &&
        Objects.equals(this.customerRole, customerRegistrationResponse.customerRole) &&
        Objects.equals(this.prepaid, customerRegistrationResponse.prepaid) &&
        Objects.equals(this.segmentationCodes, customerRegistrationResponse.segmentationCodes) &&
        Objects.equals(this.pepProfileEntities, customerRegistrationResponse.pepProfileEntities) &&
        Objects.equals(this.ucbDisplayFlag, customerRegistrationResponse.ucbDisplayFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, responseStatus, customerUmn, convenienceNo, leadId, customerAlreadyRegistered, doNotDisplay, isConvenience, levelCode, ruleId, enrollmentType, autoEnrollFlag, cardClass, notificationStatus, createdSync, updatedSync, description, customerSequenceNo, customer, account, accountOnboarding, address, email, phone, security, fundingSources, preferences, kyc, customerKycDetails, customerVerificationDetails, customerReceiver, uab, customerUsageStatistics, partner, customerAccountRepresentative, customerServiceProvider, customerDevices, customerMiscFlags, profileAttributes, customerRole, prepaid, segmentationCodes, pepProfileEntities, ucbDisplayFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerRegistrationResponse {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    responseStatus: ").append(toIndentedString(responseStatus)).append("\n");
    sb.append("    customerUmn: ").append(toIndentedString(customerUmn)).append("\n");
    sb.append("    convenienceNo: ").append(toIndentedString(convenienceNo)).append("\n");
    sb.append("    leadId: ").append(toIndentedString(leadId)).append("\n");
    sb.append("    customerAlreadyRegistered: ").append(toIndentedString(customerAlreadyRegistered)).append("\n");
    sb.append("    doNotDisplay: ").append(toIndentedString(doNotDisplay)).append("\n");
    sb.append("    isConvenience: ").append(toIndentedString(isConvenience)).append("\n");
    sb.append("    levelCode: ").append(toIndentedString(levelCode)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    enrollmentType: ").append(toIndentedString(enrollmentType)).append("\n");
    sb.append("    autoEnrollFlag: ").append(toIndentedString(autoEnrollFlag)).append("\n");
    sb.append("    cardClass: ").append(toIndentedString(cardClass)).append("\n");
    sb.append("    notificationStatus: ").append(toIndentedString(notificationStatus)).append("\n");
    sb.append("    createdSync: ").append(toIndentedString(createdSync)).append("\n");
    sb.append("    updatedSync: ").append(toIndentedString(updatedSync)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    customerSequenceNo: ").append(toIndentedString(customerSequenceNo)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    accountOnboarding: ").append(toIndentedString(accountOnboarding)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    fundingSources: ").append(toIndentedString(fundingSources)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    kyc: ").append(toIndentedString(kyc)).append("\n");
    sb.append("    customerKycDetails: ").append(toIndentedString(customerKycDetails)).append("\n");
    sb.append("    customerVerificationDetails: ").append(toIndentedString(customerVerificationDetails)).append("\n");
    sb.append("    customerReceiver: ").append(toIndentedString(customerReceiver)).append("\n");
    sb.append("    uab: ").append(toIndentedString(uab)).append("\n");
    sb.append("    customerUsageStatistics: ").append(toIndentedString(customerUsageStatistics)).append("\n");
    sb.append("    partner: ").append(toIndentedString(partner)).append("\n");
    sb.append("    customerAccountRepresentative: ").append(toIndentedString(customerAccountRepresentative)).append("\n");
    sb.append("    customerServiceProvider: ").append(toIndentedString(customerServiceProvider)).append("\n");
    sb.append("    customerDevices: ").append(toIndentedString(customerDevices)).append("\n");
    sb.append("    customerMiscFlags: ").append(toIndentedString(customerMiscFlags)).append("\n");
    sb.append("    profileAttributes: ").append(toIndentedString(profileAttributes)).append("\n");
    sb.append("    customerRole: ").append(toIndentedString(customerRole)).append("\n");
    sb.append("    prepaid: ").append(toIndentedString(prepaid)).append("\n");
    sb.append("    segmentationCodes: ").append(toIndentedString(segmentationCodes)).append("\n");
    sb.append("    pepProfileEntities: ").append(toIndentedString(pepProfileEntities)).append("\n");
    sb.append("    ucbDisplayFlag: ").append(toIndentedString(ucbDisplayFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("responseStatus");
    openapiFields.add("customerUmn");
    openapiFields.add("convenienceNo");
    openapiFields.add("leadId");
    openapiFields.add("customerAlreadyRegistered");
    openapiFields.add("doNotDisplay");
    openapiFields.add("isConvenience");
    openapiFields.add("levelCode");
    openapiFields.add("ruleId");
    openapiFields.add("enrollmentType");
    openapiFields.add("autoEnrollFlag");
    openapiFields.add("cardClass");
    openapiFields.add("notificationStatus");
    openapiFields.add("createdSync");
    openapiFields.add("updatedSync");
    openapiFields.add("description");
    openapiFields.add("customerSequenceNo");
    openapiFields.add("customer");
    openapiFields.add("account");
    openapiFields.add("accountOnboarding");
    openapiFields.add("address");
    openapiFields.add("email");
    openapiFields.add("phone");
    openapiFields.add("security");
    openapiFields.add("fundingSources");
    openapiFields.add("preferences");
    openapiFields.add("kyc");
    openapiFields.add("customerKycDetails");
    openapiFields.add("customerVerificationDetails");
    openapiFields.add("customerReceiver");
    openapiFields.add("uab");
    openapiFields.add("customerUsageStatistics");
    openapiFields.add("partner");
    openapiFields.add("customerAccountRepresentative");
    openapiFields.add("customerServiceProvider");
    openapiFields.add("customerDevices");
    openapiFields.add("customerMiscFlags");
    openapiFields.add("profileAttributes");
    openapiFields.add("customerRole");
    openapiFields.add("prepaid");
    openapiFields.add("segmentationCodes");
    openapiFields.add("pepProfileEntities");
    openapiFields.add("ucbDisplayFlag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerRegistrationResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerRegistrationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerRegistrationResponse is not found in the empty JSON string", CustomerRegistrationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerRegistrationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerRegistrationResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `header`
      if (jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) {
        Header.validateJsonObject(jsonObj.getAsJsonObject("header"));
      }
      // validate the optional field `responseStatus`
      if (jsonObj.get("responseStatus") != null && !jsonObj.get("responseStatus").isJsonNull()) {
        ResponseStatus.validateJsonObject(jsonObj.getAsJsonObject("responseStatus"));
      }
      if ((jsonObj.get("customerUmn") != null && !jsonObj.get("customerUmn").isJsonNull()) && !jsonObj.get("customerUmn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerUmn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerUmn").toString()));
      }
      if ((jsonObj.get("convenienceNo") != null && !jsonObj.get("convenienceNo").isJsonNull()) && !jsonObj.get("convenienceNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convenienceNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convenienceNo").toString()));
      }
      if ((jsonObj.get("levelCode") != null && !jsonObj.get("levelCode").isJsonNull()) && !jsonObj.get("levelCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `levelCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("levelCode").toString()));
      }
      if ((jsonObj.get("ruleId") != null && !jsonObj.get("ruleId").isJsonNull()) && !jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
      if ((jsonObj.get("enrollmentType") != null && !jsonObj.get("enrollmentType").isJsonNull()) && !jsonObj.get("enrollmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentType").toString()));
      }
      if ((jsonObj.get("autoEnrollFlag") != null && !jsonObj.get("autoEnrollFlag").isJsonNull()) && !jsonObj.get("autoEnrollFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoEnrollFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoEnrollFlag").toString()));
      }
      if ((jsonObj.get("cardClass") != null && !jsonObj.get("cardClass").isJsonNull()) && !jsonObj.get("cardClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardClass").toString()));
      }
      if ((jsonObj.get("notificationStatus") != null && !jsonObj.get("notificationStatus").isJsonNull()) && !jsonObj.get("notificationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationStatus").toString()));
      }
      if ((jsonObj.get("createdSync") != null && !jsonObj.get("createdSync").isJsonNull()) && !jsonObj.get("createdSync").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdSync` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdSync").toString()));
      }
      if ((jsonObj.get("updatedSync") != null && !jsonObj.get("updatedSync").isJsonNull()) && !jsonObj.get("updatedSync").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedSync` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedSync").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("customerSequenceNo") != null && !jsonObj.get("customerSequenceNo").isJsonNull()) && !jsonObj.get("customerSequenceNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerSequenceNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerSequenceNo").toString()));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        CustomerAndAudit.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        JsonArray jsonArrayaccount = jsonObj.getAsJsonArray("account");
        if (jsonArrayaccount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("account").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `account` to be an array in the JSON string but got `%s`", jsonObj.get("account").toString()));
          }

          // validate the optional field `account` (array)
          for (int i = 0; i < jsonArrayaccount.size(); i++) {
            AccountAndAudit.validateJsonObject(jsonArrayaccount.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("accountOnboarding") != null && !jsonObj.get("accountOnboarding").isJsonNull()) {
        JsonArray jsonArrayaccountOnboarding = jsonObj.getAsJsonArray("accountOnboarding");
        if (jsonArrayaccountOnboarding != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accountOnboarding").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accountOnboarding` to be an array in the JSON string but got `%s`", jsonObj.get("accountOnboarding").toString()));
          }

          // validate the optional field `accountOnboarding` (array)
          for (int i = 0; i < jsonArrayaccountOnboarding.size(); i++) {
            AccountOnboardingAndAudit.validateJsonObject(jsonArrayaccountOnboarding.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
          }

          // validate the optional field `address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            AddressAndAudit.validateJsonObject(jsonArrayaddress.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) {
        JsonArray jsonArrayemail = jsonObj.getAsJsonArray("email");
        if (jsonArrayemail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("email").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `email` to be an array in the JSON string but got `%s`", jsonObj.get("email").toString()));
          }

          // validate the optional field `email` (array)
          for (int i = 0; i < jsonArrayemail.size(); i++) {
            EmailAndAudit.validateJsonObject(jsonArrayemail.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) {
        JsonArray jsonArrayphone = jsonObj.getAsJsonArray("phone");
        if (jsonArrayphone != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phone").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phone` to be an array in the JSON string but got `%s`", jsonObj.get("phone").toString()));
          }

          // validate the optional field `phone` (array)
          for (int i = 0; i < jsonArrayphone.size(); i++) {
            PhoneAndAudit.validateJsonObject(jsonArrayphone.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("security") != null && !jsonObj.get("security").isJsonNull()) {
        JsonArray jsonArraysecurity = jsonObj.getAsJsonArray("security");
        if (jsonArraysecurity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("security").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `security` to be an array in the JSON string but got `%s`", jsonObj.get("security").toString()));
          }

          // validate the optional field `security` (array)
          for (int i = 0; i < jsonArraysecurity.size(); i++) {
            SecurityQueAndAnsAndAudit.validateJsonObject(jsonArraysecurity.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("fundingSources") != null && !jsonObj.get("fundingSources").isJsonNull()) {
        JsonArray jsonArrayfundingSources = jsonObj.getAsJsonArray("fundingSources");
        if (jsonArrayfundingSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fundingSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fundingSources` to be an array in the JSON string but got `%s`", jsonObj.get("fundingSources").toString()));
          }

          // validate the optional field `fundingSources` (array)
          for (int i = 0; i < jsonArrayfundingSources.size(); i++) {
            FundingSourceAndAudit.validateJsonObject(jsonArrayfundingSources.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `preferences`
      if (jsonObj.get("preferences") != null && !jsonObj.get("preferences").isJsonNull()) {
        PreferencesAndAudit.validateJsonObject(jsonObj.getAsJsonObject("preferences"));
      }
      if (jsonObj.get("kyc") != null && !jsonObj.get("kyc").isJsonNull()) {
        JsonArray jsonArraykyc = jsonObj.getAsJsonArray("kyc");
        if (jsonArraykyc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("kyc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `kyc` to be an array in the JSON string but got `%s`", jsonObj.get("kyc").toString()));
          }

          // validate the optional field `kyc` (array)
          for (int i = 0; i < jsonArraykyc.size(); i++) {
            KycAndAudit.validateJsonObject(jsonArraykyc.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerKycDetails") != null && !jsonObj.get("customerKycDetails").isJsonNull()) {
        JsonArray jsonArraycustomerKycDetails = jsonObj.getAsJsonArray("customerKycDetails");
        if (jsonArraycustomerKycDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerKycDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerKycDetails` to be an array in the JSON string but got `%s`", jsonObj.get("customerKycDetails").toString()));
          }

          // validate the optional field `customerKycDetails` (array)
          for (int i = 0; i < jsonArraycustomerKycDetails.size(); i++) {
            CustomerKycDetailAndAudit.validateJsonObject(jsonArraycustomerKycDetails.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerVerificationDetails") != null && !jsonObj.get("customerVerificationDetails").isJsonNull()) {
        JsonArray jsonArraycustomerVerificationDetails = jsonObj.getAsJsonArray("customerVerificationDetails");
        if (jsonArraycustomerVerificationDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerVerificationDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerVerificationDetails` to be an array in the JSON string but got `%s`", jsonObj.get("customerVerificationDetails").toString()));
          }

          // validate the optional field `customerVerificationDetails` (array)
          for (int i = 0; i < jsonArraycustomerVerificationDetails.size(); i++) {
            CustomerVerificationDetailAndAudit.validateJsonObject(jsonArraycustomerVerificationDetails.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerReceiver") != null && !jsonObj.get("customerReceiver").isJsonNull()) {
        JsonArray jsonArraycustomerReceiver = jsonObj.getAsJsonArray("customerReceiver");
        if (jsonArraycustomerReceiver != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerReceiver").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerReceiver` to be an array in the JSON string but got `%s`", jsonObj.get("customerReceiver").toString()));
          }

          // validate the optional field `customerReceiver` (array)
          for (int i = 0; i < jsonArraycustomerReceiver.size(); i++) {
            CustomerReceiverAndAudit.validateJsonObject(jsonArraycustomerReceiver.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("uab") != null && !jsonObj.get("uab").isJsonNull()) {
        JsonArray jsonArrayuab = jsonObj.getAsJsonArray("uab");
        if (jsonArrayuab != null) {
          // ensure the json data is an array
          if (!jsonObj.get("uab").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `uab` to be an array in the JSON string but got `%s`", jsonObj.get("uab").toString()));
          }

          // validate the optional field `uab` (array)
          for (int i = 0; i < jsonArrayuab.size(); i++) {
            UabAndAudit.validateJsonObject(jsonArrayuab.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `customerUsageStatistics`
      if (jsonObj.get("customerUsageStatistics") != null && !jsonObj.get("customerUsageStatistics").isJsonNull()) {
        CustomerUsageStatisticsAndAudit.validateJsonObject(jsonObj.getAsJsonObject("customerUsageStatistics"));
      }
      // validate the optional field `partner`
      if (jsonObj.get("partner") != null && !jsonObj.get("partner").isJsonNull()) {
        CustomerPartnerAndAudit.validateJsonObject(jsonObj.getAsJsonObject("partner"));
      }
      if (jsonObj.get("customerAccountRepresentative") != null && !jsonObj.get("customerAccountRepresentative").isJsonNull()) {
        JsonArray jsonArraycustomerAccountRepresentative = jsonObj.getAsJsonArray("customerAccountRepresentative");
        if (jsonArraycustomerAccountRepresentative != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerAccountRepresentative").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerAccountRepresentative` to be an array in the JSON string but got `%s`", jsonObj.get("customerAccountRepresentative").toString()));
          }

          // validate the optional field `customerAccountRepresentative` (array)
          for (int i = 0; i < jsonArraycustomerAccountRepresentative.size(); i++) {
            CustomerAccountRepresentativeAndAudit.validateJsonObject(jsonArraycustomerAccountRepresentative.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerServiceProvider") != null && !jsonObj.get("customerServiceProvider").isJsonNull()) {
        JsonArray jsonArraycustomerServiceProvider = jsonObj.getAsJsonArray("customerServiceProvider");
        if (jsonArraycustomerServiceProvider != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerServiceProvider").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerServiceProvider` to be an array in the JSON string but got `%s`", jsonObj.get("customerServiceProvider").toString()));
          }

          // validate the optional field `customerServiceProvider` (array)
          for (int i = 0; i < jsonArraycustomerServiceProvider.size(); i++) {
            CustomerServiceProviderAndAudit.validateJsonObject(jsonArraycustomerServiceProvider.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerDevices") != null && !jsonObj.get("customerDevices").isJsonNull()) {
        JsonArray jsonArraycustomerDevices = jsonObj.getAsJsonArray("customerDevices");
        if (jsonArraycustomerDevices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerDevices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerDevices` to be an array in the JSON string but got `%s`", jsonObj.get("customerDevices").toString()));
          }

          // validate the optional field `customerDevices` (array)
          for (int i = 0; i < jsonArraycustomerDevices.size(); i++) {
            CustomerDeviceAndAudit.validateJsonObject(jsonArraycustomerDevices.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("customerMiscFlags") != null && !jsonObj.get("customerMiscFlags").isJsonNull()) {
        JsonArray jsonArraycustomerMiscFlags = jsonObj.getAsJsonArray("customerMiscFlags");
        if (jsonArraycustomerMiscFlags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerMiscFlags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerMiscFlags` to be an array in the JSON string but got `%s`", jsonObj.get("customerMiscFlags").toString()));
          }

          // validate the optional field `customerMiscFlags` (array)
          for (int i = 0; i < jsonArraycustomerMiscFlags.size(); i++) {
            CustomerMiscFlagsAndAudit.validateJsonObject(jsonArraycustomerMiscFlags.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `profileAttributes`
      if (jsonObj.get("profileAttributes") != null && !jsonObj.get("profileAttributes").isJsonNull()) {
        ProfileAttributesAndAudit.validateJsonObject(jsonObj.getAsJsonObject("profileAttributes"));
      }
      // validate the optional field `customerRole`
      if (jsonObj.get("customerRole") != null && !jsonObj.get("customerRole").isJsonNull()) {
        CustomerRoleAndAudit.validateJsonObject(jsonObj.getAsJsonObject("customerRole"));
      }
      // validate the optional field `prepaid`
      if (jsonObj.get("prepaid") != null && !jsonObj.get("prepaid").isJsonNull()) {
        PrepaidAndAudit.validateJsonObject(jsonObj.getAsJsonObject("prepaid"));
      }
      // validate the optional field `segmentationCodes`
      if (jsonObj.get("segmentationCodes") != null && !jsonObj.get("segmentationCodes").isJsonNull()) {
        SegmentationCodesAndAudit.validateJsonObject(jsonObj.getAsJsonObject("segmentationCodes"));
      }
      // validate the optional field `pepProfileEntities`
      if (jsonObj.get("pepProfileEntities") != null && !jsonObj.get("pepProfileEntities").isJsonNull()) {
        PepProfileEntitiesAndAudit.validateJsonObject(jsonObj.getAsJsonObject("pepProfileEntities"));
      }
      // validate the optional field `ucbDisplayFlag`
      if (jsonObj.get("ucbDisplayFlag") != null && !jsonObj.get("ucbDisplayFlag").isJsonNull()) {
        UcbDisplayFlagAndAudit.validateJsonObject(jsonObj.getAsJsonObject("ucbDisplayFlag"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerRegistrationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerRegistrationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerRegistrationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerRegistrationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerRegistrationResponse>() {
           @Override
           public void write(JsonWriter out, CustomerRegistrationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerRegistrationResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerRegistrationResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerRegistrationResponse
  * @throws IOException if the JSON string is invalid with respect to CustomerRegistrationResponse
  */
  public static CustomerRegistrationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerRegistrationResponse.class);
  }

 /**
  * Convert an instance of CustomerRegistrationResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

