/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * Uab
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class Uab {
  /**
   * UAB Type ID * 1 - PRIMARY * 2 - INSTANT NOTIFICATION * 99 - UABTypeOther 
   */
  @JsonAdapter(UabTypeIdEnum.Adapter.class)
  public enum UabTypeIdEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_99(99);

    private Integer value;

    UabTypeIdEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UabTypeIdEnum fromValue(Integer value) {
      for (UabTypeIdEnum b : UabTypeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UabTypeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UabTypeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UabTypeIdEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return UabTypeIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UAB_TYPE_ID = "uabTypeId";
  @SerializedName(SERIALIZED_NAME_UAB_TYPE_ID)
  private Integer uabTypeId;

  public static final String SERIALIZED_NAME_UAB_VALUE = "uabValue";
  @SerializedName(SERIALIZED_NAME_UAB_VALUE)
  private String uabValue;

  public static final String SERIALIZED_NAME_REFERENCE_FOR_UAB_TYPE_ID_OTHER = "referenceForUabTypeIdOther";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FOR_UAB_TYPE_ID_OTHER)
  private String referenceForUabTypeIdOther;

  public Uab() {
  }

  public Uab uabTypeId(Integer uabTypeId) {
    
    this.uabTypeId = uabTypeId;
    return this;
  }

   /**
   * UAB Type ID * 1 - PRIMARY * 2 - INSTANT NOTIFICATION * 99 - UABTypeOther 
   * @return uabTypeId
  **/
  @javax.annotation.Nonnull
  public Integer getUabTypeId() {
    return uabTypeId;
  }


  public void setUabTypeId(Integer uabTypeId) {
    this.uabTypeId = uabTypeId;
  }


  public Uab uabValue(String uabValue) {
    
    this.uabValue = uabValue;
    return this;
  }

   /**
   * UAB is Universal Address Buffer which contains Address, Phone and Email etc.
   * @return uabValue
  **/
  @javax.annotation.Nullable
  public String getUabValue() {
    return uabValue;
  }


  public void setUabValue(String uabValue) {
    this.uabValue = uabValue;
  }


  public Uab referenceForUabTypeIdOther(String referenceForUabTypeIdOther) {
    
    this.referenceForUabTypeIdOther = referenceForUabTypeIdOther;
    return this;
  }

   /**
   * When the UABTypeID 99 (Other) is selected, Client needs to send the reference/actual UABTypeID value in this element.
   * @return referenceForUabTypeIdOther
  **/
  @javax.annotation.Nullable
  public String getReferenceForUabTypeIdOther() {
    return referenceForUabTypeIdOther;
  }


  public void setReferenceForUabTypeIdOther(String referenceForUabTypeIdOther) {
    this.referenceForUabTypeIdOther = referenceForUabTypeIdOther;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Uab uab = (Uab) o;
    return Objects.equals(this.uabTypeId, uab.uabTypeId) &&
        Objects.equals(this.uabValue, uab.uabValue) &&
        Objects.equals(this.referenceForUabTypeIdOther, uab.referenceForUabTypeIdOther);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(uabTypeId, uabValue, referenceForUabTypeIdOther);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Uab {\n");
    sb.append("    uabTypeId: ").append(toIndentedString(uabTypeId)).append("\n");
    sb.append("    uabValue: ").append(toIndentedString(uabValue)).append("\n");
    sb.append("    referenceForUabTypeIdOther: ").append(toIndentedString(referenceForUabTypeIdOther)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uabTypeId");
    openapiFields.add("uabValue");
    openapiFields.add("referenceForUabTypeIdOther");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uabTypeId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Uab
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Uab.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Uab is not found in the empty JSON string", Uab.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Uab.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Uab` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Uab.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("uabValue") != null && !jsonObj.get("uabValue").isJsonNull()) && !jsonObj.get("uabValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uabValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uabValue").toString()));
      }
      if ((jsonObj.get("referenceForUabTypeIdOther") != null && !jsonObj.get("referenceForUabTypeIdOther").isJsonNull()) && !jsonObj.get("referenceForUabTypeIdOther").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceForUabTypeIdOther` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceForUabTypeIdOther").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Uab.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Uab' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Uab> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Uab.class));

       return (TypeAdapter<T>) new TypeAdapter<Uab>() {
           @Override
           public void write(JsonWriter out, Uab value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Uab read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Uab given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Uab
  * @throws IOException if the JSON string is invalid with respect to Uab
  */
  public static Uab fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Uab.class);
  }

 /**
  * Convert an instance of Uab to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

