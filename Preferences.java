/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Preferences
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class Preferences {
  /**
   * Customer’s preference for receiving an email. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptInForEmailEnum.Adapter.class)
  public enum OptInForEmailEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY(""),
    
    SPACE(" ");

    private String value;

    OptInForEmailEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptInForEmailEnum fromValue(String value) {
      for (OptInForEmailEnum b : OptInForEmailEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptInForEmailEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptInForEmailEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptInForEmailEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptInForEmailEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_IN_FOR_EMAIL = "optInForEmail";
  @SerializedName(SERIALIZED_NAME_OPT_IN_FOR_EMAIL)
  private OptInForEmailEnum optInForEmail;

  /**
   * Customer’s preference for receiving a direct mail. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptInForDirectMailEnum.Adapter.class)
  public enum OptInForDirectMailEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY(""),
    
    SPACE(" ");

    private String value;

    OptInForDirectMailEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptInForDirectMailEnum fromValue(String value) {
      for (OptInForDirectMailEnum b : OptInForDirectMailEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptInForDirectMailEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptInForDirectMailEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptInForDirectMailEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptInForDirectMailEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_IN_FOR_DIRECT_MAIL = "optInForDirectMail";
  @SerializedName(SERIALIZED_NAME_OPT_IN_FOR_DIRECT_MAIL)
  private OptInForDirectMailEnum optInForDirectMail;

  /**
   * Customer’s preference for receiving a phone call. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptInForPhoneEnum.Adapter.class)
  public enum OptInForPhoneEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY(""),
    
    SPACE(" ");

    private String value;

    OptInForPhoneEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptInForPhoneEnum fromValue(String value) {
      for (OptInForPhoneEnum b : OptInForPhoneEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptInForPhoneEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptInForPhoneEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptInForPhoneEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptInForPhoneEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_IN_FOR_PHONE = "optInForPhone";
  @SerializedName(SERIALIZED_NAME_OPT_IN_FOR_PHONE)
  private OptInForPhoneEnum optInForPhone;

  /**
   * Customer’s preference for receiving a SMS. * Y - Opt IN * N - Opt Out * P - Pending * U - Double Opt IN * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptInForSmsEnum.Adapter.class)
  public enum OptInForSmsEnum {
    Y("Y"),
    
    N("N"),
    
    P("P"),
    
    U("U"),
    
    EMPTY(""),
    
    SPACE(" ");

    private String value;

    OptInForSmsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptInForSmsEnum fromValue(String value) {
      for (OptInForSmsEnum b : OptInForSmsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptInForSmsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptInForSmsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptInForSmsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptInForSmsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_IN_FOR_SMS = "optInForSms";
  @SerializedName(SERIALIZED_NAME_OPT_IN_FOR_SMS)
  private OptInForSmsEnum optInForSms;

  /**
   * Customer’s preference for sharing personal data with a third party. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptInForShareEnum.Adapter.class)
  public enum OptInForShareEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY(""),
    
    SPACE(" ");

    private String value;

    OptInForShareEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptInForShareEnum fromValue(String value) {
      for (OptInForShareEnum b : OptInForShareEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptInForShareEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptInForShareEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptInForShareEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptInForShareEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_IN_FOR_SHARE = "optInForShare";
  @SerializedName(SERIALIZED_NAME_OPT_IN_FOR_SHARE)
  private OptInForShareEnum optInForShare;

  /**
   * Customer’s preference for receiving Western Union News bulletins and updates. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptInForNewsEnum.Adapter.class)
  public enum OptInForNewsEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY(""),
    
    SPACE(" ");

    private String value;

    OptInForNewsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptInForNewsEnum fromValue(String value) {
      for (OptInForNewsEnum b : OptInForNewsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptInForNewsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptInForNewsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptInForNewsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptInForNewsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_IN_FOR_NEWS = "optInForNews";
  @SerializedName(SERIALIZED_NAME_OPT_IN_FOR_NEWS)
  private OptInForNewsEnum optInForNews;

  /**
   * Customer’s preference for receiving e-receipt via email. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptEreceiptEmailEnum.Adapter.class)
  public enum OptEreceiptEmailEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY(""),
    
    SPACE(" ");

    private String value;

    OptEreceiptEmailEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptEreceiptEmailEnum fromValue(String value) {
      for (OptEreceiptEmailEnum b : OptEreceiptEmailEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptEreceiptEmailEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptEreceiptEmailEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptEreceiptEmailEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptEreceiptEmailEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_ERECEIPT_EMAIL = "optEreceiptEmail";
  @SerializedName(SERIALIZED_NAME_OPT_ERECEIPT_EMAIL)
  private OptEreceiptEmailEnum optEreceiptEmail;

  /**
   * Customer’s preference for receiving e-receipt via SMS. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptEreceiptSmsEnum.Adapter.class)
  public enum OptEreceiptSmsEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY(""),
    
    SPACE(" ");

    private String value;

    OptEreceiptSmsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptEreceiptSmsEnum fromValue(String value) {
      for (OptEreceiptSmsEnum b : OptEreceiptSmsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptEreceiptSmsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptEreceiptSmsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptEreceiptSmsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptEreceiptSmsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_ERECEIPT_SMS = "optEreceiptSms";
  @SerializedName(SERIALIZED_NAME_OPT_ERECEIPT_SMS)
  private OptEreceiptSmsEnum optEreceiptSms;

  /**
   * Customer’s preference for viewing ID. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptViewIdEnum.Adapter.class)
  public enum OptViewIdEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY(""),
    
    SPACE(" ");

    private String value;

    OptViewIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptViewIdEnum fromValue(String value) {
      for (OptViewIdEnum b : OptViewIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptViewIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptViewIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptViewIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptViewIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_VIEW_ID = "optViewId";
  @SerializedName(SERIALIZED_NAME_OPT_VIEW_ID)
  private OptViewIdEnum optViewId;

  /**
   * Customer&#39;s preference for receiving Western Union’s Privacy Policy in the mail. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(PrivacyRequestedEnum.Adapter.class)
  public enum PrivacyRequestedEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY(""),
    
    SPACE(" ");

    private String value;

    PrivacyRequestedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrivacyRequestedEnum fromValue(String value) {
      for (PrivacyRequestedEnum b : PrivacyRequestedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrivacyRequestedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrivacyRequestedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrivacyRequestedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrivacyRequestedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PRIVACY_REQUESTED = "privacyRequested";
  @SerializedName(SERIALIZED_NAME_PRIVACY_REQUESTED)
  private PrivacyRequestedEnum privacyRequested;

  public static final String SERIALIZED_NAME_PRIVACY_REQUESTED_DATE = "privacyRequestedDate";
  @SerializedName(SERIALIZED_NAME_PRIVACY_REQUESTED_DATE)
  private String privacyRequestedDate;

  public static final String SERIALIZED_NAME_LAST_PRIVACY_CHANGED_DATE = "lastPrivacyChangedDate";
  @SerializedName(SERIALIZED_NAME_LAST_PRIVACY_CHANGED_DATE)
  private String lastPrivacyChangedDate;

  public static final String SERIALIZED_NAME_PREF_MTHD_OF_CONTACT_CODE_TYPE = "prefMthdOfContactCodeType";
  @SerializedName(SERIALIZED_NAME_PREF_MTHD_OF_CONTACT_CODE_TYPE)
  private String prefMthdOfContactCodeType;

  public static final String SERIALIZED_NAME_PREF_LANGUAGE_CODE = "prefLanguageCode";
  @SerializedName(SERIALIZED_NAME_PREF_LANGUAGE_CODE)
  private String prefLanguageCode;

  /**
   * Preferred Content Type for Email * 1 - HTML * 2 - TEXT 
   */
  @JsonAdapter(PreferredEmailContentTypeEnum.Adapter.class)
  public enum PreferredEmailContentTypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    PreferredEmailContentTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreferredEmailContentTypeEnum fromValue(Integer value) {
      for (PreferredEmailContentTypeEnum b : PreferredEmailContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PreferredEmailContentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreferredEmailContentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreferredEmailContentTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PreferredEmailContentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PREFERRED_EMAIL_CONTENT_TYPE = "preferredEmailContentType";
  @SerializedName(SERIALIZED_NAME_PREFERRED_EMAIL_CONTENT_TYPE)
  private PreferredEmailContentTypeEnum preferredEmailContentType;

  /**
   * Customer’s preference for receiving Western Union Partner offers. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptInPartnerOffersEnum.Adapter.class)
  public enum OptInPartnerOffersEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY(""),
    
    SPACE(" ");

    private String value;

    OptInPartnerOffersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptInPartnerOffersEnum fromValue(String value) {
      for (OptInPartnerOffersEnum b : OptInPartnerOffersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptInPartnerOffersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptInPartnerOffersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptInPartnerOffersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptInPartnerOffersEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_IN_PARTNER_OFFERS = "optInPartnerOffers";
  @SerializedName(SERIALIZED_NAME_OPT_IN_PARTNER_OFFERS)
  private OptInPartnerOffersEnum optInPartnerOffers;

  public static final String SERIALIZED_NAME_PLATFORM_FLAG = "platformFlag";
  @SerializedName(SERIALIZED_NAME_PLATFORM_FLAG)
  private String platformFlag;

  public static final String SERIALIZED_NAME_CHANGE_FLAG = "changeFlag";
  @SerializedName(SERIALIZED_NAME_CHANGE_FLAG)
  private String changeFlag;

  /**
   * Customer’s preference whether Customer has accepted Marketing T&amp;C. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(MarketingFlagEnum.Adapter.class)
  public enum MarketingFlagEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    MarketingFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MarketingFlagEnum fromValue(String value) {
      for (MarketingFlagEnum b : MarketingFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MarketingFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MarketingFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MarketingFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MarketingFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MARKETING_FLAG = "marketingFlag";
  @SerializedName(SERIALIZED_NAME_MARKETING_FLAG)
  private MarketingFlagEnum marketingFlag;

  public static final String SERIALIZED_NAME_MARKETING_FLAG_UPDATED_DATE = "marketingFlagUpdatedDate";
  @SerializedName(SERIALIZED_NAME_MARKETING_FLAG_UPDATED_DATE)
  private String marketingFlagUpdatedDate;

  /**
   * description: | Customer’s preference whether Customer consent for Inclusion in Analytics. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptDataAnalyticsEnum.Adapter.class)
  public enum OptDataAnalyticsEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    OptDataAnalyticsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptDataAnalyticsEnum fromValue(String value) {
      for (OptDataAnalyticsEnum b : OptDataAnalyticsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptDataAnalyticsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptDataAnalyticsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptDataAnalyticsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptDataAnalyticsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_DATA_ANALYTICS = "optDataAnalytics";
  @SerializedName(SERIALIZED_NAME_OPT_DATA_ANALYTICS)
  private OptDataAnalyticsEnum optDataAnalytics;

  /**
   * Customer’s preference whether Customer consent for Inclusion in Decision. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptAutoDecisionEnum.Adapter.class)
  public enum OptAutoDecisionEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    OptAutoDecisionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptAutoDecisionEnum fromValue(String value) {
      for (OptAutoDecisionEnum b : OptAutoDecisionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptAutoDecisionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptAutoDecisionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptAutoDecisionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptAutoDecisionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_AUTO_DECISION = "optAutoDecision";
  @SerializedName(SERIALIZED_NAME_OPT_AUTO_DECISION)
  private OptAutoDecisionEnum optAutoDecision;

  /**
   * Customer’s preference whether Customer consent for Inclusion in Survey. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptSurveyEnum.Adapter.class)
  public enum OptSurveyEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    OptSurveyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptSurveyEnum fromValue(String value) {
      for (OptSurveyEnum b : OptSurveyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptSurveyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptSurveyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptSurveyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptSurveyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_SURVEY = "optSurvey";
  @SerializedName(SERIALIZED_NAME_OPT_SURVEY)
  private OptSurveyEnum optSurvey;

  /**
   * Customer’s preference for receiving Money Transfer SMS Notifications. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptMtSmsNotificationEnum.Adapter.class)
  public enum OptMtSmsNotificationEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    OptMtSmsNotificationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptMtSmsNotificationEnum fromValue(String value) {
      for (OptMtSmsNotificationEnum b : OptMtSmsNotificationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptMtSmsNotificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptMtSmsNotificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptMtSmsNotificationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptMtSmsNotificationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_MT_SMS_NOTIFICATION = "optMtSmsNotification";
  @SerializedName(SERIALIZED_NAME_OPT_MT_SMS_NOTIFICATION)
  private OptMtSmsNotificationEnum optMtSmsNotification;

  /**
   * Customer’s preference for 3rd party data share. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptPref1Enum.Adapter.class)
  public enum OptPref1Enum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    OptPref1Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptPref1Enum fromValue(String value) {
      for (OptPref1Enum b : OptPref1Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptPref1Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptPref1Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptPref1Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptPref1Enum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_PREF1 = "optPref1";
  @SerializedName(SERIALIZED_NAME_OPT_PREF1)
  private OptPref1Enum optPref1;

  /**
   * Customer’s preference for Whatsapp. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptPref2Enum.Adapter.class)
  public enum OptPref2Enum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    OptPref2Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptPref2Enum fromValue(String value) {
      for (OptPref2Enum b : OptPref2Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptPref2Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptPref2Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptPref2Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptPref2Enum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_PREF2 = "optPref2";
  @SerializedName(SERIALIZED_NAME_OPT_PREF2)
  private OptPref2Enum optPref2;

  /**
   * Provision for Additional customer preference.
   */
  @JsonAdapter(OptPref3Enum.Adapter.class)
  public enum OptPref3Enum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    OptPref3Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptPref3Enum fromValue(String value) {
      for (OptPref3Enum b : OptPref3Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptPref3Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptPref3Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptPref3Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptPref3Enum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_PREF3 = "optPref3";
  @SerializedName(SERIALIZED_NAME_OPT_PREF3)
  private OptPref3Enum optPref3;

  /**
   * Provision for Additional customer preference.
   */
  @JsonAdapter(OptPref4Enum.Adapter.class)
  public enum OptPref4Enum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    OptPref4Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptPref4Enum fromValue(String value) {
      for (OptPref4Enum b : OptPref4Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptPref4Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptPref4Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptPref4Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptPref4Enum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_PREF4 = "optPref4";
  @SerializedName(SERIALIZED_NAME_OPT_PREF4)
  private OptPref4Enum optPref4;

  public static final String SERIALIZED_NAME_EVENT_SOURCE = "eventSource";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE)
  private String eventSource;

  public static final String SERIALIZED_NAME_EVENT_DETAIL = "eventDetail";
  @SerializedName(SERIALIZED_NAME_EVENT_DETAIL)
  private String eventDetail;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_PARTNER_ID = "partnerId";
  @SerializedName(SERIALIZED_NAME_PARTNER_ID)
  private String partnerId;

  /**
   * Banking Flag.
   */
  @JsonAdapter(BankingFlagEnum.Adapter.class)
  public enum BankingFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    BankingFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BankingFlagEnum fromValue(String value) {
      for (BankingFlagEnum b : BankingFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BankingFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BankingFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BankingFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BankingFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BANKING_FLAG = "bankingFlag";
  @SerializedName(SERIALIZED_NAME_BANKING_FLAG)
  private BankingFlagEnum bankingFlag;

  public static final String SERIALIZED_NAME_BANKING_FLAG_UPDATED_DATE = "bankingFlagUpdatedDate";
  @SerializedName(SERIALIZED_NAME_BANKING_FLAG_UPDATED_DATE)
  private String bankingFlagUpdatedDate;

  public static final String SERIALIZED_NAME_BANKING_TNC_VERSION = "bankingTncVersion";
  @SerializedName(SERIALIZED_NAME_BANKING_TNC_VERSION)
  private String bankingTncVersion;

  /**
   * Data Privacy Flag.
   */
  @JsonAdapter(DataPrivacyFlagEnum.Adapter.class)
  public enum DataPrivacyFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    DataPrivacyFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataPrivacyFlagEnum fromValue(String value) {
      for (DataPrivacyFlagEnum b : DataPrivacyFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataPrivacyFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataPrivacyFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataPrivacyFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataPrivacyFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATA_PRIVACY_FLAG = "dataPrivacyFlag";
  @SerializedName(SERIALIZED_NAME_DATA_PRIVACY_FLAG)
  private DataPrivacyFlagEnum dataPrivacyFlag;

  public static final String SERIALIZED_NAME_DATA_PRIVACY_FLAG_UPDATED_DATE = "dataPrivacyFlagUpdatedDate";
  @SerializedName(SERIALIZED_NAME_DATA_PRIVACY_FLAG_UPDATED_DATE)
  private String dataPrivacyFlagUpdatedDate;

  public static final String SERIALIZED_NAME_DATA_PRIVACY_TNC_VERSION = "dataPrivacyTncVersion";
  @SerializedName(SERIALIZED_NAME_DATA_PRIVACY_TNC_VERSION)
  private String dataPrivacyTncVersion;

  public static final String SERIALIZED_NAME_BSA_WAIVER_CONSENT_FLAG = "bsaWaiverConsentFlag";
  @SerializedName(SERIALIZED_NAME_BSA_WAIVER_CONSENT_FLAG)
  private String bsaWaiverConsentFlag;

  public static final String SERIALIZED_NAME_BSA_WAIVER_CONSENT_VERSION = "bsaWaiverConsentVersion";
  @SerializedName(SERIALIZED_NAME_BSA_WAIVER_CONSENT_VERSION)
  private String bsaWaiverConsentVersion;

  public static final String SERIALIZED_NAME_BSA_WAIVER_CONSENT_DATE = "bsaWaiverConsentDate";
  @SerializedName(SERIALIZED_NAME_BSA_WAIVER_CONSENT_DATE)
  private String bsaWaiverConsentDate;

  public static final String SERIALIZED_NAME_VENDOR_AUTH_CONSENT = "vendorAuthConsent";
  @SerializedName(SERIALIZED_NAME_VENDOR_AUTH_CONSENT)
  private String vendorAuthConsent;

  public static final String SERIALIZED_NAME_VENDOR_AUTH_CONSENT_DATE = "vendorAuthConsentDate";
  @SerializedName(SERIALIZED_NAME_VENDOR_AUTH_CONSENT_DATE)
  private String vendorAuthConsentDate;

  public static final String SERIALIZED_NAME_COOKIE_PREFERENCES_JSON = "cookiePreferencesJson";
  @SerializedName(SERIALIZED_NAME_COOKIE_PREFERENCES_JSON)
  private String cookiePreferencesJson;

  /**
   * Customer’s preference whether Customer has accepted Directory Consent. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   */
  @JsonAdapter(OptDirectoryEnum.Adapter.class)
  public enum OptDirectoryEnum {
    Y("Y"),
    
    N("N"),
    
    EMPTY("");

    private String value;

    OptDirectoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptDirectoryEnum fromValue(String value) {
      for (OptDirectoryEnum b : OptDirectoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptDirectoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptDirectoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptDirectoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptDirectoryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPT_DIRECTORY = "optDirectory";
  @SerializedName(SERIALIZED_NAME_OPT_DIRECTORY)
  private OptDirectoryEnum optDirectory;

  public static final String SERIALIZED_NAME_OPT_DIRECTORY_UPDATED_DATE = "optDirectoryUpdatedDate";
  @SerializedName(SERIALIZED_NAME_OPT_DIRECTORY_UPDATED_DATE)
  private String optDirectoryUpdatedDate;

  public Preferences() {
  }

  public Preferences optInForEmail(OptInForEmailEnum optInForEmail) {
    
    this.optInForEmail = optInForEmail;
    return this;
  }

   /**
   * Customer’s preference for receiving an email. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optInForEmail
  **/
  @javax.annotation.Nullable
  public OptInForEmailEnum getOptInForEmail() {
    return optInForEmail;
  }


  public void setOptInForEmail(OptInForEmailEnum optInForEmail) {
    this.optInForEmail = optInForEmail;
  }


  public Preferences optInForDirectMail(OptInForDirectMailEnum optInForDirectMail) {
    
    this.optInForDirectMail = optInForDirectMail;
    return this;
  }

   /**
   * Customer’s preference for receiving a direct mail. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optInForDirectMail
  **/
  @javax.annotation.Nullable
  public OptInForDirectMailEnum getOptInForDirectMail() {
    return optInForDirectMail;
  }


  public void setOptInForDirectMail(OptInForDirectMailEnum optInForDirectMail) {
    this.optInForDirectMail = optInForDirectMail;
  }


  public Preferences optInForPhone(OptInForPhoneEnum optInForPhone) {
    
    this.optInForPhone = optInForPhone;
    return this;
  }

   /**
   * Customer’s preference for receiving a phone call. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optInForPhone
  **/
  @javax.annotation.Nullable
  public OptInForPhoneEnum getOptInForPhone() {
    return optInForPhone;
  }


  public void setOptInForPhone(OptInForPhoneEnum optInForPhone) {
    this.optInForPhone = optInForPhone;
  }


  public Preferences optInForSms(OptInForSmsEnum optInForSms) {
    
    this.optInForSms = optInForSms;
    return this;
  }

   /**
   * Customer’s preference for receiving a SMS. * Y - Opt IN * N - Opt Out * P - Pending * U - Double Opt IN * Space / Empty / Blank / Null - Unknown 
   * @return optInForSms
  **/
  @javax.annotation.Nullable
  public OptInForSmsEnum getOptInForSms() {
    return optInForSms;
  }


  public void setOptInForSms(OptInForSmsEnum optInForSms) {
    this.optInForSms = optInForSms;
  }


  public Preferences optInForShare(OptInForShareEnum optInForShare) {
    
    this.optInForShare = optInForShare;
    return this;
  }

   /**
   * Customer’s preference for sharing personal data with a third party. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optInForShare
  **/
  @javax.annotation.Nullable
  public OptInForShareEnum getOptInForShare() {
    return optInForShare;
  }


  public void setOptInForShare(OptInForShareEnum optInForShare) {
    this.optInForShare = optInForShare;
  }


  public Preferences optInForNews(OptInForNewsEnum optInForNews) {
    
    this.optInForNews = optInForNews;
    return this;
  }

   /**
   * Customer’s preference for receiving Western Union News bulletins and updates. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optInForNews
  **/
  @javax.annotation.Nullable
  public OptInForNewsEnum getOptInForNews() {
    return optInForNews;
  }


  public void setOptInForNews(OptInForNewsEnum optInForNews) {
    this.optInForNews = optInForNews;
  }


  public Preferences optEreceiptEmail(OptEreceiptEmailEnum optEreceiptEmail) {
    
    this.optEreceiptEmail = optEreceiptEmail;
    return this;
  }

   /**
   * Customer’s preference for receiving e-receipt via email. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optEreceiptEmail
  **/
  @javax.annotation.Nullable
  public OptEreceiptEmailEnum getOptEreceiptEmail() {
    return optEreceiptEmail;
  }


  public void setOptEreceiptEmail(OptEreceiptEmailEnum optEreceiptEmail) {
    this.optEreceiptEmail = optEreceiptEmail;
  }


  public Preferences optEreceiptSms(OptEreceiptSmsEnum optEreceiptSms) {
    
    this.optEreceiptSms = optEreceiptSms;
    return this;
  }

   /**
   * Customer’s preference for receiving e-receipt via SMS. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optEreceiptSms
  **/
  @javax.annotation.Nullable
  public OptEreceiptSmsEnum getOptEreceiptSms() {
    return optEreceiptSms;
  }


  public void setOptEreceiptSms(OptEreceiptSmsEnum optEreceiptSms) {
    this.optEreceiptSms = optEreceiptSms;
  }


  public Preferences optViewId(OptViewIdEnum optViewId) {
    
    this.optViewId = optViewId;
    return this;
  }

   /**
   * Customer’s preference for viewing ID. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optViewId
  **/
  @javax.annotation.Nullable
  public OptViewIdEnum getOptViewId() {
    return optViewId;
  }


  public void setOptViewId(OptViewIdEnum optViewId) {
    this.optViewId = optViewId;
  }


  public Preferences privacyRequested(PrivacyRequestedEnum privacyRequested) {
    
    this.privacyRequested = privacyRequested;
    return this;
  }

   /**
   * Customer&#39;s preference for receiving Western Union’s Privacy Policy in the mail. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return privacyRequested
  **/
  @javax.annotation.Nullable
  public PrivacyRequestedEnum getPrivacyRequested() {
    return privacyRequested;
  }


  public void setPrivacyRequested(PrivacyRequestedEnum privacyRequested) {
    this.privacyRequested = privacyRequested;
  }


  public Preferences privacyRequestedDate(String privacyRequestedDate) {
    
    this.privacyRequestedDate = privacyRequestedDate;
    return this;
  }

   /**
   * Date on which a Customer has preferred for receiving Western Union Privacy Policy in the mail.
   * @return privacyRequestedDate
  **/
  @javax.annotation.Nullable
  public String getPrivacyRequestedDate() {
    return privacyRequestedDate;
  }


  public void setPrivacyRequestedDate(String privacyRequestedDate) {
    this.privacyRequestedDate = privacyRequestedDate;
  }


  public Preferences lastPrivacyChangedDate(String lastPrivacyChangedDate) {
    
    this.lastPrivacyChangedDate = lastPrivacyChangedDate;
    return this;
  }

   /**
   * Date on which the Customer privacy flags has changed.
   * @return lastPrivacyChangedDate
  **/
  @javax.annotation.Nullable
  public String getLastPrivacyChangedDate() {
    return lastPrivacyChangedDate;
  }


  public void setLastPrivacyChangedDate(String lastPrivacyChangedDate) {
    this.lastPrivacyChangedDate = lastPrivacyChangedDate;
  }


  public Preferences prefMthdOfContactCodeType(String prefMthdOfContactCodeType) {
    
    this.prefMthdOfContactCodeType = prefMthdOfContactCodeType;
    return this;
  }

   /**
   * Preferred Code Type for method of contact. * T - Telephone * S - SMS  * E - Email * D - Direct Mail * Other 
   * @return prefMthdOfContactCodeType
  **/
  @javax.annotation.Nullable
  public String getPrefMthdOfContactCodeType() {
    return prefMthdOfContactCodeType;
  }


  public void setPrefMthdOfContactCodeType(String prefMthdOfContactCodeType) {
    this.prefMthdOfContactCodeType = prefMthdOfContactCodeType;
  }


  public Preferences prefLanguageCode(String prefLanguageCode) {
    
    this.prefLanguageCode = prefLanguageCode;
    return this;
  }

   /**
   * Customer&#39;s preferred language code for communication purposes in ISO2 language format.
   * @return prefLanguageCode
  **/
  @javax.annotation.Nullable
  public String getPrefLanguageCode() {
    return prefLanguageCode;
  }


  public void setPrefLanguageCode(String prefLanguageCode) {
    this.prefLanguageCode = prefLanguageCode;
  }


  public Preferences preferredEmailContentType(PreferredEmailContentTypeEnum preferredEmailContentType) {
    
    this.preferredEmailContentType = preferredEmailContentType;
    return this;
  }

   /**
   * Preferred Content Type for Email * 1 - HTML * 2 - TEXT 
   * @return preferredEmailContentType
  **/
  @javax.annotation.Nullable
  public PreferredEmailContentTypeEnum getPreferredEmailContentType() {
    return preferredEmailContentType;
  }


  public void setPreferredEmailContentType(PreferredEmailContentTypeEnum preferredEmailContentType) {
    this.preferredEmailContentType = preferredEmailContentType;
  }


  public Preferences optInPartnerOffers(OptInPartnerOffersEnum optInPartnerOffers) {
    
    this.optInPartnerOffers = optInPartnerOffers;
    return this;
  }

   /**
   * Customer’s preference for receiving Western Union Partner offers. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optInPartnerOffers
  **/
  @javax.annotation.Nullable
  public OptInPartnerOffersEnum getOptInPartnerOffers() {
    return optInPartnerOffers;
  }


  public void setOptInPartnerOffers(OptInPartnerOffersEnum optInPartnerOffers) {
    this.optInPartnerOffers = optInPartnerOffers;
  }


  public Preferences platformFlag(String platformFlag) {
    
    this.platformFlag = platformFlag;
    return this;
  }

   /**
   * Platform Flag.
   * @return platformFlag
  **/
  @javax.annotation.Nullable
  public String getPlatformFlag() {
    return platformFlag;
  }


  public void setPlatformFlag(String platformFlag) {
    this.platformFlag = platformFlag;
  }


  public Preferences changeFlag(String changeFlag) {
    
    this.changeFlag = changeFlag;
    return this;
  }

   /**
   * Change Flag.
   * @return changeFlag
  **/
  @javax.annotation.Nullable
  public String getChangeFlag() {
    return changeFlag;
  }


  public void setChangeFlag(String changeFlag) {
    this.changeFlag = changeFlag;
  }


  public Preferences marketingFlag(MarketingFlagEnum marketingFlag) {
    
    this.marketingFlag = marketingFlag;
    return this;
  }

   /**
   * Customer’s preference whether Customer has accepted Marketing T&amp;C. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return marketingFlag
  **/
  @javax.annotation.Nullable
  public MarketingFlagEnum getMarketingFlag() {
    return marketingFlag;
  }


  public void setMarketingFlag(MarketingFlagEnum marketingFlag) {
    this.marketingFlag = marketingFlag;
  }


  public Preferences marketingFlagUpdatedDate(String marketingFlagUpdatedDate) {
    
    this.marketingFlagUpdatedDate = marketingFlagUpdatedDate;
    return this;
  }

   /**
   * Timestamp when the Marketing Flag was added/updated.
   * @return marketingFlagUpdatedDate
  **/
  @javax.annotation.Nullable
  public String getMarketingFlagUpdatedDate() {
    return marketingFlagUpdatedDate;
  }


  public void setMarketingFlagUpdatedDate(String marketingFlagUpdatedDate) {
    this.marketingFlagUpdatedDate = marketingFlagUpdatedDate;
  }


  public Preferences optDataAnalytics(OptDataAnalyticsEnum optDataAnalytics) {
    
    this.optDataAnalytics = optDataAnalytics;
    return this;
  }

   /**
   * description: | Customer’s preference whether Customer consent for Inclusion in Analytics. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optDataAnalytics
  **/
  @javax.annotation.Nullable
  public OptDataAnalyticsEnum getOptDataAnalytics() {
    return optDataAnalytics;
  }


  public void setOptDataAnalytics(OptDataAnalyticsEnum optDataAnalytics) {
    this.optDataAnalytics = optDataAnalytics;
  }


  public Preferences optAutoDecision(OptAutoDecisionEnum optAutoDecision) {
    
    this.optAutoDecision = optAutoDecision;
    return this;
  }

   /**
   * Customer’s preference whether Customer consent for Inclusion in Decision. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optAutoDecision
  **/
  @javax.annotation.Nullable
  public OptAutoDecisionEnum getOptAutoDecision() {
    return optAutoDecision;
  }


  public void setOptAutoDecision(OptAutoDecisionEnum optAutoDecision) {
    this.optAutoDecision = optAutoDecision;
  }


  public Preferences optSurvey(OptSurveyEnum optSurvey) {
    
    this.optSurvey = optSurvey;
    return this;
  }

   /**
   * Customer’s preference whether Customer consent for Inclusion in Survey. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optSurvey
  **/
  @javax.annotation.Nullable
  public OptSurveyEnum getOptSurvey() {
    return optSurvey;
  }


  public void setOptSurvey(OptSurveyEnum optSurvey) {
    this.optSurvey = optSurvey;
  }


  public Preferences optMtSmsNotification(OptMtSmsNotificationEnum optMtSmsNotification) {
    
    this.optMtSmsNotification = optMtSmsNotification;
    return this;
  }

   /**
   * Customer’s preference for receiving Money Transfer SMS Notifications. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optMtSmsNotification
  **/
  @javax.annotation.Nullable
  public OptMtSmsNotificationEnum getOptMtSmsNotification() {
    return optMtSmsNotification;
  }


  public void setOptMtSmsNotification(OptMtSmsNotificationEnum optMtSmsNotification) {
    this.optMtSmsNotification = optMtSmsNotification;
  }


  public Preferences optPref1(OptPref1Enum optPref1) {
    
    this.optPref1 = optPref1;
    return this;
  }

   /**
   * Customer’s preference for 3rd party data share. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optPref1
  **/
  @javax.annotation.Nullable
  public OptPref1Enum getOptPref1() {
    return optPref1;
  }


  public void setOptPref1(OptPref1Enum optPref1) {
    this.optPref1 = optPref1;
  }


  public Preferences optPref2(OptPref2Enum optPref2) {
    
    this.optPref2 = optPref2;
    return this;
  }

   /**
   * Customer’s preference for Whatsapp. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optPref2
  **/
  @javax.annotation.Nullable
  public OptPref2Enum getOptPref2() {
    return optPref2;
  }


  public void setOptPref2(OptPref2Enum optPref2) {
    this.optPref2 = optPref2;
  }


  public Preferences optPref3(OptPref3Enum optPref3) {
    
    this.optPref3 = optPref3;
    return this;
  }

   /**
   * Provision for Additional customer preference.
   * @return optPref3
  **/
  @javax.annotation.Nullable
  public OptPref3Enum getOptPref3() {
    return optPref3;
  }


  public void setOptPref3(OptPref3Enum optPref3) {
    this.optPref3 = optPref3;
  }


  public Preferences optPref4(OptPref4Enum optPref4) {
    
    this.optPref4 = optPref4;
    return this;
  }

   /**
   * Provision for Additional customer preference.
   * @return optPref4
  **/
  @javax.annotation.Nullable
  public OptPref4Enum getOptPref4() {
    return optPref4;
  }


  public void setOptPref4(OptPref4Enum optPref4) {
    this.optPref4 = optPref4;
  }


  public Preferences eventSource(String eventSource) {
    
    this.eventSource = eventSource;
    return this;
  }

   /**
   * Preference detail change Event Source.
   * @return eventSource
  **/
  @javax.annotation.Nullable
  public String getEventSource() {
    return eventSource;
  }


  public void setEventSource(String eventSource) {
    this.eventSource = eventSource;
  }


  public Preferences eventDetail(String eventDetail) {
    
    this.eventDetail = eventDetail;
    return this;
  }

   /**
   * Preference detail change Event Source Details.
   * @return eventDetail
  **/
  @javax.annotation.Nullable
  public String getEventDetail() {
    return eventDetail;
  }


  public void setEventDetail(String eventDetail) {
    this.eventDetail = eventDetail;
  }


  public Preferences eventType(String eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * Type of Event. * R - Registration * U - Update 
   * @return eventType
  **/
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }


  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public Preferences partnerId(String partnerId) {
    
    this.partnerId = partnerId;
    return this;
  }

   /**
   * Partner ID for the Partner Organization. Should be common across WU applications.
   * @return partnerId
  **/
  @javax.annotation.Nullable
  public String getPartnerId() {
    return partnerId;
  }


  public void setPartnerId(String partnerId) {
    this.partnerId = partnerId;
  }


  public Preferences bankingFlag(BankingFlagEnum bankingFlag) {
    
    this.bankingFlag = bankingFlag;
    return this;
  }

   /**
   * Banking Flag.
   * @return bankingFlag
  **/
  @javax.annotation.Nullable
  public BankingFlagEnum getBankingFlag() {
    return bankingFlag;
  }


  public void setBankingFlag(BankingFlagEnum bankingFlag) {
    this.bankingFlag = bankingFlag;
  }


  public Preferences bankingFlagUpdatedDate(String bankingFlagUpdatedDate) {
    
    this.bankingFlagUpdatedDate = bankingFlagUpdatedDate;
    return this;
  }

   /**
   * Timestamp when Banking Flag was added/updated.
   * @return bankingFlagUpdatedDate
  **/
  @javax.annotation.Nullable
  public String getBankingFlagUpdatedDate() {
    return bankingFlagUpdatedDate;
  }


  public void setBankingFlagUpdatedDate(String bankingFlagUpdatedDate) {
    this.bankingFlagUpdatedDate = bankingFlagUpdatedDate;
  }


  public Preferences bankingTncVersion(String bankingTncVersion) {
    
    this.bankingTncVersion = bankingTncVersion;
    return this;
  }

   /**
   * Banking Term &amp; Condition Version
   * @return bankingTncVersion
  **/
  @javax.annotation.Nullable
  public String getBankingTncVersion() {
    return bankingTncVersion;
  }


  public void setBankingTncVersion(String bankingTncVersion) {
    this.bankingTncVersion = bankingTncVersion;
  }


  public Preferences dataPrivacyFlag(DataPrivacyFlagEnum dataPrivacyFlag) {
    
    this.dataPrivacyFlag = dataPrivacyFlag;
    return this;
  }

   /**
   * Data Privacy Flag.
   * @return dataPrivacyFlag
  **/
  @javax.annotation.Nullable
  public DataPrivacyFlagEnum getDataPrivacyFlag() {
    return dataPrivacyFlag;
  }


  public void setDataPrivacyFlag(DataPrivacyFlagEnum dataPrivacyFlag) {
    this.dataPrivacyFlag = dataPrivacyFlag;
  }


  public Preferences dataPrivacyFlagUpdatedDate(String dataPrivacyFlagUpdatedDate) {
    
    this.dataPrivacyFlagUpdatedDate = dataPrivacyFlagUpdatedDate;
    return this;
  }

   /**
   * Timestamp when Data Privacy Flag was added/updated.
   * @return dataPrivacyFlagUpdatedDate
  **/
  @javax.annotation.Nullable
  public String getDataPrivacyFlagUpdatedDate() {
    return dataPrivacyFlagUpdatedDate;
  }


  public void setDataPrivacyFlagUpdatedDate(String dataPrivacyFlagUpdatedDate) {
    this.dataPrivacyFlagUpdatedDate = dataPrivacyFlagUpdatedDate;
  }


  public Preferences dataPrivacyTncVersion(String dataPrivacyTncVersion) {
    
    this.dataPrivacyTncVersion = dataPrivacyTncVersion;
    return this;
  }

   /**
   * Data Privacy Term &amp; Condition Version.
   * @return dataPrivacyTncVersion
  **/
  @javax.annotation.Nullable
  public String getDataPrivacyTncVersion() {
    return dataPrivacyTncVersion;
  }


  public void setDataPrivacyTncVersion(String dataPrivacyTncVersion) {
    this.dataPrivacyTncVersion = dataPrivacyTncVersion;
  }


  public Preferences bsaWaiverConsentFlag(String bsaWaiverConsentFlag) {
    
    this.bsaWaiverConsentFlag = bsaWaiverConsentFlag;
    return this;
  }

   /**
   * BSA (Bank Secrecy Act) Waiver Consent Flag.
   * @return bsaWaiverConsentFlag
  **/
  @javax.annotation.Nullable
  public String getBsaWaiverConsentFlag() {
    return bsaWaiverConsentFlag;
  }


  public void setBsaWaiverConsentFlag(String bsaWaiverConsentFlag) {
    this.bsaWaiverConsentFlag = bsaWaiverConsentFlag;
  }


  public Preferences bsaWaiverConsentVersion(String bsaWaiverConsentVersion) {
    
    this.bsaWaiverConsentVersion = bsaWaiverConsentVersion;
    return this;
  }

   /**
   * BSA (Bank Secrecy Act) Waiver Consent Version.
   * @return bsaWaiverConsentVersion
  **/
  @javax.annotation.Nullable
  public String getBsaWaiverConsentVersion() {
    return bsaWaiverConsentVersion;
  }


  public void setBsaWaiverConsentVersion(String bsaWaiverConsentVersion) {
    this.bsaWaiverConsentVersion = bsaWaiverConsentVersion;
  }


  public Preferences bsaWaiverConsentDate(String bsaWaiverConsentDate) {
    
    this.bsaWaiverConsentDate = bsaWaiverConsentDate;
    return this;
  }

   /**
   * Timestamp when BSA (Bank Secrecy Act) Waiver Consent was added/updated.
   * @return bsaWaiverConsentDate
  **/
  @javax.annotation.Nullable
  public String getBsaWaiverConsentDate() {
    return bsaWaiverConsentDate;
  }


  public void setBsaWaiverConsentDate(String bsaWaiverConsentDate) {
    this.bsaWaiverConsentDate = bsaWaiverConsentDate;
  }


  public Preferences vendorAuthConsent(String vendorAuthConsent) {
    
    this.vendorAuthConsent = vendorAuthConsent;
    return this;
  }

   /**
   * Vendor Authorization Consent.
   * @return vendorAuthConsent
  **/
  @javax.annotation.Nullable
  public String getVendorAuthConsent() {
    return vendorAuthConsent;
  }


  public void setVendorAuthConsent(String vendorAuthConsent) {
    this.vendorAuthConsent = vendorAuthConsent;
  }


  public Preferences vendorAuthConsentDate(String vendorAuthConsentDate) {
    
    this.vendorAuthConsentDate = vendorAuthConsentDate;
    return this;
  }

   /**
   * Timestamp when Vendor Authorization Consent was added/updated.
   * @return vendorAuthConsentDate
  **/
  @javax.annotation.Nullable
  public String getVendorAuthConsentDate() {
    return vendorAuthConsentDate;
  }


  public void setVendorAuthConsentDate(String vendorAuthConsentDate) {
    this.vendorAuthConsentDate = vendorAuthConsentDate;
  }


  public Preferences cookiePreferencesJson(String cookiePreferencesJson) {
    
    this.cookiePreferencesJson = cookiePreferencesJson;
    return this;
  }

   /**
   * Cookie Preferences.
   * @return cookiePreferencesJson
  **/
  @javax.annotation.Nullable
  public String getCookiePreferencesJson() {
    return cookiePreferencesJson;
  }


  public void setCookiePreferencesJson(String cookiePreferencesJson) {
    this.cookiePreferencesJson = cookiePreferencesJson;
  }


  public Preferences optDirectory(OptDirectoryEnum optDirectory) {
    
    this.optDirectory = optDirectory;
    return this;
  }

   /**
   * Customer’s preference whether Customer has accepted Directory Consent. * Y - Opt IN * N - Opt Out * Space / Empty / Blank / Null - Unknown 
   * @return optDirectory
  **/
  @javax.annotation.Nullable
  public OptDirectoryEnum getOptDirectory() {
    return optDirectory;
  }


  public void setOptDirectory(OptDirectoryEnum optDirectory) {
    this.optDirectory = optDirectory;
  }


  public Preferences optDirectoryUpdatedDate(String optDirectoryUpdatedDate) {
    
    this.optDirectoryUpdatedDate = optDirectoryUpdatedDate;
    return this;
  }

   /**
   * Timestamp when Directory Consent was added/updated.
   * @return optDirectoryUpdatedDate
  **/
  @javax.annotation.Nullable
  public String getOptDirectoryUpdatedDate() {
    return optDirectoryUpdatedDate;
  }


  public void setOptDirectoryUpdatedDate(String optDirectoryUpdatedDate) {
    this.optDirectoryUpdatedDate = optDirectoryUpdatedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Preferences preferences = (Preferences) o;
    return Objects.equals(this.optInForEmail, preferences.optInForEmail) &&
        Objects.equals(this.optInForDirectMail, preferences.optInForDirectMail) &&
        Objects.equals(this.optInForPhone, preferences.optInForPhone) &&
        Objects.equals(this.optInForSms, preferences.optInForSms) &&
        Objects.equals(this.optInForShare, preferences.optInForShare) &&
        Objects.equals(this.optInForNews, preferences.optInForNews) &&
        Objects.equals(this.optEreceiptEmail, preferences.optEreceiptEmail) &&
        Objects.equals(this.optEreceiptSms, preferences.optEreceiptSms) &&
        Objects.equals(this.optViewId, preferences.optViewId) &&
        Objects.equals(this.privacyRequested, preferences.privacyRequested) &&
        Objects.equals(this.privacyRequestedDate, preferences.privacyRequestedDate) &&
        Objects.equals(this.lastPrivacyChangedDate, preferences.lastPrivacyChangedDate) &&
        Objects.equals(this.prefMthdOfContactCodeType, preferences.prefMthdOfContactCodeType) &&
        Objects.equals(this.prefLanguageCode, preferences.prefLanguageCode) &&
        Objects.equals(this.preferredEmailContentType, preferences.preferredEmailContentType) &&
        Objects.equals(this.optInPartnerOffers, preferences.optInPartnerOffers) &&
        Objects.equals(this.platformFlag, preferences.platformFlag) &&
        Objects.equals(this.changeFlag, preferences.changeFlag) &&
        Objects.equals(this.marketingFlag, preferences.marketingFlag) &&
        Objects.equals(this.marketingFlagUpdatedDate, preferences.marketingFlagUpdatedDate) &&
        Objects.equals(this.optDataAnalytics, preferences.optDataAnalytics) &&
        Objects.equals(this.optAutoDecision, preferences.optAutoDecision) &&
        Objects.equals(this.optSurvey, preferences.optSurvey) &&
        Objects.equals(this.optMtSmsNotification, preferences.optMtSmsNotification) &&
        Objects.equals(this.optPref1, preferences.optPref1) &&
        Objects.equals(this.optPref2, preferences.optPref2) &&
        Objects.equals(this.optPref3, preferences.optPref3) &&
        Objects.equals(this.optPref4, preferences.optPref4) &&
        Objects.equals(this.eventSource, preferences.eventSource) &&
        Objects.equals(this.eventDetail, preferences.eventDetail) &&
        Objects.equals(this.eventType, preferences.eventType) &&
        Objects.equals(this.partnerId, preferences.partnerId) &&
        Objects.equals(this.bankingFlag, preferences.bankingFlag) &&
        Objects.equals(this.bankingFlagUpdatedDate, preferences.bankingFlagUpdatedDate) &&
        Objects.equals(this.bankingTncVersion, preferences.bankingTncVersion) &&
        Objects.equals(this.dataPrivacyFlag, preferences.dataPrivacyFlag) &&
        Objects.equals(this.dataPrivacyFlagUpdatedDate, preferences.dataPrivacyFlagUpdatedDate) &&
        Objects.equals(this.dataPrivacyTncVersion, preferences.dataPrivacyTncVersion) &&
        Objects.equals(this.bsaWaiverConsentFlag, preferences.bsaWaiverConsentFlag) &&
        Objects.equals(this.bsaWaiverConsentVersion, preferences.bsaWaiverConsentVersion) &&
        Objects.equals(this.bsaWaiverConsentDate, preferences.bsaWaiverConsentDate) &&
        Objects.equals(this.vendorAuthConsent, preferences.vendorAuthConsent) &&
        Objects.equals(this.vendorAuthConsentDate, preferences.vendorAuthConsentDate) &&
        Objects.equals(this.cookiePreferencesJson, preferences.cookiePreferencesJson) &&
        Objects.equals(this.optDirectory, preferences.optDirectory) &&
        Objects.equals(this.optDirectoryUpdatedDate, preferences.optDirectoryUpdatedDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(optInForEmail, optInForDirectMail, optInForPhone, optInForSms, optInForShare, optInForNews, optEreceiptEmail, optEreceiptSms, optViewId, privacyRequested, privacyRequestedDate, lastPrivacyChangedDate, prefMthdOfContactCodeType, prefLanguageCode, preferredEmailContentType, optInPartnerOffers, platformFlag, changeFlag, marketingFlag, marketingFlagUpdatedDate, optDataAnalytics, optAutoDecision, optSurvey, optMtSmsNotification, optPref1, optPref2, optPref3, optPref4, eventSource, eventDetail, eventType, partnerId, bankingFlag, bankingFlagUpdatedDate, bankingTncVersion, dataPrivacyFlag, dataPrivacyFlagUpdatedDate, dataPrivacyTncVersion, bsaWaiverConsentFlag, bsaWaiverConsentVersion, bsaWaiverConsentDate, vendorAuthConsent, vendorAuthConsentDate, cookiePreferencesJson, optDirectory, optDirectoryUpdatedDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Preferences {\n");
    sb.append("    optInForEmail: ").append(toIndentedString(optInForEmail)).append("\n");
    sb.append("    optInForDirectMail: ").append(toIndentedString(optInForDirectMail)).append("\n");
    sb.append("    optInForPhone: ").append(toIndentedString(optInForPhone)).append("\n");
    sb.append("    optInForSms: ").append(toIndentedString(optInForSms)).append("\n");
    sb.append("    optInForShare: ").append(toIndentedString(optInForShare)).append("\n");
    sb.append("    optInForNews: ").append(toIndentedString(optInForNews)).append("\n");
    sb.append("    optEreceiptEmail: ").append(toIndentedString(optEreceiptEmail)).append("\n");
    sb.append("    optEreceiptSms: ").append(toIndentedString(optEreceiptSms)).append("\n");
    sb.append("    optViewId: ").append(toIndentedString(optViewId)).append("\n");
    sb.append("    privacyRequested: ").append(toIndentedString(privacyRequested)).append("\n");
    sb.append("    privacyRequestedDate: ").append(toIndentedString(privacyRequestedDate)).append("\n");
    sb.append("    lastPrivacyChangedDate: ").append(toIndentedString(lastPrivacyChangedDate)).append("\n");
    sb.append("    prefMthdOfContactCodeType: ").append(toIndentedString(prefMthdOfContactCodeType)).append("\n");
    sb.append("    prefLanguageCode: ").append(toIndentedString(prefLanguageCode)).append("\n");
    sb.append("    preferredEmailContentType: ").append(toIndentedString(preferredEmailContentType)).append("\n");
    sb.append("    optInPartnerOffers: ").append(toIndentedString(optInPartnerOffers)).append("\n");
    sb.append("    platformFlag: ").append(toIndentedString(platformFlag)).append("\n");
    sb.append("    changeFlag: ").append(toIndentedString(changeFlag)).append("\n");
    sb.append("    marketingFlag: ").append(toIndentedString(marketingFlag)).append("\n");
    sb.append("    marketingFlagUpdatedDate: ").append(toIndentedString(marketingFlagUpdatedDate)).append("\n");
    sb.append("    optDataAnalytics: ").append(toIndentedString(optDataAnalytics)).append("\n");
    sb.append("    optAutoDecision: ").append(toIndentedString(optAutoDecision)).append("\n");
    sb.append("    optSurvey: ").append(toIndentedString(optSurvey)).append("\n");
    sb.append("    optMtSmsNotification: ").append(toIndentedString(optMtSmsNotification)).append("\n");
    sb.append("    optPref1: ").append(toIndentedString(optPref1)).append("\n");
    sb.append("    optPref2: ").append(toIndentedString(optPref2)).append("\n");
    sb.append("    optPref3: ").append(toIndentedString(optPref3)).append("\n");
    sb.append("    optPref4: ").append(toIndentedString(optPref4)).append("\n");
    sb.append("    eventSource: ").append(toIndentedString(eventSource)).append("\n");
    sb.append("    eventDetail: ").append(toIndentedString(eventDetail)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    partnerId: ").append(toIndentedString(partnerId)).append("\n");
    sb.append("    bankingFlag: ").append(toIndentedString(bankingFlag)).append("\n");
    sb.append("    bankingFlagUpdatedDate: ").append(toIndentedString(bankingFlagUpdatedDate)).append("\n");
    sb.append("    bankingTncVersion: ").append(toIndentedString(bankingTncVersion)).append("\n");
    sb.append("    dataPrivacyFlag: ").append(toIndentedString(dataPrivacyFlag)).append("\n");
    sb.append("    dataPrivacyFlagUpdatedDate: ").append(toIndentedString(dataPrivacyFlagUpdatedDate)).append("\n");
    sb.append("    dataPrivacyTncVersion: ").append(toIndentedString(dataPrivacyTncVersion)).append("\n");
    sb.append("    bsaWaiverConsentFlag: ").append(toIndentedString(bsaWaiverConsentFlag)).append("\n");
    sb.append("    bsaWaiverConsentVersion: ").append(toIndentedString(bsaWaiverConsentVersion)).append("\n");
    sb.append("    bsaWaiverConsentDate: ").append(toIndentedString(bsaWaiverConsentDate)).append("\n");
    sb.append("    vendorAuthConsent: ").append(toIndentedString(vendorAuthConsent)).append("\n");
    sb.append("    vendorAuthConsentDate: ").append(toIndentedString(vendorAuthConsentDate)).append("\n");
    sb.append("    cookiePreferencesJson: ").append(toIndentedString(cookiePreferencesJson)).append("\n");
    sb.append("    optDirectory: ").append(toIndentedString(optDirectory)).append("\n");
    sb.append("    optDirectoryUpdatedDate: ").append(toIndentedString(optDirectoryUpdatedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("optInForEmail");
    openapiFields.add("optInForDirectMail");
    openapiFields.add("optInForPhone");
    openapiFields.add("optInForSms");
    openapiFields.add("optInForShare");
    openapiFields.add("optInForNews");
    openapiFields.add("optEreceiptEmail");
    openapiFields.add("optEreceiptSms");
    openapiFields.add("optViewId");
    openapiFields.add("privacyRequested");
    openapiFields.add("privacyRequestedDate");
    openapiFields.add("lastPrivacyChangedDate");
    openapiFields.add("prefMthdOfContactCodeType");
    openapiFields.add("prefLanguageCode");
    openapiFields.add("preferredEmailContentType");
    openapiFields.add("optInPartnerOffers");
    openapiFields.add("platformFlag");
    openapiFields.add("changeFlag");
    openapiFields.add("marketingFlag");
    openapiFields.add("marketingFlagUpdatedDate");
    openapiFields.add("optDataAnalytics");
    openapiFields.add("optAutoDecision");
    openapiFields.add("optSurvey");
    openapiFields.add("optMtSmsNotification");
    openapiFields.add("optPref1");
    openapiFields.add("optPref2");
    openapiFields.add("optPref3");
    openapiFields.add("optPref4");
    openapiFields.add("eventSource");
    openapiFields.add("eventDetail");
    openapiFields.add("eventType");
    openapiFields.add("partnerId");
    openapiFields.add("bankingFlag");
    openapiFields.add("bankingFlagUpdatedDate");
    openapiFields.add("bankingTncVersion");
    openapiFields.add("dataPrivacyFlag");
    openapiFields.add("dataPrivacyFlagUpdatedDate");
    openapiFields.add("dataPrivacyTncVersion");
    openapiFields.add("bsaWaiverConsentFlag");
    openapiFields.add("bsaWaiverConsentVersion");
    openapiFields.add("bsaWaiverConsentDate");
    openapiFields.add("vendorAuthConsent");
    openapiFields.add("vendorAuthConsentDate");
    openapiFields.add("cookiePreferencesJson");
    openapiFields.add("optDirectory");
    openapiFields.add("optDirectoryUpdatedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Preferences
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Preferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Preferences is not found in the empty JSON string", Preferences.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Preferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Preferences` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("optInForEmail") != null && !jsonObj.get("optInForEmail").isJsonNull()) && !jsonObj.get("optInForEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optInForEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optInForEmail").toString()));
      }
      if ((jsonObj.get("optInForDirectMail") != null && !jsonObj.get("optInForDirectMail").isJsonNull()) && !jsonObj.get("optInForDirectMail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optInForDirectMail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optInForDirectMail").toString()));
      }
      if ((jsonObj.get("optInForPhone") != null && !jsonObj.get("optInForPhone").isJsonNull()) && !jsonObj.get("optInForPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optInForPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optInForPhone").toString()));
      }
      if ((jsonObj.get("optInForSms") != null && !jsonObj.get("optInForSms").isJsonNull()) && !jsonObj.get("optInForSms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optInForSms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optInForSms").toString()));
      }
      if ((jsonObj.get("optInForShare") != null && !jsonObj.get("optInForShare").isJsonNull()) && !jsonObj.get("optInForShare").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optInForShare` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optInForShare").toString()));
      }
      if ((jsonObj.get("optInForNews") != null && !jsonObj.get("optInForNews").isJsonNull()) && !jsonObj.get("optInForNews").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optInForNews` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optInForNews").toString()));
      }
      if ((jsonObj.get("optEreceiptEmail") != null && !jsonObj.get("optEreceiptEmail").isJsonNull()) && !jsonObj.get("optEreceiptEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optEreceiptEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optEreceiptEmail").toString()));
      }
      if ((jsonObj.get("optEreceiptSms") != null && !jsonObj.get("optEreceiptSms").isJsonNull()) && !jsonObj.get("optEreceiptSms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optEreceiptSms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optEreceiptSms").toString()));
      }
      if ((jsonObj.get("optViewId") != null && !jsonObj.get("optViewId").isJsonNull()) && !jsonObj.get("optViewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optViewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optViewId").toString()));
      }
      if ((jsonObj.get("privacyRequested") != null && !jsonObj.get("privacyRequested").isJsonNull()) && !jsonObj.get("privacyRequested").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacyRequested` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacyRequested").toString()));
      }
      if ((jsonObj.get("prefMthdOfContactCodeType") != null && !jsonObj.get("prefMthdOfContactCodeType").isJsonNull()) && !jsonObj.get("prefMthdOfContactCodeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefMthdOfContactCodeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefMthdOfContactCodeType").toString()));
      }
      if ((jsonObj.get("prefLanguageCode") != null && !jsonObj.get("prefLanguageCode").isJsonNull()) && !jsonObj.get("prefLanguageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefLanguageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefLanguageCode").toString()));
      }
      if ((jsonObj.get("optInPartnerOffers") != null && !jsonObj.get("optInPartnerOffers").isJsonNull()) && !jsonObj.get("optInPartnerOffers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optInPartnerOffers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optInPartnerOffers").toString()));
      }
      if ((jsonObj.get("platformFlag") != null && !jsonObj.get("platformFlag").isJsonNull()) && !jsonObj.get("platformFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformFlag").toString()));
      }
      if ((jsonObj.get("changeFlag") != null && !jsonObj.get("changeFlag").isJsonNull()) && !jsonObj.get("changeFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeFlag").toString()));
      }
      if ((jsonObj.get("marketingFlag") != null && !jsonObj.get("marketingFlag").isJsonNull()) && !jsonObj.get("marketingFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketingFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketingFlag").toString()));
      }
      if ((jsonObj.get("optDataAnalytics") != null && !jsonObj.get("optDataAnalytics").isJsonNull()) && !jsonObj.get("optDataAnalytics").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optDataAnalytics` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optDataAnalytics").toString()));
      }
      if ((jsonObj.get("optAutoDecision") != null && !jsonObj.get("optAutoDecision").isJsonNull()) && !jsonObj.get("optAutoDecision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optAutoDecision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optAutoDecision").toString()));
      }
      if ((jsonObj.get("optSurvey") != null && !jsonObj.get("optSurvey").isJsonNull()) && !jsonObj.get("optSurvey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optSurvey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optSurvey").toString()));
      }
      if ((jsonObj.get("optMtSmsNotification") != null && !jsonObj.get("optMtSmsNotification").isJsonNull()) && !jsonObj.get("optMtSmsNotification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optMtSmsNotification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optMtSmsNotification").toString()));
      }
      if ((jsonObj.get("optPref1") != null && !jsonObj.get("optPref1").isJsonNull()) && !jsonObj.get("optPref1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optPref1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optPref1").toString()));
      }
      if ((jsonObj.get("optPref2") != null && !jsonObj.get("optPref2").isJsonNull()) && !jsonObj.get("optPref2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optPref2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optPref2").toString()));
      }
      if ((jsonObj.get("optPref3") != null && !jsonObj.get("optPref3").isJsonNull()) && !jsonObj.get("optPref3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optPref3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optPref3").toString()));
      }
      if ((jsonObj.get("optPref4") != null && !jsonObj.get("optPref4").isJsonNull()) && !jsonObj.get("optPref4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optPref4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optPref4").toString()));
      }
      if ((jsonObj.get("eventSource") != null && !jsonObj.get("eventSource").isJsonNull()) && !jsonObj.get("eventSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventSource").toString()));
      }
      if ((jsonObj.get("eventDetail") != null && !jsonObj.get("eventDetail").isJsonNull()) && !jsonObj.get("eventDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventDetail").toString()));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("partnerId") != null && !jsonObj.get("partnerId").isJsonNull()) && !jsonObj.get("partnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerId").toString()));
      }
      if ((jsonObj.get("bankingFlag") != null && !jsonObj.get("bankingFlag").isJsonNull()) && !jsonObj.get("bankingFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankingFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankingFlag").toString()));
      }
      if ((jsonObj.get("bankingTncVersion") != null && !jsonObj.get("bankingTncVersion").isJsonNull()) && !jsonObj.get("bankingTncVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankingTncVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankingTncVersion").toString()));
      }
      if ((jsonObj.get("dataPrivacyFlag") != null && !jsonObj.get("dataPrivacyFlag").isJsonNull()) && !jsonObj.get("dataPrivacyFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPrivacyFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPrivacyFlag").toString()));
      }
      if ((jsonObj.get("dataPrivacyTncVersion") != null && !jsonObj.get("dataPrivacyTncVersion").isJsonNull()) && !jsonObj.get("dataPrivacyTncVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPrivacyTncVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPrivacyTncVersion").toString()));
      }
      if ((jsonObj.get("bsaWaiverConsentFlag") != null && !jsonObj.get("bsaWaiverConsentFlag").isJsonNull()) && !jsonObj.get("bsaWaiverConsentFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bsaWaiverConsentFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bsaWaiverConsentFlag").toString()));
      }
      if ((jsonObj.get("bsaWaiverConsentVersion") != null && !jsonObj.get("bsaWaiverConsentVersion").isJsonNull()) && !jsonObj.get("bsaWaiverConsentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bsaWaiverConsentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bsaWaiverConsentVersion").toString()));
      }
      if ((jsonObj.get("vendorAuthConsent") != null && !jsonObj.get("vendorAuthConsent").isJsonNull()) && !jsonObj.get("vendorAuthConsent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorAuthConsent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorAuthConsent").toString()));
      }
      if ((jsonObj.get("cookiePreferencesJson") != null && !jsonObj.get("cookiePreferencesJson").isJsonNull()) && !jsonObj.get("cookiePreferencesJson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookiePreferencesJson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookiePreferencesJson").toString()));
      }
      if ((jsonObj.get("optDirectory") != null && !jsonObj.get("optDirectory").isJsonNull()) && !jsonObj.get("optDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optDirectory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Preferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Preferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Preferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Preferences.class));

       return (TypeAdapter<T>) new TypeAdapter<Preferences>() {
           @Override
           public void write(JsonWriter out, Preferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Preferences read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Preferences given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Preferences
  * @throws IOException if the JSON string is invalid with respect to Preferences
  */
  public static Preferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Preferences.class);
  }

 /**
  * Convert an instance of Preferences to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

