/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * This is the request model for CustomerLookup service. This is to search for a customer by supplying key elements and receive the UCD profile of the customer found Customer lookup can be key based, non key based.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class CustomerLookupRequest {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Header header;

  public static final String SERIALIZED_NAME_KEY_BASED = "keyBased";
  @SerializedName(SERIALIZED_NAME_KEY_BASED)
  private Boolean keyBased;

  public static final String SERIALIZED_NAME_CUSTOMER_LOOKUP = "customerLookup";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_LOOKUP)
  private CustomerLookup customerLookup;

  public static final String SERIALIZED_NAME_START_INDEX = "startIndex";
  @SerializedName(SERIALIZED_NAME_START_INDEX)
  private Integer startIndex;

  public static final String SERIALIZED_NAME_RETURN_SIZE = "returnSize";
  @SerializedName(SERIALIZED_NAME_RETURN_SIZE)
  private Integer returnSize;

  /**
   * If this flag is not sent then by default will look in My_WU customers. * If the flag value is Y, then will look in My_WU+Non_My_WU customers. * If the flag value is N then will look in only My_WU Customers. 
   */
  @JsonAdapter(SendNonWuAlsoFlagEnum.Adapter.class)
  public enum SendNonWuAlsoFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendNonWuAlsoFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendNonWuAlsoFlagEnum fromValue(String value) {
      for (SendNonWuAlsoFlagEnum b : SendNonWuAlsoFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendNonWuAlsoFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendNonWuAlsoFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendNonWuAlsoFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendNonWuAlsoFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_NON_WU_ALSO_FLAG = "sendNonWuAlsoFlag";
  @SerializedName(SERIALIZED_NAME_SEND_NON_WU_ALSO_FLAG)
  private SendNonWuAlsoFlagEnum sendNonWuAlsoFlag = SendNonWuAlsoFlagEnum.Y;

  /**
   * If this flag is not send then by default will look all the receivers * 1 - All Receivers * 2 - Active Receivers Only 
   */
  @JsonAdapter(ReceiverTypeEnum.Adapter.class)
  public enum ReceiverTypeEnum {
    _1("1"),
    
    _2("2");

    private String value;

    ReceiverTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReceiverTypeEnum fromValue(String value) {
      for (ReceiverTypeEnum b : ReceiverTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReceiverTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReceiverTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReceiverTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReceiverTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RECEIVER_TYPE = "receiverType";
  @SerializedName(SERIALIZED_NAME_RECEIVER_TYPE)
  private ReceiverTypeEnum receiverType = ReceiverTypeEnum._1;

  /**
   * * U - Return USB (Universal Segmentation Buffer) * I - Return Individual fields    * N - Dont send Segmentation codes 
   */
  @JsonAdapter(SegmentationCodesFlagEnum.Adapter.class)
  public enum SegmentationCodesFlagEnum {
    U("U"),
    
    I("I"),
    
    N("N");

    private String value;

    SegmentationCodesFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SegmentationCodesFlagEnum fromValue(String value) {
      for (SegmentationCodesFlagEnum b : SegmentationCodesFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SegmentationCodesFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SegmentationCodesFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SegmentationCodesFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SegmentationCodesFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEGMENTATION_CODES_FLAG = "segmentationCodesFlag";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_CODES_FLAG)
  private SegmentationCodesFlagEnum segmentationCodesFlag;

  /**
   * If this flag is not sent then by default it is considered as N * If the flag value is &#39;Y&#39;, then will return additional addresses (like Secondary Address), if any, along with Primary Address. * If the flag value is &#39;N&#39; then will return only Primary Address. 
   */
  @JsonAdapter(SendOtherAddrAlsoFlagEnum.Adapter.class)
  public enum SendOtherAddrAlsoFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendOtherAddrAlsoFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendOtherAddrAlsoFlagEnum fromValue(String value) {
      for (SendOtherAddrAlsoFlagEnum b : SendOtherAddrAlsoFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendOtherAddrAlsoFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendOtherAddrAlsoFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendOtherAddrAlsoFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendOtherAddrAlsoFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_OTHER_ADDR_ALSO_FLAG = "sendOtherAddrAlsoFlag";
  @SerializedName(SERIALIZED_NAME_SEND_OTHER_ADDR_ALSO_FLAG)
  private SendOtherAddrAlsoFlagEnum sendOtherAddrAlsoFlag = SendOtherAddrAlsoFlagEnum.N;

  public static final String SERIALIZED_NAME_CUSTOMER_KYC_DETAILS_ACTIVE_FLAG = "customerKycDetailsActiveFlag";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_KYC_DETAILS_ACTIVE_FLAG)
  private String customerKycDetailsActiveFlag;

  /**
   * * If this flag is not sent then by default will look in Full customers. * If the flag value is Y, then will look in Full + Partial customers. * If the flag value is N then will look in only Full customers. 
   */
  @JsonAdapter(SendPartialCustomerFlagEnum.Adapter.class)
  public enum SendPartialCustomerFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendPartialCustomerFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendPartialCustomerFlagEnum fromValue(String value) {
      for (SendPartialCustomerFlagEnum b : SendPartialCustomerFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendPartialCustomerFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendPartialCustomerFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendPartialCustomerFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendPartialCustomerFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_PARTIAL_CUSTOMER_FLAG = "sendPartialCustomerFlag";
  @SerializedName(SERIALIZED_NAME_SEND_PARTIAL_CUSTOMER_FLAG)
  private SendPartialCustomerFlagEnum sendPartialCustomerFlag = SendPartialCustomerFlagEnum.N;

  /**
   * This flag is applicale only for non key based looked based on ISDCodePlusPhoneNumber. * If this flag is not sent then by default will look in both Primary + Mobile. * If the flag value is Y, then will look in Mobile only. * If the flag value is N then will look in both Primary + Mobile&#39; 
   */
  @JsonAdapter(CheckOnlyForMobileEnum.Adapter.class)
  public enum CheckOnlyForMobileEnum {
    Y("Y"),
    
    N("N");

    private String value;

    CheckOnlyForMobileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CheckOnlyForMobileEnum fromValue(String value) {
      for (CheckOnlyForMobileEnum b : CheckOnlyForMobileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CheckOnlyForMobileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CheckOnlyForMobileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CheckOnlyForMobileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CheckOnlyForMobileEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHECK_ONLY_FOR_MOBILE = "checkOnlyForMobile";
  @SerializedName(SERIALIZED_NAME_CHECK_ONLY_FOR_MOBILE)
  private CheckOnlyForMobileEnum checkOnlyForMobile = CheckOnlyForMobileEnum.N;

  /**
   * This flag would indicate that the response should include Partner details or not.  * If this flag is not sent then by default the response will not include Partner details.  * If the flag value is Y, then the response will include Partner details if present. * If the flag value is N then the response will not include Partner details. 
   */
  @JsonAdapter(SendPartnerDetailsEnum.Adapter.class)
  public enum SendPartnerDetailsEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendPartnerDetailsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendPartnerDetailsEnum fromValue(String value) {
      for (SendPartnerDetailsEnum b : SendPartnerDetailsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendPartnerDetailsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendPartnerDetailsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendPartnerDetailsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendPartnerDetailsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_PARTNER_DETAILS = "sendPartnerDetails";
  @SerializedName(SERIALIZED_NAME_SEND_PARTNER_DETAILS)
  private SendPartnerDetailsEnum sendPartnerDetails = SendPartnerDetailsEnum.N;

  public static final String SERIALIZED_NAME_CHANNEL_TYPE = "channelType";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TYPE)
  private Integer channelType;

  /**
   * This flag would indicate that the search should include Convenience or not.  * If this flag is not sent then by default the search will be for Customers only.  * If the flag value is Y, then the search will be for both Convenience and Customers.  * If the flag value is N then the search will be for Customers only. 
   */
  @JsonAdapter(IncludeConvenienceFlagEnum.Adapter.class)
  public enum IncludeConvenienceFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    IncludeConvenienceFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncludeConvenienceFlagEnum fromValue(String value) {
      for (IncludeConvenienceFlagEnum b : IncludeConvenienceFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncludeConvenienceFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncludeConvenienceFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncludeConvenienceFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncludeConvenienceFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INCLUDE_CONVENIENCE_FLAG = "includeConvenienceFlag";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CONVENIENCE_FLAG)
  private IncludeConvenienceFlagEnum includeConvenienceFlag = IncludeConvenienceFlagEnum.N;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform = "W";

  /**
   * This flag indicates to return Customer(s) with LevelCode - XXC, WU6, WU7 or not. By default, this flag will be set as &#39;N&#39;. * Y - Customer(s) with LevelCode - XXC, WU6, WU7 will also be returned. * N - Customer(s) with LevelCode - XXC, WU6, WU7 will not be returned. 
   */
  @JsonAdapter(SendAllPfcEnum.Adapter.class)
  public enum SendAllPfcEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendAllPfcEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendAllPfcEnum fromValue(String value) {
      for (SendAllPfcEnum b : SendAllPfcEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendAllPfcEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendAllPfcEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendAllPfcEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendAllPfcEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_ALL_PFC = "sendAllPfc";
  @SerializedName(SERIALIZED_NAME_SEND_ALL_PFC)
  private SendAllPfcEnum sendAllPfc = SendAllPfcEnum.N;

  /**
   * Flag which indicates to/not to convert the Special Characters to ASCII for Sender &amp; Receiver details (Name, Address, Address in UAB). For Loyalty, this flag will be defaulted to Y. * If not passed in the request, as is values will be returned in response by default. * If passed as N in the request, as is values will be returned in response. * If passed as Y in the request, the Special Characters will be converted to ASCII and will be returned in response. 
   */
  @JsonAdapter(EnableTransliterationFlagEnum.Adapter.class)
  public enum EnableTransliterationFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EnableTransliterationFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnableTransliterationFlagEnum fromValue(String value) {
      for (EnableTransliterationFlagEnum b : EnableTransliterationFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnableTransliterationFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnableTransliterationFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnableTransliterationFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnableTransliterationFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENABLE_TRANSLITERATION_FLAG = "enableTransliterationFlag";
  @SerializedName(SERIALIZED_NAME_ENABLE_TRANSLITERATION_FLAG)
  private EnableTransliterationFlagEnum enableTransliterationFlag = EnableTransliterationFlagEnum.N;

  /**
   * If this flag is not sent then by default it is considered as N * If the flag value is &#39;Y&#39;, then will return additional funding sources (like funding sources added by TMT), if any, along with funding sources added by other than TMT. * If the flag value is &#39;N&#39; then will return Funding Sources which are added by other than TMT. 
   */
  @JsonAdapter(SendAllFundSrcEnum.Adapter.class)
  public enum SendAllFundSrcEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendAllFundSrcEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendAllFundSrcEnum fromValue(String value) {
      for (SendAllFundSrcEnum b : SendAllFundSrcEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendAllFundSrcEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendAllFundSrcEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendAllFundSrcEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendAllFundSrcEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_ALL_FUND_SRC = "sendAllFundSrc";
  @SerializedName(SERIALIZED_NAME_SEND_ALL_FUND_SRC)
  private SendAllFundSrcEnum sendAllFundSrc = SendAllFundSrcEnum.N;

  /**
   * It is optional field in Customer Lookup depending upon which KYC details will be returned in Customer Lookup Response. If not passed in request, by default KYC details will be returned irrespective of the KycTypeId. If passed in request, KYC details will be returned for the KycTypeId passsed in the request. * 1 - ALTERNATE ID * 2 - SSN  * 3 - Drivers License * 4 - Matricular Consular Number * 5 - Passport * 6 - Visa * 7 - Green Card * 8 - Brazilian Tax ID * 9 - Tax ID * 99 - KYCTypeIDOther 
   */
  @JsonAdapter(KycTypeIdEnum.Adapter.class)
  public enum KycTypeIdEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_99(99);

    private Integer value;

    KycTypeIdEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KycTypeIdEnum fromValue(Integer value) {
      for (KycTypeIdEnum b : KycTypeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KycTypeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KycTypeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KycTypeIdEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return KycTypeIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_KYC_TYPE_ID = "kycTypeId";
  @SerializedName(SERIALIZED_NAME_KYC_TYPE_ID)
  private KycTypeIdEnum kycTypeId;

  /**
   * This flag would indicate to group the receivers or not. By deault, receivers will not be grouped and receivers details would be returend under customerReceivers section * Y - Group receivers based on receiverUniqueRef and receivers details would be returend under customerReceiversByUniqueRef section. * N - Do not group receivers and receivers details would be returend under customerReceivers section. 
   */
  @JsonAdapter(GroupReceiverEnum.Adapter.class)
  public enum GroupReceiverEnum {
    Y("Y"),
    
    N("N");

    private String value;

    GroupReceiverEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupReceiverEnum fromValue(String value) {
      for (GroupReceiverEnum b : GroupReceiverEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupReceiverEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupReceiverEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupReceiverEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupReceiverEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GROUP_RECEIVER = "groupReceiver";
  @SerializedName(SERIALIZED_NAME_GROUP_RECEIVER)
  private GroupReceiverEnum groupReceiver = GroupReceiverEnum.N;

  /**
   * This flag would indicate to return all the phoneVVStatus values or not. If available, PhoneVvStatus - N / L / M / P will be returned in response by default. * Y - PhoneVvStatus - Z / T / R / S / V / A / B / U / C / D will only be returned if available. * N - PhoneVvStatus - N / L / M / P will only be returned if available. 
   */
  @JsonAdapter(SendAllPhoneVvStatusEnum.Adapter.class)
  public enum SendAllPhoneVvStatusEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendAllPhoneVvStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendAllPhoneVvStatusEnum fromValue(String value) {
      for (SendAllPhoneVvStatusEnum b : SendAllPhoneVvStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendAllPhoneVvStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendAllPhoneVvStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendAllPhoneVvStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendAllPhoneVvStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_ALL_PHONE_VV_STATUS = "sendAllPhoneVvStatus";
  @SerializedName(SERIALIZED_NAME_SEND_ALL_PHONE_VV_STATUS)
  private SendAllPhoneVvStatusEnum sendAllPhoneVvStatus = SendAllPhoneVvStatusEnum.N;

  public static final String SERIALIZED_NAME_NO_OF_YEARS_IN_SEARCH = "noOfYearsInSearch";
  @SerializedName(SERIALIZED_NAME_NO_OF_YEARS_IN_SEARCH)
  private Integer noOfYearsInSearch;

  /**
   * This flag would indicate to include complete customer details or not (if a single match is found).   * If this flag value is N or not sent, then it will return limited details of the Customer.   * If the flag value is &#39;Y&#39;, then web service will return all the details of the Customer if a single match is found else will return limited details of the Customers. 
   */
  @JsonAdapter(SendAllCustomerDetailsEnum.Adapter.class)
  public enum SendAllCustomerDetailsEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendAllCustomerDetailsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendAllCustomerDetailsEnum fromValue(String value) {
      for (SendAllCustomerDetailsEnum b : SendAllCustomerDetailsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendAllCustomerDetailsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendAllCustomerDetailsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendAllCustomerDetailsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendAllCustomerDetailsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_ALL_CUSTOMER_DETAILS = "sendAllCustomerDetails";
  @SerializedName(SERIALIZED_NAME_SEND_ALL_CUSTOMER_DETAILS)
  private SendAllCustomerDetailsEnum sendAllCustomerDetails = SendAllCustomerDetailsEnum.N;

  /**
   * *Note: This field is deprecated. Please use enableCrossChannelFlag field instead.* * Flag which indicates to search across All profiles or only Primary UMN profile.   * If not passed in the request, all the profiles will be returned in response by default.   * If passed as N in the request, all the profiles will be returned in response.   * If passed as Y in the request, only the Primary UMN profile will be returned in response. 
   */
  @JsonAdapter(SendPrimaryProfileFlagEnum.Adapter.class)
  public enum SendPrimaryProfileFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendPrimaryProfileFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendPrimaryProfileFlagEnum fromValue(String value) {
      for (SendPrimaryProfileFlagEnum b : SendPrimaryProfileFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendPrimaryProfileFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendPrimaryProfileFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendPrimaryProfileFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendPrimaryProfileFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_PRIMARY_PROFILE_FLAG = "sendPrimaryProfileFlag";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SEND_PRIMARY_PROFILE_FLAG)
  private SendPrimaryProfileFlagEnum sendPrimaryProfileFlag = SendPrimaryProfileFlagEnum.N;

  /**
   * Flag which indicates to search across All profiles or only Primary UMN profile. * If not passed in the request, all the profiles will be returned in response by default. * If passed as N in the request, all the profiles will be returned in response. * If passed as Y in the request, then   * Only the Primary UMN profile will be returned in response.   * platform will get defaulted to A   * noOfYearsInSearch passed in the request will get ignored 
   */
  @JsonAdapter(EnableCrossChannelFlagEnum.Adapter.class)
  public enum EnableCrossChannelFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EnableCrossChannelFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnableCrossChannelFlagEnum fromValue(String value) {
      for (EnableCrossChannelFlagEnum b : EnableCrossChannelFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnableCrossChannelFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnableCrossChannelFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnableCrossChannelFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnableCrossChannelFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENABLE_CROSS_CHANNEL_FLAG = "enableCrossChannelFlag";
  @SerializedName(SERIALIZED_NAME_ENABLE_CROSS_CHANNEL_FLAG)
  private EnableCrossChannelFlagEnum enableCrossChannelFlag = EnableCrossChannelFlagEnum.N;

  /**
   * Flag which indicates to search across Secondary Digital profiles for key based lookup (CustomerUmn, PcpNumber, AccountTypeId + AccountNumber, PartnerId + PartnerKey, EmailValue). * If not passed in the request, secondary profiles will not be returned in response by default. * If passed as N in the request, secondary profiles will not be returned in response. * If passed as Y in the request, then secondary digital profiles will be returned in response. 
   */
  @JsonAdapter(SendSecondaryDigitalProfilesEnum.Adapter.class)
  public enum SendSecondaryDigitalProfilesEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendSecondaryDigitalProfilesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendSecondaryDigitalProfilesEnum fromValue(String value) {
      for (SendSecondaryDigitalProfilesEnum b : SendSecondaryDigitalProfilesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendSecondaryDigitalProfilesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendSecondaryDigitalProfilesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendSecondaryDigitalProfilesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendSecondaryDigitalProfilesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_SECONDARY_DIGITAL_PROFILES = "sendSecondaryDigitalProfiles";
  @SerializedName(SERIALIZED_NAME_SEND_SECONDARY_DIGITAL_PROFILES)
  private SendSecondaryDigitalProfilesEnum sendSecondaryDigitalProfiles = SendSecondaryDigitalProfilesEnum.N;

  /**
   * This flag would indicate to include consolidated funding sources from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return funding sources from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated funding sources from both primary &amp; scondary profiles. 
   */
  @JsonAdapter(SendConsolidatedFundingSourcesEnum.Adapter.class)
  public enum SendConsolidatedFundingSourcesEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendConsolidatedFundingSourcesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendConsolidatedFundingSourcesEnum fromValue(String value) {
      for (SendConsolidatedFundingSourcesEnum b : SendConsolidatedFundingSourcesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendConsolidatedFundingSourcesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendConsolidatedFundingSourcesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendConsolidatedFundingSourcesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendConsolidatedFundingSourcesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_CONSOLIDATED_FUNDING_SOURCES = "sendConsolidatedFundingSources";
  @SerializedName(SERIALIZED_NAME_SEND_CONSOLIDATED_FUNDING_SOURCES)
  private SendConsolidatedFundingSourcesEnum sendConsolidatedFundingSources = SendConsolidatedFundingSourcesEnum.N;

  /**
   * This flag would indicate to include consolidated receviers from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return receviers from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated receivers from both primary &amp; scondary profiles. 
   */
  @JsonAdapter(SendConsolidatedReceiversEnum.Adapter.class)
  public enum SendConsolidatedReceiversEnum {
    Y("Y"),
    
    N("N");

    private String value;

    SendConsolidatedReceiversEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendConsolidatedReceiversEnum fromValue(String value) {
      for (SendConsolidatedReceiversEnum b : SendConsolidatedReceiversEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendConsolidatedReceiversEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendConsolidatedReceiversEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendConsolidatedReceiversEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendConsolidatedReceiversEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEND_CONSOLIDATED_RECEIVERS = "sendConsolidatedReceivers";
  @SerializedName(SERIALIZED_NAME_SEND_CONSOLIDATED_RECEIVERS)
  private SendConsolidatedReceiversEnum sendConsolidatedReceivers = SendConsolidatedReceiversEnum.N;

  public static final String SERIALIZED_NAME_SEND_CUST_HAVING_ACCOUNT_FLAG = "sendCustHavingAccountFlag";
  @SerializedName(SERIALIZED_NAME_SEND_CUST_HAVING_ACCOUNT_FLAG)
  private List<Integer> sendCustHavingAccountFlag;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO2 = "countryCodeIso2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO2)
  private String countryCodeIso2;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO3 = "countryCodeIso3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO3)
  private String countryCodeIso3;

  public static final String SERIALIZED_NAME_REQUEST_INITIATED_BY = "requestInitiatedBy";
  @SerializedName(SERIALIZED_NAME_REQUEST_INITIATED_BY)
  private String requestInitiatedBy;

  public CustomerLookupRequest() {
  }

  public CustomerLookupRequest header(Header header) {
    
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nonnull
  public Header getHeader() {
    return header;
  }


  public void setHeader(Header header) {
    this.header = header;
  }


  public CustomerLookupRequest keyBased(Boolean keyBased) {
    
    this.keyBased = keyBased;
    return this;
  }

   /**
   * true-key based; false-non key based
   * @return keyBased
  **/
  @javax.annotation.Nonnull
  public Boolean getKeyBased() {
    return keyBased;
  }


  public void setKeyBased(Boolean keyBased) {
    this.keyBased = keyBased;
  }


  public CustomerLookupRequest customerLookup(CustomerLookup customerLookup) {
    
    this.customerLookup = customerLookup;
    return this;
  }

   /**
   * Get customerLookup
   * @return customerLookup
  **/
  @javax.annotation.Nonnull
  public CustomerLookup getCustomerLookup() {
    return customerLookup;
  }


  public void setCustomerLookup(CustomerLookup customerLookup) {
    this.customerLookup = customerLookup;
  }


  public CustomerLookupRequest startIndex(Integer startIndex) {
    
    this.startIndex = startIndex;
    return this;
  }

   /**
   * If StartIndex field is 0 or given value for this element is not available then web service will return customer&#39;s from Customer Sequence No #1 to number of Customer&#39;s specified in returnSize field. Presently, this is available for ISDCodePlusPhoneNumber lookup only. 
   * @return startIndex
  **/
  @javax.annotation.Nullable
  public Integer getStartIndex() {
    return startIndex;
  }


  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }


  public CustomerLookupRequest returnSize(Integer returnSize) {
    
    this.returnSize = returnSize;
    return this;
  }

   /**
   * If StartIndex field is &#39;X&#39; (greater than 0) then UCD will return customer&#39;s from Customer Sequence No #&#39;X+1&#39; to number of Customer&#39;s specified in returnSize field. Presently, this is available for ISDCodePlusPhoneNumber lookup only. 
   * @return returnSize
  **/
  @javax.annotation.Nullable
  public Integer getReturnSize() {
    return returnSize;
  }


  public void setReturnSize(Integer returnSize) {
    this.returnSize = returnSize;
  }


  public CustomerLookupRequest sendNonWuAlsoFlag(SendNonWuAlsoFlagEnum sendNonWuAlsoFlag) {
    
    this.sendNonWuAlsoFlag = sendNonWuAlsoFlag;
    return this;
  }

   /**
   * If this flag is not sent then by default will look in My_WU customers. * If the flag value is Y, then will look in My_WU+Non_My_WU customers. * If the flag value is N then will look in only My_WU Customers. 
   * @return sendNonWuAlsoFlag
  **/
  @javax.annotation.Nullable
  public SendNonWuAlsoFlagEnum getSendNonWuAlsoFlag() {
    return sendNonWuAlsoFlag;
  }


  public void setSendNonWuAlsoFlag(SendNonWuAlsoFlagEnum sendNonWuAlsoFlag) {
    this.sendNonWuAlsoFlag = sendNonWuAlsoFlag;
  }


  public CustomerLookupRequest receiverType(ReceiverTypeEnum receiverType) {
    
    this.receiverType = receiverType;
    return this;
  }

   /**
   * If this flag is not send then by default will look all the receivers * 1 - All Receivers * 2 - Active Receivers Only 
   * @return receiverType
  **/
  @javax.annotation.Nullable
  public ReceiverTypeEnum getReceiverType() {
    return receiverType;
  }


  public void setReceiverType(ReceiverTypeEnum receiverType) {
    this.receiverType = receiverType;
  }


  public CustomerLookupRequest segmentationCodesFlag(SegmentationCodesFlagEnum segmentationCodesFlag) {
    
    this.segmentationCodesFlag = segmentationCodesFlag;
    return this;
  }

   /**
   * * U - Return USB (Universal Segmentation Buffer) * I - Return Individual fields    * N - Dont send Segmentation codes 
   * @return segmentationCodesFlag
  **/
  @javax.annotation.Nullable
  public SegmentationCodesFlagEnum getSegmentationCodesFlag() {
    return segmentationCodesFlag;
  }


  public void setSegmentationCodesFlag(SegmentationCodesFlagEnum segmentationCodesFlag) {
    this.segmentationCodesFlag = segmentationCodesFlag;
  }


  public CustomerLookupRequest sendOtherAddrAlsoFlag(SendOtherAddrAlsoFlagEnum sendOtherAddrAlsoFlag) {
    
    this.sendOtherAddrAlsoFlag = sendOtherAddrAlsoFlag;
    return this;
  }

   /**
   * If this flag is not sent then by default it is considered as N * If the flag value is &#39;Y&#39;, then will return additional addresses (like Secondary Address), if any, along with Primary Address. * If the flag value is &#39;N&#39; then will return only Primary Address. 
   * @return sendOtherAddrAlsoFlag
  **/
  @javax.annotation.Nullable
  public SendOtherAddrAlsoFlagEnum getSendOtherAddrAlsoFlag() {
    return sendOtherAddrAlsoFlag;
  }


  public void setSendOtherAddrAlsoFlag(SendOtherAddrAlsoFlagEnum sendOtherAddrAlsoFlag) {
    this.sendOtherAddrAlsoFlag = sendOtherAddrAlsoFlag;
  }


  public CustomerLookupRequest customerKycDetailsActiveFlag(String customerKycDetailsActiveFlag) {
    
    this.customerKycDetailsActiveFlag = customerKycDetailsActiveFlag;
    return this;
  }

   /**
   * * ActiveRecords - Return records with Active Flag value as &#39;Y&#39; in DB * AllRecords - Return all records irrespective of Active Flag value in DB 
   * @return customerKycDetailsActiveFlag
  **/
  @javax.annotation.Nullable
  public String getCustomerKycDetailsActiveFlag() {
    return customerKycDetailsActiveFlag;
  }


  public void setCustomerKycDetailsActiveFlag(String customerKycDetailsActiveFlag) {
    this.customerKycDetailsActiveFlag = customerKycDetailsActiveFlag;
  }


  public CustomerLookupRequest sendPartialCustomerFlag(SendPartialCustomerFlagEnum sendPartialCustomerFlag) {
    
    this.sendPartialCustomerFlag = sendPartialCustomerFlag;
    return this;
  }

   /**
   * * If this flag is not sent then by default will look in Full customers. * If the flag value is Y, then will look in Full + Partial customers. * If the flag value is N then will look in only Full customers. 
   * @return sendPartialCustomerFlag
  **/
  @javax.annotation.Nullable
  public SendPartialCustomerFlagEnum getSendPartialCustomerFlag() {
    return sendPartialCustomerFlag;
  }


  public void setSendPartialCustomerFlag(SendPartialCustomerFlagEnum sendPartialCustomerFlag) {
    this.sendPartialCustomerFlag = sendPartialCustomerFlag;
  }


  public CustomerLookupRequest checkOnlyForMobile(CheckOnlyForMobileEnum checkOnlyForMobile) {
    
    this.checkOnlyForMobile = checkOnlyForMobile;
    return this;
  }

   /**
   * This flag is applicale only for non key based looked based on ISDCodePlusPhoneNumber. * If this flag is not sent then by default will look in both Primary + Mobile. * If the flag value is Y, then will look in Mobile only. * If the flag value is N then will look in both Primary + Mobile&#39; 
   * @return checkOnlyForMobile
  **/
  @javax.annotation.Nullable
  public CheckOnlyForMobileEnum getCheckOnlyForMobile() {
    return checkOnlyForMobile;
  }


  public void setCheckOnlyForMobile(CheckOnlyForMobileEnum checkOnlyForMobile) {
    this.checkOnlyForMobile = checkOnlyForMobile;
  }


  public CustomerLookupRequest sendPartnerDetails(SendPartnerDetailsEnum sendPartnerDetails) {
    
    this.sendPartnerDetails = sendPartnerDetails;
    return this;
  }

   /**
   * This flag would indicate that the response should include Partner details or not.  * If this flag is not sent then by default the response will not include Partner details.  * If the flag value is Y, then the response will include Partner details if present. * If the flag value is N then the response will not include Partner details. 
   * @return sendPartnerDetails
  **/
  @javax.annotation.Nullable
  public SendPartnerDetailsEnum getSendPartnerDetails() {
    return sendPartnerDetails;
  }


  public void setSendPartnerDetails(SendPartnerDetailsEnum sendPartnerDetails) {
    this.sendPartnerDetails = sendPartnerDetails;
  }


  public CustomerLookupRequest channelType(Integer channelType) {
    
    this.channelType = channelType;
    return this;
  }

   /**
   * Added as a part of LBP KYC Change for LBP Partner Integration ART. * It is optional field in Customer Lookup depending upon which CustomerKYCDetails and CustomerVerification will be returned in Customer Lookup Response. * If not passed in request, by default CustomerKYCDetails and CustomerVerification corresponding to Channel Type \&quot;1\&quot; is returned in Customer Lookup Response. 
   * @return channelType
  **/
  @javax.annotation.Nullable
  public Integer getChannelType() {
    return channelType;
  }


  public void setChannelType(Integer channelType) {
    this.channelType = channelType;
  }


  public CustomerLookupRequest includeConvenienceFlag(IncludeConvenienceFlagEnum includeConvenienceFlag) {
    
    this.includeConvenienceFlag = includeConvenienceFlag;
    return this;
  }

   /**
   * This flag would indicate that the search should include Convenience or not.  * If this flag is not sent then by default the search will be for Customers only.  * If the flag value is Y, then the search will be for both Convenience and Customers.  * If the flag value is N then the search will be for Customers only. 
   * @return includeConvenienceFlag
  **/
  @javax.annotation.Nullable
  public IncludeConvenienceFlagEnum getIncludeConvenienceFlag() {
    return includeConvenienceFlag;
  }


  public void setIncludeConvenienceFlag(IncludeConvenienceFlagEnum includeConvenienceFlag) {
    this.includeConvenienceFlag = includeConvenienceFlag;
  }


  public CustomerLookupRequest platform(String platform) {
    
    this.platform = platform;
    return this;
  }

   /**
   * Added as part of OVI/VIGO changes, where this flag is responsible for filtering out the OVI/VIGO customer based on the flag passed in the request. For Phoenix, this flag will be defaulted to A. * If the flag value is \&quot;A\&quot;, lookup details irrespective of platform will be returned. * If the flag value is \&quot;O\&quot;, lookup details who are part of OVI platform will be returned. * If the flag value is \&quot;V\&quot;, lookup details who are part of VIGO platform will be returned. * The default value is \&quot;W\&quot; and lookup details who are WU customers needs to be returned, but not OVI/VIGO. 
   * @return platform
  **/
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }


  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public CustomerLookupRequest sendAllPfc(SendAllPfcEnum sendAllPfc) {
    
    this.sendAllPfc = sendAllPfc;
    return this;
  }

   /**
   * This flag indicates to return Customer(s) with LevelCode - XXC, WU6, WU7 or not. By default, this flag will be set as &#39;N&#39;. * Y - Customer(s) with LevelCode - XXC, WU6, WU7 will also be returned. * N - Customer(s) with LevelCode - XXC, WU6, WU7 will not be returned. 
   * @return sendAllPfc
  **/
  @javax.annotation.Nullable
  public SendAllPfcEnum getSendAllPfc() {
    return sendAllPfc;
  }


  public void setSendAllPfc(SendAllPfcEnum sendAllPfc) {
    this.sendAllPfc = sendAllPfc;
  }


  public CustomerLookupRequest enableTransliterationFlag(EnableTransliterationFlagEnum enableTransliterationFlag) {
    
    this.enableTransliterationFlag = enableTransliterationFlag;
    return this;
  }

   /**
   * Flag which indicates to/not to convert the Special Characters to ASCII for Sender &amp; Receiver details (Name, Address, Address in UAB). For Loyalty, this flag will be defaulted to Y. * If not passed in the request, as is values will be returned in response by default. * If passed as N in the request, as is values will be returned in response. * If passed as Y in the request, the Special Characters will be converted to ASCII and will be returned in response. 
   * @return enableTransliterationFlag
  **/
  @javax.annotation.Nullable
  public EnableTransliterationFlagEnum getEnableTransliterationFlag() {
    return enableTransliterationFlag;
  }


  public void setEnableTransliterationFlag(EnableTransliterationFlagEnum enableTransliterationFlag) {
    this.enableTransliterationFlag = enableTransliterationFlag;
  }


  public CustomerLookupRequest sendAllFundSrc(SendAllFundSrcEnum sendAllFundSrc) {
    
    this.sendAllFundSrc = sendAllFundSrc;
    return this;
  }

   /**
   * If this flag is not sent then by default it is considered as N * If the flag value is &#39;Y&#39;, then will return additional funding sources (like funding sources added by TMT), if any, along with funding sources added by other than TMT. * If the flag value is &#39;N&#39; then will return Funding Sources which are added by other than TMT. 
   * @return sendAllFundSrc
  **/
  @javax.annotation.Nullable
  public SendAllFundSrcEnum getSendAllFundSrc() {
    return sendAllFundSrc;
  }


  public void setSendAllFundSrc(SendAllFundSrcEnum sendAllFundSrc) {
    this.sendAllFundSrc = sendAllFundSrc;
  }


  public CustomerLookupRequest kycTypeId(KycTypeIdEnum kycTypeId) {
    
    this.kycTypeId = kycTypeId;
    return this;
  }

   /**
   * It is optional field in Customer Lookup depending upon which KYC details will be returned in Customer Lookup Response. If not passed in request, by default KYC details will be returned irrespective of the KycTypeId. If passed in request, KYC details will be returned for the KycTypeId passsed in the request. * 1 - ALTERNATE ID * 2 - SSN  * 3 - Drivers License * 4 - Matricular Consular Number * 5 - Passport * 6 - Visa * 7 - Green Card * 8 - Brazilian Tax ID * 9 - Tax ID * 99 - KYCTypeIDOther 
   * @return kycTypeId
  **/
  @javax.annotation.Nullable
  public KycTypeIdEnum getKycTypeId() {
    return kycTypeId;
  }


  public void setKycTypeId(KycTypeIdEnum kycTypeId) {
    this.kycTypeId = kycTypeId;
  }


  public CustomerLookupRequest groupReceiver(GroupReceiverEnum groupReceiver) {
    
    this.groupReceiver = groupReceiver;
    return this;
  }

   /**
   * This flag would indicate to group the receivers or not. By deault, receivers will not be grouped and receivers details would be returend under customerReceivers section * Y - Group receivers based on receiverUniqueRef and receivers details would be returend under customerReceiversByUniqueRef section. * N - Do not group receivers and receivers details would be returend under customerReceivers section. 
   * @return groupReceiver
  **/
  @javax.annotation.Nullable
  public GroupReceiverEnum getGroupReceiver() {
    return groupReceiver;
  }


  public void setGroupReceiver(GroupReceiverEnum groupReceiver) {
    this.groupReceiver = groupReceiver;
  }


  public CustomerLookupRequest sendAllPhoneVvStatus(SendAllPhoneVvStatusEnum sendAllPhoneVvStatus) {
    
    this.sendAllPhoneVvStatus = sendAllPhoneVvStatus;
    return this;
  }

   /**
   * This flag would indicate to return all the phoneVVStatus values or not. If available, PhoneVvStatus - N / L / M / P will be returned in response by default. * Y - PhoneVvStatus - Z / T / R / S / V / A / B / U / C / D will only be returned if available. * N - PhoneVvStatus - N / L / M / P will only be returned if available. 
   * @return sendAllPhoneVvStatus
  **/
  @javax.annotation.Nullable
  public SendAllPhoneVvStatusEnum getSendAllPhoneVvStatus() {
    return sendAllPhoneVvStatus;
  }


  public void setSendAllPhoneVvStatus(SendAllPhoneVvStatusEnum sendAllPhoneVvStatus) {
    this.sendAllPhoneVvStatus = sendAllPhoneVvStatus;
  }


  public CustomerLookupRequest noOfYearsInSearch(Integer noOfYearsInSearch) {
    
    this.noOfYearsInSearch = noOfYearsInSearch;
    return this;
  }

   /**
   * This flag would indicate to include the number of years in search. For Phoenix, this flag will be defaulted to last 2 years, where the start date will be the first day of the start date&#39;s year.    * If this field value is 0 or not available or field is not available, then it will search across all the years.   * If this field is &#39;X&#39; (greater than 0) then UCD will search for last &#39;X&#39; number of years from the current timestamp. 
   * @return noOfYearsInSearch
  **/
  @javax.annotation.Nullable
  public Integer getNoOfYearsInSearch() {
    return noOfYearsInSearch;
  }


  public void setNoOfYearsInSearch(Integer noOfYearsInSearch) {
    this.noOfYearsInSearch = noOfYearsInSearch;
  }


  public CustomerLookupRequest sendAllCustomerDetails(SendAllCustomerDetailsEnum sendAllCustomerDetails) {
    
    this.sendAllCustomerDetails = sendAllCustomerDetails;
    return this;
  }

   /**
   * This flag would indicate to include complete customer details or not (if a single match is found).   * If this flag value is N or not sent, then it will return limited details of the Customer.   * If the flag value is &#39;Y&#39;, then web service will return all the details of the Customer if a single match is found else will return limited details of the Customers. 
   * @return sendAllCustomerDetails
  **/
  @javax.annotation.Nullable
  public SendAllCustomerDetailsEnum getSendAllCustomerDetails() {
    return sendAllCustomerDetails;
  }


  public void setSendAllCustomerDetails(SendAllCustomerDetailsEnum sendAllCustomerDetails) {
    this.sendAllCustomerDetails = sendAllCustomerDetails;
  }


  @Deprecated
  public CustomerLookupRequest sendPrimaryProfileFlag(SendPrimaryProfileFlagEnum sendPrimaryProfileFlag) {
    
    this.sendPrimaryProfileFlag = sendPrimaryProfileFlag;
    return this;
  }

   /**
   * *Note: This field is deprecated. Please use enableCrossChannelFlag field instead.* * Flag which indicates to search across All profiles or only Primary UMN profile.   * If not passed in the request, all the profiles will be returned in response by default.   * If passed as N in the request, all the profiles will be returned in response.   * If passed as Y in the request, only the Primary UMN profile will be returned in response. 
   * @return sendPrimaryProfileFlag
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public SendPrimaryProfileFlagEnum getSendPrimaryProfileFlag() {
    return sendPrimaryProfileFlag;
  }


  @Deprecated
  public void setSendPrimaryProfileFlag(SendPrimaryProfileFlagEnum sendPrimaryProfileFlag) {
    this.sendPrimaryProfileFlag = sendPrimaryProfileFlag;
  }


  public CustomerLookupRequest enableCrossChannelFlag(EnableCrossChannelFlagEnum enableCrossChannelFlag) {
    
    this.enableCrossChannelFlag = enableCrossChannelFlag;
    return this;
  }

   /**
   * Flag which indicates to search across All profiles or only Primary UMN profile. * If not passed in the request, all the profiles will be returned in response by default. * If passed as N in the request, all the profiles will be returned in response. * If passed as Y in the request, then   * Only the Primary UMN profile will be returned in response.   * platform will get defaulted to A   * noOfYearsInSearch passed in the request will get ignored 
   * @return enableCrossChannelFlag
  **/
  @javax.annotation.Nullable
  public EnableCrossChannelFlagEnum getEnableCrossChannelFlag() {
    return enableCrossChannelFlag;
  }


  public void setEnableCrossChannelFlag(EnableCrossChannelFlagEnum enableCrossChannelFlag) {
    this.enableCrossChannelFlag = enableCrossChannelFlag;
  }


  public CustomerLookupRequest sendSecondaryDigitalProfiles(SendSecondaryDigitalProfilesEnum sendSecondaryDigitalProfiles) {
    
    this.sendSecondaryDigitalProfiles = sendSecondaryDigitalProfiles;
    return this;
  }

   /**
   * Flag which indicates to search across Secondary Digital profiles for key based lookup (CustomerUmn, PcpNumber, AccountTypeId + AccountNumber, PartnerId + PartnerKey, EmailValue). * If not passed in the request, secondary profiles will not be returned in response by default. * If passed as N in the request, secondary profiles will not be returned in response. * If passed as Y in the request, then secondary digital profiles will be returned in response. 
   * @return sendSecondaryDigitalProfiles
  **/
  @javax.annotation.Nullable
  public SendSecondaryDigitalProfilesEnum getSendSecondaryDigitalProfiles() {
    return sendSecondaryDigitalProfiles;
  }


  public void setSendSecondaryDigitalProfiles(SendSecondaryDigitalProfilesEnum sendSecondaryDigitalProfiles) {
    this.sendSecondaryDigitalProfiles = sendSecondaryDigitalProfiles;
  }


  public CustomerLookupRequest sendConsolidatedFundingSources(SendConsolidatedFundingSourcesEnum sendConsolidatedFundingSources) {
    
    this.sendConsolidatedFundingSources = sendConsolidatedFundingSources;
    return this;
  }

   /**
   * This flag would indicate to include consolidated funding sources from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return funding sources from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated funding sources from both primary &amp; scondary profiles. 
   * @return sendConsolidatedFundingSources
  **/
  @javax.annotation.Nullable
  public SendConsolidatedFundingSourcesEnum getSendConsolidatedFundingSources() {
    return sendConsolidatedFundingSources;
  }


  public void setSendConsolidatedFundingSources(SendConsolidatedFundingSourcesEnum sendConsolidatedFundingSources) {
    this.sendConsolidatedFundingSources = sendConsolidatedFundingSources;
  }


  public CustomerLookupRequest sendConsolidatedReceivers(SendConsolidatedReceiversEnum sendConsolidatedReceivers) {
    
    this.sendConsolidatedReceivers = sendConsolidatedReceivers;
    return this;
  }

   /**
   * This flag would indicate to include consolidated receviers from both primary &amp; secondary profiles or not.   * If this flag value is &#39;N&#39; or not sent, then it will return receviers from primary profile only.   * If the flag value is &#39;Y&#39;, then web service will return consolidated receivers from both primary &amp; scondary profiles. 
   * @return sendConsolidatedReceivers
  **/
  @javax.annotation.Nullable
  public SendConsolidatedReceiversEnum getSendConsolidatedReceivers() {
    return sendConsolidatedReceivers;
  }


  public void setSendConsolidatedReceivers(SendConsolidatedReceiversEnum sendConsolidatedReceivers) {
    this.sendConsolidatedReceivers = sendConsolidatedReceivers;
  }


  public CustomerLookupRequest sendCustHavingAccountFlag(List<Integer> sendCustHavingAccountFlag) {
    
    this.sendCustHavingAccountFlag = sendCustHavingAccountFlag;
    return this;
  }

  public CustomerLookupRequest addSendCustHavingAccountFlagItem(Integer sendCustHavingAccountFlagItem) {
    if (this.sendCustHavingAccountFlag == null) {
      this.sendCustHavingAccountFlag = new ArrayList<>();
    }
    this.sendCustHavingAccountFlag.add(sendCustHavingAccountFlagItem);
    return this;
  }

   /**
   * This flag would indicate to return only those customers having the account type id&#39;s passed in this field. 
   * @return sendCustHavingAccountFlag
  **/
  @javax.annotation.Nullable
  public List<Integer> getSendCustHavingAccountFlag() {
    return sendCustHavingAccountFlag;
  }


  public void setSendCustHavingAccountFlag(List<Integer> sendCustHavingAccountFlag) {
    this.sendCustHavingAccountFlag = sendCustHavingAccountFlag;
  }


  public CustomerLookupRequest countryCodeIso2(String countryCodeIso2) {
    
    this.countryCodeIso2 = countryCodeIso2;
    return this;
  }

   /**
   * Country code in ISO2 format. e.g. AT, IN, US etc. If countryCodeIso1 is passed and if the country is SCV enbaled, then   * enableCrossChannelFlag will get defaulted to Y   * platform will get defaulted to A\\   * noOfYearsInSearch passed in the request will get ignored 
   * @return countryCodeIso2
  **/
  @javax.annotation.Nullable
  public String getCountryCodeIso2() {
    return countryCodeIso2;
  }


  public void setCountryCodeIso2(String countryCodeIso2) {
    this.countryCodeIso2 = countryCodeIso2;
  }


  public CustomerLookupRequest countryCodeIso3(String countryCodeIso3) {
    
    this.countryCodeIso3 = countryCodeIso3;
    return this;
  }

   /**
   * Country code in ISO3 format. e.g. AUT, IND, USA etc. If countryCodeIso1 is passed and if the country is SCV enbaled, then   * enableCrossChannelFlag will get defaulted to Y   * platform will get defaulted to A\\   * noOfYearsInSearch passed in the request will get ignored 
   * @return countryCodeIso3
  **/
  @javax.annotation.Nullable
  public String getCountryCodeIso3() {
    return countryCodeIso3;
  }


  public void setCountryCodeIso3(String countryCodeIso3) {
    this.countryCodeIso3 = countryCodeIso3;
  }


  public CustomerLookupRequest requestInitiatedBy(String requestInitiatedBy) {
    
    this.requestInitiatedBy = requestInitiatedBy;
    return this;
  }

   /**
   * To identify who has initiated the request.
   * @return requestInitiatedBy
  **/
  @javax.annotation.Nonnull
  public String getRequestInitiatedBy() {
    return requestInitiatedBy;
  }


  public void setRequestInitiatedBy(String requestInitiatedBy) {
    this.requestInitiatedBy = requestInitiatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerLookupRequest customerLookupRequest = (CustomerLookupRequest) o;
    return Objects.equals(this.header, customerLookupRequest.header) &&
        Objects.equals(this.keyBased, customerLookupRequest.keyBased) &&
        Objects.equals(this.customerLookup, customerLookupRequest.customerLookup) &&
        Objects.equals(this.startIndex, customerLookupRequest.startIndex) &&
        Objects.equals(this.returnSize, customerLookupRequest.returnSize) &&
        Objects.equals(this.sendNonWuAlsoFlag, customerLookupRequest.sendNonWuAlsoFlag) &&
        Objects.equals(this.receiverType, customerLookupRequest.receiverType) &&
        Objects.equals(this.segmentationCodesFlag, customerLookupRequest.segmentationCodesFlag) &&
        Objects.equals(this.sendOtherAddrAlsoFlag, customerLookupRequest.sendOtherAddrAlsoFlag) &&
        Objects.equals(this.customerKycDetailsActiveFlag, customerLookupRequest.customerKycDetailsActiveFlag) &&
        Objects.equals(this.sendPartialCustomerFlag, customerLookupRequest.sendPartialCustomerFlag) &&
        Objects.equals(this.checkOnlyForMobile, customerLookupRequest.checkOnlyForMobile) &&
        Objects.equals(this.sendPartnerDetails, customerLookupRequest.sendPartnerDetails) &&
        Objects.equals(this.channelType, customerLookupRequest.channelType) &&
        Objects.equals(this.includeConvenienceFlag, customerLookupRequest.includeConvenienceFlag) &&
        Objects.equals(this.platform, customerLookupRequest.platform) &&
        Objects.equals(this.sendAllPfc, customerLookupRequest.sendAllPfc) &&
        Objects.equals(this.enableTransliterationFlag, customerLookupRequest.enableTransliterationFlag) &&
        Objects.equals(this.sendAllFundSrc, customerLookupRequest.sendAllFundSrc) &&
        Objects.equals(this.kycTypeId, customerLookupRequest.kycTypeId) &&
        Objects.equals(this.groupReceiver, customerLookupRequest.groupReceiver) &&
        Objects.equals(this.sendAllPhoneVvStatus, customerLookupRequest.sendAllPhoneVvStatus) &&
        Objects.equals(this.noOfYearsInSearch, customerLookupRequest.noOfYearsInSearch) &&
        Objects.equals(this.sendAllCustomerDetails, customerLookupRequest.sendAllCustomerDetails) &&
        Objects.equals(this.sendPrimaryProfileFlag, customerLookupRequest.sendPrimaryProfileFlag) &&
        Objects.equals(this.enableCrossChannelFlag, customerLookupRequest.enableCrossChannelFlag) &&
        Objects.equals(this.sendSecondaryDigitalProfiles, customerLookupRequest.sendSecondaryDigitalProfiles) &&
        Objects.equals(this.sendConsolidatedFundingSources, customerLookupRequest.sendConsolidatedFundingSources) &&
        Objects.equals(this.sendConsolidatedReceivers, customerLookupRequest.sendConsolidatedReceivers) &&
        Objects.equals(this.sendCustHavingAccountFlag, customerLookupRequest.sendCustHavingAccountFlag) &&
        Objects.equals(this.countryCodeIso2, customerLookupRequest.countryCodeIso2) &&
        Objects.equals(this.countryCodeIso3, customerLookupRequest.countryCodeIso3) &&
        Objects.equals(this.requestInitiatedBy, customerLookupRequest.requestInitiatedBy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, keyBased, customerLookup, startIndex, returnSize, sendNonWuAlsoFlag, receiverType, segmentationCodesFlag, sendOtherAddrAlsoFlag, customerKycDetailsActiveFlag, sendPartialCustomerFlag, checkOnlyForMobile, sendPartnerDetails, channelType, includeConvenienceFlag, platform, sendAllPfc, enableTransliterationFlag, sendAllFundSrc, kycTypeId, groupReceiver, sendAllPhoneVvStatus, noOfYearsInSearch, sendAllCustomerDetails, sendPrimaryProfileFlag, enableCrossChannelFlag, sendSecondaryDigitalProfiles, sendConsolidatedFundingSources, sendConsolidatedReceivers, sendCustHavingAccountFlag, countryCodeIso2, countryCodeIso3, requestInitiatedBy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerLookupRequest {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    keyBased: ").append(toIndentedString(keyBased)).append("\n");
    sb.append("    customerLookup: ").append(toIndentedString(customerLookup)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("    returnSize: ").append(toIndentedString(returnSize)).append("\n");
    sb.append("    sendNonWuAlsoFlag: ").append(toIndentedString(sendNonWuAlsoFlag)).append("\n");
    sb.append("    receiverType: ").append(toIndentedString(receiverType)).append("\n");
    sb.append("    segmentationCodesFlag: ").append(toIndentedString(segmentationCodesFlag)).append("\n");
    sb.append("    sendOtherAddrAlsoFlag: ").append(toIndentedString(sendOtherAddrAlsoFlag)).append("\n");
    sb.append("    customerKycDetailsActiveFlag: ").append(toIndentedString(customerKycDetailsActiveFlag)).append("\n");
    sb.append("    sendPartialCustomerFlag: ").append(toIndentedString(sendPartialCustomerFlag)).append("\n");
    sb.append("    checkOnlyForMobile: ").append(toIndentedString(checkOnlyForMobile)).append("\n");
    sb.append("    sendPartnerDetails: ").append(toIndentedString(sendPartnerDetails)).append("\n");
    sb.append("    channelType: ").append(toIndentedString(channelType)).append("\n");
    sb.append("    includeConvenienceFlag: ").append(toIndentedString(includeConvenienceFlag)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    sendAllPfc: ").append(toIndentedString(sendAllPfc)).append("\n");
    sb.append("    enableTransliterationFlag: ").append(toIndentedString(enableTransliterationFlag)).append("\n");
    sb.append("    sendAllFundSrc: ").append(toIndentedString(sendAllFundSrc)).append("\n");
    sb.append("    kycTypeId: ").append(toIndentedString(kycTypeId)).append("\n");
    sb.append("    groupReceiver: ").append(toIndentedString(groupReceiver)).append("\n");
    sb.append("    sendAllPhoneVvStatus: ").append(toIndentedString(sendAllPhoneVvStatus)).append("\n");
    sb.append("    noOfYearsInSearch: ").append(toIndentedString(noOfYearsInSearch)).append("\n");
    sb.append("    sendAllCustomerDetails: ").append(toIndentedString(sendAllCustomerDetails)).append("\n");
    sb.append("    sendPrimaryProfileFlag: ").append(toIndentedString(sendPrimaryProfileFlag)).append("\n");
    sb.append("    enableCrossChannelFlag: ").append(toIndentedString(enableCrossChannelFlag)).append("\n");
    sb.append("    sendSecondaryDigitalProfiles: ").append(toIndentedString(sendSecondaryDigitalProfiles)).append("\n");
    sb.append("    sendConsolidatedFundingSources: ").append(toIndentedString(sendConsolidatedFundingSources)).append("\n");
    sb.append("    sendConsolidatedReceivers: ").append(toIndentedString(sendConsolidatedReceivers)).append("\n");
    sb.append("    sendCustHavingAccountFlag: ").append(toIndentedString(sendCustHavingAccountFlag)).append("\n");
    sb.append("    countryCodeIso2: ").append(toIndentedString(countryCodeIso2)).append("\n");
    sb.append("    countryCodeIso3: ").append(toIndentedString(countryCodeIso3)).append("\n");
    sb.append("    requestInitiatedBy: ").append(toIndentedString(requestInitiatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("keyBased");
    openapiFields.add("customerLookup");
    openapiFields.add("startIndex");
    openapiFields.add("returnSize");
    openapiFields.add("sendNonWuAlsoFlag");
    openapiFields.add("receiverType");
    openapiFields.add("segmentationCodesFlag");
    openapiFields.add("sendOtherAddrAlsoFlag");
    openapiFields.add("customerKycDetailsActiveFlag");
    openapiFields.add("sendPartialCustomerFlag");
    openapiFields.add("checkOnlyForMobile");
    openapiFields.add("sendPartnerDetails");
    openapiFields.add("channelType");
    openapiFields.add("includeConvenienceFlag");
    openapiFields.add("platform");
    openapiFields.add("sendAllPfc");
    openapiFields.add("enableTransliterationFlag");
    openapiFields.add("sendAllFundSrc");
    openapiFields.add("kycTypeId");
    openapiFields.add("groupReceiver");
    openapiFields.add("sendAllPhoneVvStatus");
    openapiFields.add("noOfYearsInSearch");
    openapiFields.add("sendAllCustomerDetails");
    openapiFields.add("sendPrimaryProfileFlag");
    openapiFields.add("enableCrossChannelFlag");
    openapiFields.add("sendSecondaryDigitalProfiles");
    openapiFields.add("sendConsolidatedFundingSources");
    openapiFields.add("sendConsolidatedReceivers");
    openapiFields.add("sendCustHavingAccountFlag");
    openapiFields.add("countryCodeIso2");
    openapiFields.add("countryCodeIso3");
    openapiFields.add("requestInitiatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("header");
    openapiRequiredFields.add("keyBased");
    openapiRequiredFields.add("customerLookup");
    openapiRequiredFields.add("requestInitiatedBy");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerLookupRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerLookupRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerLookupRequest is not found in the empty JSON string", CustomerLookupRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerLookupRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerLookupRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerLookupRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `header`
      Header.validateJsonObject(jsonObj.getAsJsonObject("header"));
      // validate the required field `customerLookup`
      CustomerLookup.validateJsonObject(jsonObj.getAsJsonObject("customerLookup"));
      if ((jsonObj.get("sendNonWuAlsoFlag") != null && !jsonObj.get("sendNonWuAlsoFlag").isJsonNull()) && !jsonObj.get("sendNonWuAlsoFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendNonWuAlsoFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendNonWuAlsoFlag").toString()));
      }
      if ((jsonObj.get("receiverType") != null && !jsonObj.get("receiverType").isJsonNull()) && !jsonObj.get("receiverType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverType").toString()));
      }
      if ((jsonObj.get("segmentationCodesFlag") != null && !jsonObj.get("segmentationCodesFlag").isJsonNull()) && !jsonObj.get("segmentationCodesFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentationCodesFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segmentationCodesFlag").toString()));
      }
      if ((jsonObj.get("sendOtherAddrAlsoFlag") != null && !jsonObj.get("sendOtherAddrAlsoFlag").isJsonNull()) && !jsonObj.get("sendOtherAddrAlsoFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendOtherAddrAlsoFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendOtherAddrAlsoFlag").toString()));
      }
      if ((jsonObj.get("customerKycDetailsActiveFlag") != null && !jsonObj.get("customerKycDetailsActiveFlag").isJsonNull()) && !jsonObj.get("customerKycDetailsActiveFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerKycDetailsActiveFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerKycDetailsActiveFlag").toString()));
      }
      if ((jsonObj.get("sendPartialCustomerFlag") != null && !jsonObj.get("sendPartialCustomerFlag").isJsonNull()) && !jsonObj.get("sendPartialCustomerFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendPartialCustomerFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendPartialCustomerFlag").toString()));
      }
      if ((jsonObj.get("checkOnlyForMobile") != null && !jsonObj.get("checkOnlyForMobile").isJsonNull()) && !jsonObj.get("checkOnlyForMobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkOnlyForMobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkOnlyForMobile").toString()));
      }
      if ((jsonObj.get("sendPartnerDetails") != null && !jsonObj.get("sendPartnerDetails").isJsonNull()) && !jsonObj.get("sendPartnerDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendPartnerDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendPartnerDetails").toString()));
      }
      if ((jsonObj.get("includeConvenienceFlag") != null && !jsonObj.get("includeConvenienceFlag").isJsonNull()) && !jsonObj.get("includeConvenienceFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeConvenienceFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("includeConvenienceFlag").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("sendAllPfc") != null && !jsonObj.get("sendAllPfc").isJsonNull()) && !jsonObj.get("sendAllPfc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendAllPfc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendAllPfc").toString()));
      }
      if ((jsonObj.get("enableTransliterationFlag") != null && !jsonObj.get("enableTransliterationFlag").isJsonNull()) && !jsonObj.get("enableTransliterationFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableTransliterationFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enableTransliterationFlag").toString()));
      }
      if ((jsonObj.get("sendAllFundSrc") != null && !jsonObj.get("sendAllFundSrc").isJsonNull()) && !jsonObj.get("sendAllFundSrc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendAllFundSrc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendAllFundSrc").toString()));
      }
      if ((jsonObj.get("groupReceiver") != null && !jsonObj.get("groupReceiver").isJsonNull()) && !jsonObj.get("groupReceiver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupReceiver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupReceiver").toString()));
      }
      if ((jsonObj.get("sendAllPhoneVvStatus") != null && !jsonObj.get("sendAllPhoneVvStatus").isJsonNull()) && !jsonObj.get("sendAllPhoneVvStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendAllPhoneVvStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendAllPhoneVvStatus").toString()));
      }
      if ((jsonObj.get("sendAllCustomerDetails") != null && !jsonObj.get("sendAllCustomerDetails").isJsonNull()) && !jsonObj.get("sendAllCustomerDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendAllCustomerDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendAllCustomerDetails").toString()));
      }
      if ((jsonObj.get("sendPrimaryProfileFlag") != null && !jsonObj.get("sendPrimaryProfileFlag").isJsonNull()) && !jsonObj.get("sendPrimaryProfileFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendPrimaryProfileFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendPrimaryProfileFlag").toString()));
      }
      if ((jsonObj.get("enableCrossChannelFlag") != null && !jsonObj.get("enableCrossChannelFlag").isJsonNull()) && !jsonObj.get("enableCrossChannelFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableCrossChannelFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enableCrossChannelFlag").toString()));
      }
      if ((jsonObj.get("sendSecondaryDigitalProfiles") != null && !jsonObj.get("sendSecondaryDigitalProfiles").isJsonNull()) && !jsonObj.get("sendSecondaryDigitalProfiles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendSecondaryDigitalProfiles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendSecondaryDigitalProfiles").toString()));
      }
      if ((jsonObj.get("sendConsolidatedFundingSources") != null && !jsonObj.get("sendConsolidatedFundingSources").isJsonNull()) && !jsonObj.get("sendConsolidatedFundingSources").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendConsolidatedFundingSources` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendConsolidatedFundingSources").toString()));
      }
      if ((jsonObj.get("sendConsolidatedReceivers") != null && !jsonObj.get("sendConsolidatedReceivers").isJsonNull()) && !jsonObj.get("sendConsolidatedReceivers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendConsolidatedReceivers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendConsolidatedReceivers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sendCustHavingAccountFlag") != null && !jsonObj.get("sendCustHavingAccountFlag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendCustHavingAccountFlag` to be an array in the JSON string but got `%s`", jsonObj.get("sendCustHavingAccountFlag").toString()));
      }
      if ((jsonObj.get("countryCodeIso2") != null && !jsonObj.get("countryCodeIso2").isJsonNull()) && !jsonObj.get("countryCodeIso2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCodeIso2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCodeIso2").toString()));
      }
      if ((jsonObj.get("countryCodeIso3") != null && !jsonObj.get("countryCodeIso3").isJsonNull()) && !jsonObj.get("countryCodeIso3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCodeIso3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCodeIso3").toString()));
      }
      if (!jsonObj.get("requestInitiatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestInitiatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestInitiatedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerLookupRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerLookupRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerLookupRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerLookupRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerLookupRequest>() {
           @Override
           public void write(JsonWriter out, CustomerLookupRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerLookupRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerLookupRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerLookupRequest
  * @throws IOException if the JSON string is invalid with respect to CustomerLookupRequest
  */
  public static CustomerLookupRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerLookupRequest.class);
  }

 /**
  * Convert an instance of CustomerLookupRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

