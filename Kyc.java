/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * Kyc
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class Kyc {
  /**
   * KYCType ID Values * 1 - ALTERNATE ID * 2 - SSN / Tax ID * 3 - Drivers License * 4 - Matricular Consular Number * 5 - Passport * 6 - Visa * 7 - Green Card * 99 - KYCTypeIDOther. 
   */
  @JsonAdapter(KycTypeIdEnum.Adapter.class)
  public enum KycTypeIdEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_99(99);

    private Integer value;

    KycTypeIdEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KycTypeIdEnum fromValue(Integer value) {
      for (KycTypeIdEnum b : KycTypeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KycTypeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KycTypeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KycTypeIdEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return KycTypeIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_KYC_TYPE_ID = "kycTypeId";
  @SerializedName(SERIALIZED_NAME_KYC_TYPE_ID)
  private KycTypeIdEnum kycTypeId;

  public static final String SERIALIZED_NAME_KYC_SEQUENCE = "kycSequence";
  @SerializedName(SERIALIZED_NAME_KYC_SEQUENCE)
  private Integer kycSequence;

  public static final String SERIALIZED_NAME_KYC_VALUE = "kycValue";
  @SerializedName(SERIALIZED_NAME_KYC_VALUE)
  private String kycValue;

  public static final String SERIALIZED_NAME_MT_EXP_FLAG = "mtExpFlag";
  @SerializedName(SERIALIZED_NAME_MT_EXP_FLAG)
  private String mtExpFlag;

  public static final String SERIALIZED_NAME_KYC_ISSUER = "kycIssuer";
  @SerializedName(SERIALIZED_NAME_KYC_ISSUER)
  private String kycIssuer;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "templateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_ISSUED_DATE = "issuedDate";
  @SerializedName(SERIALIZED_NAME_ISSUED_DATE)
  private LocalDate issuedDate;

  public static final String SERIALIZED_NAME_ISSUED_PLACE = "issuedPlace";
  @SerializedName(SERIALIZED_NAME_ISSUED_PLACE)
  private String issuedPlace;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private LocalDate expiryDate;

  public static final String SERIALIZED_NAME_REFERENCE_FOR_KYC_TYPE_ID_OTHER = "referenceForKycTypeIdOther";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FOR_KYC_TYPE_ID_OTHER)
  private String referenceForKycTypeIdOther;

  public static final String SERIALIZED_NAME_DOC_REF_NUM = "docRefNum";
  @SerializedName(SERIALIZED_NAME_DOC_REF_NUM)
  private String docRefNum;

  public Kyc() {
  }

  public Kyc kycTypeId(KycTypeIdEnum kycTypeId) {
    
    this.kycTypeId = kycTypeId;
    return this;
  }

   /**
   * KYCType ID Values * 1 - ALTERNATE ID * 2 - SSN / Tax ID * 3 - Drivers License * 4 - Matricular Consular Number * 5 - Passport * 6 - Visa * 7 - Green Card * 99 - KYCTypeIDOther. 
   * @return kycTypeId
  **/
  @javax.annotation.Nonnull
  public KycTypeIdEnum getKycTypeId() {
    return kycTypeId;
  }


  public void setKycTypeId(KycTypeIdEnum kycTypeId) {
    this.kycTypeId = kycTypeId;
  }


  public Kyc kycSequence(Integer kycSequence) {
    
    this.kycSequence = kycSequence;
    return this;
  }

   /**
   * This is a DB sequence number created on Customer&#39;s KYC and is to be supplied by clients for update operations.
   * @return kycSequence
  **/
  @javax.annotation.Nullable
  public Integer getKycSequence() {
    return kycSequence;
  }


  public void setKycSequence(Integer kycSequence) {
    this.kycSequence = kycSequence;
  }


  public Kyc kycValue(String kycValue) {
    
    this.kycValue = kycValue;
    return this;
  }

   /**
   * Actual KYC Value of the Customer. e.g. Alternate ID Number / SSN Number /Passport Number / Visa Number / Green Card Number / Driver License Number / Matricular Consular Number etc.
   * @return kycValue
  **/
  @javax.annotation.Nullable
  public String getKycValue() {
    return kycValue;
  }


  public void setKycValue(String kycValue) {
    this.kycValue = kycValue;
  }


  public Kyc mtExpFlag(String mtExpFlag) {
    
    this.mtExpFlag = mtExpFlag;
    return this;
  }

   /**
   * This field indicates whether KYC value is coming from MTX system.
   * @return mtExpFlag
  **/
  @javax.annotation.Nullable
  public String getMtExpFlag() {
    return mtExpFlag;
  }


  public void setMtExpFlag(String mtExpFlag) {
    this.mtExpFlag = mtExpFlag;
  }


  public Kyc kycIssuer(String kycIssuer) {
    
    this.kycIssuer = kycIssuer;
    return this;
  }

   /**
   * Issuer name of the Customer KYC value. e.g. for SSN Value, Issuer will be - Social Security Office, USA.
   * @return kycIssuer
  **/
  @javax.annotation.Nullable
  public String getKycIssuer() {
    return kycIssuer;
  }


  public void setKycIssuer(String kycIssuer) {
    this.kycIssuer = kycIssuer;
  }


  public Kyc templateId(String templateId) {
    
    this.templateId = templateId;
    return this;
  }

   /**
   * Template ID signifies the Western Union template to collect the KYC values. Western Union has different templates based on country/agent.
   * @return templateId
  **/
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }


  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public Kyc issuedDate(LocalDate issuedDate) {
    
    this.issuedDate = issuedDate;
    return this;
  }

   /**
   * Date on which Customer&#39;s KYC was issued.
   * @return issuedDate
  **/
  @javax.annotation.Nullable
  public LocalDate getIssuedDate() {
    return issuedDate;
  }


  public void setIssuedDate(LocalDate issuedDate) {
    this.issuedDate = issuedDate;
  }


  public Kyc issuedPlace(String issuedPlace) {
    
    this.issuedPlace = issuedPlace;
    return this;
  }

   /**
   * Place at which Customer&#39;s KYC was issued.
   * @return issuedPlace
  **/
  @javax.annotation.Nullable
  public String getIssuedPlace() {
    return issuedPlace;
  }


  public void setIssuedPlace(String issuedPlace) {
    this.issuedPlace = issuedPlace;
  }


  public Kyc expiryDate(LocalDate expiryDate) {
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Date on which KYC issued to the Customer would expire.
   * @return expiryDate
  **/
  @javax.annotation.Nullable
  public LocalDate getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(LocalDate expiryDate) {
    this.expiryDate = expiryDate;
  }


  public Kyc referenceForKycTypeIdOther(String referenceForKycTypeIdOther) {
    
    this.referenceForKycTypeIdOther = referenceForKycTypeIdOther;
    return this;
  }

   /**
   * When the KYCTypeID 99 (Other) is selected, Client needs to send the reference/actual KYCTypeID value in this element.
   * @return referenceForKycTypeIdOther
  **/
  @javax.annotation.Nullable
  public String getReferenceForKycTypeIdOther() {
    return referenceForKycTypeIdOther;
  }


  public void setReferenceForKycTypeIdOther(String referenceForKycTypeIdOther) {
    this.referenceForKycTypeIdOther = referenceForKycTypeIdOther;
  }


  public Kyc docRefNum(String docRefNum) {
    
    this.docRefNum = docRefNum;
    return this;
  }

   /**
   * Document Reference Number.
   * @return docRefNum
  **/
  @javax.annotation.Nullable
  public String getDocRefNum() {
    return docRefNum;
  }


  public void setDocRefNum(String docRefNum) {
    this.docRefNum = docRefNum;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Kyc kyc = (Kyc) o;
    return Objects.equals(this.kycTypeId, kyc.kycTypeId) &&
        Objects.equals(this.kycSequence, kyc.kycSequence) &&
        Objects.equals(this.kycValue, kyc.kycValue) &&
        Objects.equals(this.mtExpFlag, kyc.mtExpFlag) &&
        Objects.equals(this.kycIssuer, kyc.kycIssuer) &&
        Objects.equals(this.templateId, kyc.templateId) &&
        Objects.equals(this.issuedDate, kyc.issuedDate) &&
        Objects.equals(this.issuedPlace, kyc.issuedPlace) &&
        Objects.equals(this.expiryDate, kyc.expiryDate) &&
        Objects.equals(this.referenceForKycTypeIdOther, kyc.referenceForKycTypeIdOther) &&
        Objects.equals(this.docRefNum, kyc.docRefNum);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(kycTypeId, kycSequence, kycValue, mtExpFlag, kycIssuer, templateId, issuedDate, issuedPlace, expiryDate, referenceForKycTypeIdOther, docRefNum);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Kyc {\n");
    sb.append("    kycTypeId: ").append(toIndentedString(kycTypeId)).append("\n");
    sb.append("    kycSequence: ").append(toIndentedString(kycSequence)).append("\n");
    sb.append("    kycValue: ").append(toIndentedString(kycValue)).append("\n");
    sb.append("    mtExpFlag: ").append(toIndentedString(mtExpFlag)).append("\n");
    sb.append("    kycIssuer: ").append(toIndentedString(kycIssuer)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    issuedDate: ").append(toIndentedString(issuedDate)).append("\n");
    sb.append("    issuedPlace: ").append(toIndentedString(issuedPlace)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    referenceForKycTypeIdOther: ").append(toIndentedString(referenceForKycTypeIdOther)).append("\n");
    sb.append("    docRefNum: ").append(toIndentedString(docRefNum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kycTypeId");
    openapiFields.add("kycSequence");
    openapiFields.add("kycValue");
    openapiFields.add("mtExpFlag");
    openapiFields.add("kycIssuer");
    openapiFields.add("templateId");
    openapiFields.add("issuedDate");
    openapiFields.add("issuedPlace");
    openapiFields.add("expiryDate");
    openapiFields.add("referenceForKycTypeIdOther");
    openapiFields.add("docRefNum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("kycTypeId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Kyc
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Kyc.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Kyc is not found in the empty JSON string", Kyc.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Kyc.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Kyc` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Kyc.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("kycValue") != null && !jsonObj.get("kycValue").isJsonNull()) && !jsonObj.get("kycValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kycValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kycValue").toString()));
      }
      if ((jsonObj.get("mtExpFlag") != null && !jsonObj.get("mtExpFlag").isJsonNull()) && !jsonObj.get("mtExpFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mtExpFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mtExpFlag").toString()));
      }
      if ((jsonObj.get("kycIssuer") != null && !jsonObj.get("kycIssuer").isJsonNull()) && !jsonObj.get("kycIssuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kycIssuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kycIssuer").toString()));
      }
      if ((jsonObj.get("templateId") != null && !jsonObj.get("templateId").isJsonNull()) && !jsonObj.get("templateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateId").toString()));
      }
      if ((jsonObj.get("issuedPlace") != null && !jsonObj.get("issuedPlace").isJsonNull()) && !jsonObj.get("issuedPlace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuedPlace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuedPlace").toString()));
      }
      if ((jsonObj.get("referenceForKycTypeIdOther") != null && !jsonObj.get("referenceForKycTypeIdOther").isJsonNull()) && !jsonObj.get("referenceForKycTypeIdOther").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceForKycTypeIdOther` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceForKycTypeIdOther").toString()));
      }
      if ((jsonObj.get("docRefNum") != null && !jsonObj.get("docRefNum").isJsonNull()) && !jsonObj.get("docRefNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docRefNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docRefNum").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Kyc.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Kyc' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Kyc> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Kyc.class));

       return (TypeAdapter<T>) new TypeAdapter<Kyc>() {
           @Override
           public void write(JsonWriter out, Kyc value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Kyc read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Kyc given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Kyc
  * @throws IOException if the JSON string is invalid with respect to Kyc
  */
  public static Kyc fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Kyc.class);
  }

 /**
  * Convert an instance of Kyc to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

