/*
 * ucd_pmgmt_v1_api
 * Swagger documentation for UCD Profile Management Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.JSON;

/**
 * Email
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T21:22:09.739306500+05:30[Asia/Calcutta]")
public class Email {
  /**
   * Email Type Values  * 1 Primary * 99-EmailTypeOther 
   */
  @JsonAdapter(EmailTypeEnum.Adapter.class)
  public enum EmailTypeEnum {
    NUMBER_1(1),
    
    NUMBER_99(99);

    private Integer value;

    EmailTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmailTypeEnum fromValue(Integer value) {
      for (EmailTypeEnum b : EmailTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmailTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmailTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmailTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return EmailTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMAIL_TYPE = "emailType";
  @SerializedName(SERIALIZED_NAME_EMAIL_TYPE)
  private EmailTypeEnum emailType;

  public static final String SERIALIZED_NAME_EMAIL_VALUE = "emailValue";
  @SerializedName(SERIALIZED_NAME_EMAIL_VALUE)
  private String emailValue;

  public static final String SERIALIZED_NAME_EMAIL_HASH = "emailHash";
  @SerializedName(SERIALIZED_NAME_EMAIL_HASH)
  private String emailHash;

  public static final String SERIALIZED_NAME_REFERENCE_FOR_EMAIL_TYPE_OTHER = "referenceForEmailTypeOther";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FOR_EMAIL_TYPE_OTHER)
  private String referenceForEmailTypeOther;

  public static final String SERIALIZED_NAME_EMAIL_VV_STATUS = "emailVvStatus";
  @SerializedName(SERIALIZED_NAME_EMAIL_VV_STATUS)
  private String emailVvStatus;

  public static final String SERIALIZED_NAME_EMAIL_VV_STATUS_BY = "emailVvStatusBy";
  @SerializedName(SERIALIZED_NAME_EMAIL_VV_STATUS_BY)
  private String emailVvStatusBy;

  public static final String SERIALIZED_NAME_EMAIL_VV_DATE = "emailVvDate";
  @SerializedName(SERIALIZED_NAME_EMAIL_VV_DATE)
  private OffsetDateTime emailVvDate;

  public Email() {
  }

  public Email emailType(EmailTypeEnum emailType) {
    
    this.emailType = emailType;
    return this;
  }

   /**
   * Email Type Values  * 1 Primary * 99-EmailTypeOther 
   * @return emailType
  **/
  @javax.annotation.Nonnull
  public EmailTypeEnum getEmailType() {
    return emailType;
  }


  public void setEmailType(EmailTypeEnum emailType) {
    this.emailType = emailType;
  }


  public Email emailValue(String emailValue) {
    
    this.emailValue = emailValue;
    return this;
  }

   /**
   * Customer&#39;s Email ID. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return emailValue
  **/
  @javax.annotation.Nonnull
  public String getEmailValue() {
    return emailValue;
  }


  public void setEmailValue(String emailValue) {
    this.emailValue = emailValue;
  }


  public Email emailHash(String emailHash) {
    
    this.emailHash = emailHash;
    return this;
  }

   /**
   * Customer&#39;s Email Hash which should be calculated only for gmail email addresses by removing the . (dot) and characters after + (plus) (including the + (plus)) and that too from the text prior to @ symbol. e.g. john.doe@yopmail.com should be sent as johndoe@gmail.com &amp; johndoe+1234@gmail.com should be sent as johndoe@gmail.com to UCD.
   * @return emailHash
  **/
  @javax.annotation.Nullable
  public String getEmailHash() {
    return emailHash;
  }


  public void setEmailHash(String emailHash) {
    this.emailHash = emailHash;
  }


  public Email referenceForEmailTypeOther(String referenceForEmailTypeOther) {
    
    this.referenceForEmailTypeOther = referenceForEmailTypeOther;
    return this;
  }

   /**
   * When the Email Type 99 (Other) is selected, Client needs to send the reference/actual Email type value in this element.
   * @return referenceForEmailTypeOther
  **/
  @javax.annotation.Nullable
  public String getReferenceForEmailTypeOther() {
    return referenceForEmailTypeOther;
  }


  public void setReferenceForEmailTypeOther(String referenceForEmailTypeOther) {
    this.referenceForEmailTypeOther = referenceForEmailTypeOther;
  }


  public Email emailVvStatus(String emailVvStatus) {
    
    this.emailVvStatus = emailVvStatus;
    return this;
  }

   /**
   * Email Verification and Validation Status * N - Not Verified * Y - Verified * I - In Progress * R - Rejected 
   * @return emailVvStatus
  **/
  @javax.annotation.Nullable
  public String getEmailVvStatus() {
    return emailVvStatus;
  }


  public void setEmailVvStatus(String emailVvStatus) {
    this.emailVvStatus = emailVvStatus;
  }


  public Email emailVvStatusBy(String emailVvStatusBy) {
    
    this.emailVvStatusBy = emailVvStatusBy;
    return this;
  }

   /**
   * Application/System/End User which added/updated the EmailVVStatus.
   * @return emailVvStatusBy
  **/
  @javax.annotation.Nullable
  public String getEmailVvStatusBy() {
    return emailVvStatusBy;
  }


  public void setEmailVvStatusBy(String emailVvStatusBy) {
    this.emailVvStatusBy = emailVvStatusBy;
  }


  public Email emailVvDate(OffsetDateTime emailVvDate) {
    
    this.emailVvDate = emailVvDate;
    return this;
  }

   /**
   * Timestamp when the EmailVVStatus was added/updated.
   * @return emailVvDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEmailVvDate() {
    return emailVvDate;
  }


  public void setEmailVvDate(OffsetDateTime emailVvDate) {
    this.emailVvDate = emailVvDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Email email = (Email) o;
    return Objects.equals(this.emailType, email.emailType) &&
        Objects.equals(this.emailValue, email.emailValue) &&
        Objects.equals(this.emailHash, email.emailHash) &&
        Objects.equals(this.referenceForEmailTypeOther, email.referenceForEmailTypeOther) &&
        Objects.equals(this.emailVvStatus, email.emailVvStatus) &&
        Objects.equals(this.emailVvStatusBy, email.emailVvStatusBy) &&
        Objects.equals(this.emailVvDate, email.emailVvDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailType, emailValue, emailHash, referenceForEmailTypeOther, emailVvStatus, emailVvStatusBy, emailVvDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Email {\n");
    sb.append("    emailType: ").append(toIndentedString(emailType)).append("\n");
    sb.append("    emailValue: ").append(toIndentedString(emailValue)).append("\n");
    sb.append("    emailHash: ").append(toIndentedString(emailHash)).append("\n");
    sb.append("    referenceForEmailTypeOther: ").append(toIndentedString(referenceForEmailTypeOther)).append("\n");
    sb.append("    emailVvStatus: ").append(toIndentedString(emailVvStatus)).append("\n");
    sb.append("    emailVvStatusBy: ").append(toIndentedString(emailVvStatusBy)).append("\n");
    sb.append("    emailVvDate: ").append(toIndentedString(emailVvDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("emailType");
    openapiFields.add("emailValue");
    openapiFields.add("emailHash");
    openapiFields.add("referenceForEmailTypeOther");
    openapiFields.add("emailVvStatus");
    openapiFields.add("emailVvStatusBy");
    openapiFields.add("emailVvDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("emailType");
    openapiRequiredFields.add("emailValue");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Email
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Email.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Email is not found in the empty JSON string", Email.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Email.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Email` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Email.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("emailValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailValue").toString()));
      }
      if ((jsonObj.get("emailHash") != null && !jsonObj.get("emailHash").isJsonNull()) && !jsonObj.get("emailHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailHash").toString()));
      }
      if ((jsonObj.get("referenceForEmailTypeOther") != null && !jsonObj.get("referenceForEmailTypeOther").isJsonNull()) && !jsonObj.get("referenceForEmailTypeOther").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceForEmailTypeOther` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceForEmailTypeOther").toString()));
      }
      if ((jsonObj.get("emailVvStatus") != null && !jsonObj.get("emailVvStatus").isJsonNull()) && !jsonObj.get("emailVvStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailVvStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailVvStatus").toString()));
      }
      if ((jsonObj.get("emailVvStatusBy") != null && !jsonObj.get("emailVvStatusBy").isJsonNull()) && !jsonObj.get("emailVvStatusBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailVvStatusBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailVvStatusBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Email.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Email' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Email> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Email.class));

       return (TypeAdapter<T>) new TypeAdapter<Email>() {
           @Override
           public void write(JsonWriter out, Email value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Email read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Email given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Email
  * @throws IOException if the JSON string is invalid with respect to Email
  */
  public static Email fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Email.class);
  }

 /**
  * Convert an instance of Email to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

