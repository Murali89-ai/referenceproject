/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * CustomerNonKey
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class CustomerNonKey {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Name name;

  public static final String SERIALIZED_NAME_ISD_CODE_PLUS_PHONE_NUMBER = "isdCodePlusPhoneNumber";
  @SerializedName(SERIALIZED_NAME_ISD_CODE_PLUS_PHONE_NUMBER)
  private String isdCodePlusPhoneNumber;

  public static final String SERIALIZED_NAME_ISD_CODE = "isdCode";
  @SerializedName(SERIALIZED_NAME_ISD_CODE)
  private String isdCode;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_EMAIL_VALUE = "emailValue";
  @SerializedName(SERIALIZED_NAME_EMAIL_VALUE)
  private String emailValue;

  public static final String SERIALIZED_NAME_EMAIL_HASH = "emailHash";
  @SerializedName(SERIALIZED_NAME_EMAIL_HASH)
  private String emailHash;

  public static final String SERIALIZED_NAME_CREDIT_CARD_NUMBER = "creditCardNumber";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD_NUMBER)
  private String creditCardNumber;

  public static final String SERIALIZED_NAME_KYC_VALUE = "kycValue";
  @SerializedName(SERIALIZED_NAME_KYC_VALUE)
  private String kycValue;

  public static final String SERIALIZED_NAME_WU_GOLD_CARD = "wuGoldCard";
  @SerializedName(SERIALIZED_NAME_WU_GOLD_CARD)
  private String wuGoldCard;

  public static final String SERIALIZED_NAME_ACCOUNT_KEY = "accountKey";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_KEY)
  private String accountKey;

  public CustomerNonKey() {
  }

  public CustomerNonKey name(Name name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public Name getName() {
    return name;
  }


  public void setName(Name name) {
    this.name = name;
  }


  public CustomerNonKey isdCodePlusPhoneNumber(String isdCodePlusPhoneNumber) {
    
    this.isdCodePlusPhoneNumber = isdCodePlusPhoneNumber;
    return this;
  }

   /**
   * Clients have to send either the phone number as is entered while inserting the data or the concatenated ISDCode + strippedOf(PhoneNumber) in this element.    - This value will be stripped of all the special characters and will search against PHONE_HASH column in PHONE table.    - If it doesn&#39;t find a match, then, the lookup will be done against the PHONE_NUMBER column with the value received as is from the request.    - This is a partial match with minimum 5 digit with IsdCode + Phone Number / Phone Number. 
   * @return isdCodePlusPhoneNumber
  **/
  @javax.annotation.Nullable
  public String getIsdCodePlusPhoneNumber() {
    return isdCodePlusPhoneNumber;
  }


  public void setIsdCodePlusPhoneNumber(String isdCodePlusPhoneNumber) {
    this.isdCodePlusPhoneNumber = isdCodePlusPhoneNumber;
  }


  public CustomerNonKey isdCode(String isdCode) {
    
    this.isdCode = isdCode;
    return this;
  }

   /**
   * Customer&#39;s International Dialing Code. e.g. 1 for USA, 44 for UK, 91 for India, etc
   * @return isdCode
  **/
  @javax.annotation.Nullable
  public String getIsdCode() {
    return isdCode;
  }


  public void setIsdCode(String isdCode) {
    this.isdCode = isdCode;
  }


  public CustomerNonKey phoneNumber(String phoneNumber) {
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Customer&#39;s Phone Number
   * @return phoneNumber
  **/
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public CustomerNonKey emailValue(String emailValue) {
    
    this.emailValue = emailValue;
    return this;
  }

   /**
   * Customer&#39;s Email ID
   * @return emailValue
  **/
  @javax.annotation.Nullable
  public String getEmailValue() {
    return emailValue;
  }


  public void setEmailValue(String emailValue) {
    this.emailValue = emailValue;
  }


  public CustomerNonKey emailHash(String emailHash) {
    
    this.emailHash = emailHash;
    return this;
  }

   /**
   * Customer&#39;s Email Hash
   * @return emailHash
  **/
  @javax.annotation.Nullable
  public String getEmailHash() {
    return emailHash;
  }


  public void setEmailHash(String emailHash) {
    this.emailHash = emailHash;
  }


  public CustomerNonKey creditCardNumber(String creditCardNumber) {
    
    this.creditCardNumber = creditCardNumber;
    return this;
  }

   /**
   * Customer&#39;s Credit Card Number
   * @return creditCardNumber
  **/
  @javax.annotation.Nullable
  public String getCreditCardNumber() {
    return creditCardNumber;
  }


  public void setCreditCardNumber(String creditCardNumber) {
    this.creditCardNumber = creditCardNumber;
  }


  public CustomerNonKey kycValue(String kycValue) {
    
    this.kycValue = kycValue;
    return this;
  }

   /**
   * Customer&#39;s ID Number. e.g. Alternate ID Number / SSN Number / Passport Number / Visa Number / Green Card Number / Driver License Number / Matricular Consular Number, etc
   * @return kycValue
  **/
  @javax.annotation.Nullable
  public String getKycValue() {
    return kycValue;
  }


  public void setKycValue(String kycValue) {
    this.kycValue = kycValue;
  }


  public CustomerNonKey wuGoldCard(String wuGoldCard) {
    
    this.wuGoldCard = wuGoldCard;
    return this;
  }

   /**
   * Customer&#39;s Gold Card Number
   * @return wuGoldCard
  **/
  @javax.annotation.Nullable
  public String getWuGoldCard() {
    return wuGoldCard;
  }


  public void setWuGoldCard(String wuGoldCard) {
    this.wuGoldCard = wuGoldCard;
  }


  public CustomerNonKey accountKey(String accountKey) {
    
    this.accountKey = accountKey;
    return this;
  }

   /**
   * Customer&#39;s Account Key
   * @return accountKey
  **/
  @javax.annotation.Nullable
  public String getAccountKey() {
    return accountKey;
  }


  public void setAccountKey(String accountKey) {
    this.accountKey = accountKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerNonKey customerNonKey = (CustomerNonKey) o;
    return Objects.equals(this.name, customerNonKey.name) &&
        Objects.equals(this.isdCodePlusPhoneNumber, customerNonKey.isdCodePlusPhoneNumber) &&
        Objects.equals(this.isdCode, customerNonKey.isdCode) &&
        Objects.equals(this.phoneNumber, customerNonKey.phoneNumber) &&
        Objects.equals(this.emailValue, customerNonKey.emailValue) &&
        Objects.equals(this.emailHash, customerNonKey.emailHash) &&
        Objects.equals(this.creditCardNumber, customerNonKey.creditCardNumber) &&
        Objects.equals(this.kycValue, customerNonKey.kycValue) &&
        Objects.equals(this.wuGoldCard, customerNonKey.wuGoldCard) &&
        Objects.equals(this.accountKey, customerNonKey.accountKey);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, isdCodePlusPhoneNumber, isdCode, phoneNumber, emailValue, emailHash, creditCardNumber, kycValue, wuGoldCard, accountKey);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerNonKey {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isdCodePlusPhoneNumber: ").append(toIndentedString(isdCodePlusPhoneNumber)).append("\n");
    sb.append("    isdCode: ").append(toIndentedString(isdCode)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    emailValue: ").append(toIndentedString(emailValue)).append("\n");
    sb.append("    emailHash: ").append(toIndentedString(emailHash)).append("\n");
    sb.append("    creditCardNumber: ").append(toIndentedString(creditCardNumber)).append("\n");
    sb.append("    kycValue: ").append(toIndentedString(kycValue)).append("\n");
    sb.append("    wuGoldCard: ").append(toIndentedString(wuGoldCard)).append("\n");
    sb.append("    accountKey: ").append(toIndentedString(accountKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("isdCodePlusPhoneNumber");
    openapiFields.add("isdCode");
    openapiFields.add("phoneNumber");
    openapiFields.add("emailValue");
    openapiFields.add("emailHash");
    openapiFields.add("creditCardNumber");
    openapiFields.add("kycValue");
    openapiFields.add("wuGoldCard");
    openapiFields.add("accountKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerNonKey
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerNonKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerNonKey is not found in the empty JSON string", CustomerNonKey.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerNonKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerNonKey` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        Name.validateJsonObject(jsonObj.getAsJsonObject("name"));
      }
      if ((jsonObj.get("isdCodePlusPhoneNumber") != null && !jsonObj.get("isdCodePlusPhoneNumber").isJsonNull()) && !jsonObj.get("isdCodePlusPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isdCodePlusPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isdCodePlusPhoneNumber").toString()));
      }
      if ((jsonObj.get("isdCode") != null && !jsonObj.get("isdCode").isJsonNull()) && !jsonObj.get("isdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isdCode").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("emailValue") != null && !jsonObj.get("emailValue").isJsonNull()) && !jsonObj.get("emailValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailValue").toString()));
      }
      if ((jsonObj.get("emailHash") != null && !jsonObj.get("emailHash").isJsonNull()) && !jsonObj.get("emailHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailHash").toString()));
      }
      if ((jsonObj.get("creditCardNumber") != null && !jsonObj.get("creditCardNumber").isJsonNull()) && !jsonObj.get("creditCardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditCardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditCardNumber").toString()));
      }
      if ((jsonObj.get("kycValue") != null && !jsonObj.get("kycValue").isJsonNull()) && !jsonObj.get("kycValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kycValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kycValue").toString()));
      }
      if ((jsonObj.get("wuGoldCard") != null && !jsonObj.get("wuGoldCard").isJsonNull()) && !jsonObj.get("wuGoldCard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wuGoldCard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wuGoldCard").toString()));
      }
      if ((jsonObj.get("accountKey") != null && !jsonObj.get("accountKey").isJsonNull()) && !jsonObj.get("accountKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerNonKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerNonKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerNonKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerNonKey.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerNonKey>() {
           @Override
           public void write(JsonWriter out, CustomerNonKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerNonKey read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerNonKey given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerNonKey
  * @throws IOException if the JSON string is invalid with respect to CustomerNonKey
  */
  public static CustomerNonKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerNonKey.class);
  }

 /**
  * Convert an instance of CustomerNonKey to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

