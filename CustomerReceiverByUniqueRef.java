/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.LocalDate;
import java.util.*;
import java.util.Map.Entry;

/**
 * Receiver Model By Receiver Unique Ref Schema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class CustomerReceiverByUniqueRef {
  public static final String SERIALIZED_NAME_RECEIVER_UNIQUE_REF = "receiverUniqueRef";
  @SerializedName(SERIALIZED_NAME_RECEIVER_UNIQUE_REF)
  private String receiverUniqueRef;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Name name;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<Address> address;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private LocalDate dob;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_RELATIONSHIP_TYPE = "relationshipType";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_TYPE)
  private Integer relationshipType;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_COUNTRY_OF_BIRTH = "countryOfBirth";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OF_BIRTH)
  private String countryOfBirth;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private String industry;

  public static final String SERIALIZED_NAME_IS_RESIDENT = "isResident";
  @SerializedName(SERIALIZED_NAME_IS_RESIDENT)
  private String isResident;

  public static final String SERIALIZED_NAME_PROFILE_IMAGE_REF_NUMBER = "profileImageRefNumber";
  @SerializedName(SERIALIZED_NAME_PROFILE_IMAGE_REF_NUMBER)
  private String profileImageRefNumber;

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private Preferences preferences;

  public static final String SERIALIZED_NAME_PHONE_ISO2_CODE = "phoneIso2Code";
  @SerializedName(SERIALIZED_NAME_PHONE_ISO2_CODE)
  private String phoneIso2Code;

  public static final String SERIALIZED_NAME_PHONE_ISO3_CODE = "phoneIso3Code";
  @SerializedName(SERIALIZED_NAME_PHONE_ISO3_CODE)
  private String phoneIso3Code;

  public static final String SERIALIZED_NAME_PHONE_ISD_CODE = "phoneIsdCode";
  @SerializedName(SERIALIZED_NAME_PHONE_ISD_CODE)
  private String phoneIsdCode;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  /**
   * Phone Number Verification Status * L – Fixed line (Verified as Landline) * M – Mobile (Verified as Mobile) * N – Invalid (Not a valid Phone or Mobile number) * P – Unknown * T – Tollfree  * R – Premium Rate * S – Shared Cost * V – VOIP  * A – Personal Number * B – Pager  * U – Universal Access Number * C – Voicemail  * D – Fixed line or Mobile (Null) 
   */
  @JsonAdapter(PhoneVvStatusEnum.Adapter.class)
  public enum PhoneVvStatusEnum {
    L("L"),
    
    M("M"),
    
    N("N"),
    
    P("P"),
    
    T("T"),
    
    R("R"),
    
    S("S"),
    
    V("V"),
    
    A("A"),
    
    B("B"),
    
    U("U"),
    
    C("C"),
    
    D("D");

    private String value;

    PhoneVvStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneVvStatusEnum fromValue(String value) {
      for (PhoneVvStatusEnum b : PhoneVvStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneVvStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneVvStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneVvStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneVvStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PHONE_VV_STATUS = "phoneVvStatus";
  @SerializedName(SERIALIZED_NAME_PHONE_VV_STATUS)
  private PhoneVvStatusEnum phoneVvStatus;

  public static final String SERIALIZED_NAME_PHONE_VV_STATUS_BY = "phoneVvStatusBy";
  @SerializedName(SERIALIZED_NAME_PHONE_VV_STATUS_BY)
  private String phoneVvStatusBy;

  public static final String SERIALIZED_NAME_PHONE_VV_DATE = "phoneVvDate";
  @SerializedName(SERIALIZED_NAME_PHONE_VV_DATE)
  private String phoneVvDate;

  public static final String SERIALIZED_NAME_PHONE_CARRIER = "phoneCarrier";
  @SerializedName(SERIALIZED_NAME_PHONE_CARRIER)
  private String phoneCarrier;

  public static final String SERIALIZED_NAME_PHONE_REGION = "phoneRegion";
  @SerializedName(SERIALIZED_NAME_PHONE_REGION)
  private String phoneRegion;

  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_IS_FAVOURITE = "isFavourite";
  @SerializedName(SERIALIZED_NAME_IS_FAVOURITE)
  private String isFavourite;

  public static final String SERIALIZED_NAME_CUSTOMER_RECEIVERS = "customerReceivers";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_RECEIVERS)
  private List<CustomerReceiverInfoAndAudit> customerReceivers;

  public CustomerReceiverByUniqueRef() {
  }

  public CustomerReceiverByUniqueRef receiverUniqueRef(String receiverUniqueRef) {
    
    this.receiverUniqueRef = receiverUniqueRef;
    return this;
  }

   /**
   * Reference number stored by Application to Identify Receivers Uniquely across Payout Types.
   * @return receiverUniqueRef
  **/
  @javax.annotation.Nullable
  public String getReceiverUniqueRef() {
    return receiverUniqueRef;
  }


  public void setReceiverUniqueRef(String receiverUniqueRef) {
    this.receiverUniqueRef = receiverUniqueRef;
  }


  public CustomerReceiverByUniqueRef name(Name name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public Name getName() {
    return name;
  }


  public void setName(Name name) {
    this.name = name;
  }


  public CustomerReceiverByUniqueRef address(List<Address> address) {
    
    this.address = address;
    return this;
  }

  public CustomerReceiverByUniqueRef addAddressItem(Address addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * Receiver&#39;s Address.
   * @return address
  **/
  @javax.annotation.Nullable
  public List<Address> getAddress() {
    return address;
  }


  public void setAddress(List<Address> address) {
    this.address = address;
  }


  public CustomerReceiverByUniqueRef dob(LocalDate dob) {
    
    this.dob = dob;
    return this;
  }

   /**
   * Receivers&#39;s Date of Birth.
   * @return dob
  **/
  @javax.annotation.Nullable
  public LocalDate getDob() {
    return dob;
  }


  public void setDob(LocalDate dob) {
    this.dob = dob;
  }


  public CustomerReceiverByUniqueRef gender(String gender) {
    
    this.gender = gender;
    return this;
  }

   /**
   * Receivers&#39;s Gender. * M - Male * F - Female * S - 
   * @return gender
  **/
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    this.gender = gender;
  }


  public CustomerReceiverByUniqueRef email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Receivers&#39;s Email ID.
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public CustomerReceiverByUniqueRef relationshipType(Integer relationshipType) {
    
    this.relationshipType = relationshipType;
    return this;
  }

   /**
   * Receiver&#39;s Relationship with the Customer. * 1-FATHER * 2-MOTHER * 3-SISTER * 4-BROTHER * 5-AUNT * 6-UNCLE * 7-COUSIN * 8-NIECE * 9-NEPHEW * 10-GRANDFATHER * 11-GRANDMOTHER * 12-SON * 13-DAUGHTER * 14-GRANDSON * 15-GRANDDAUGHTER * 16-FRIEND * 17-PROFESSIONAL * 18-SPOUSE * 19-FAMILY * 20-TRADE/BUSINESSPARTNER * 21-EMPLOYEE/EMPLOYER * 22-DONOR/RECEIVER OF CH * 23-PURCHASER/SELLER * 24-NO RELATIONSHIP 
   * @return relationshipType
  **/
  @javax.annotation.Nullable
  public Integer getRelationshipType() {
    return relationshipType;
  }


  public void setRelationshipType(Integer relationshipType) {
    this.relationshipType = relationshipType;
  }


  public CustomerReceiverByUniqueRef nationality(String nationality) {
    
    this.nationality = nationality;
    return this;
  }

   /**
   * Receiver&#39;s nationality in ISO2 format. e.g. AT,IN,US.
   * @return nationality
  **/
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }


  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public CustomerReceiverByUniqueRef countryOfBirth(String countryOfBirth) {
    
    this.countryOfBirth = countryOfBirth;
    return this;
  }

   /**
   * Receiver&#39;s Country Of Birth in ISO2 format. e.g. AT,IN,US
   * @return countryOfBirth
  **/
  @javax.annotation.Nullable
  public String getCountryOfBirth() {
    return countryOfBirth;
  }


  public void setCountryOfBirth(String countryOfBirth) {
    this.countryOfBirth = countryOfBirth;
  }


  public CustomerReceiverByUniqueRef industry(String industry) {
    
    this.industry = industry;
    return this;
  }

   /**
   * Receiver&#39;s Industry Type.
   * @return industry
  **/
  @javax.annotation.Nullable
  public String getIndustry() {
    return industry;
  }


  public void setIndustry(String industry) {
    this.industry = industry;
  }


  public CustomerReceiverByUniqueRef isResident(String isResident) {
    
    this.isResident = isResident;
    return this;
  }

   /**
   * This field indicates if Receiver is/not a Resident of the Address Country.
   * @return isResident
  **/
  @javax.annotation.Nullable
  public String getIsResident() {
    return isResident;
  }


  public void setIsResident(String isResident) {
    this.isResident = isResident;
  }


  public CustomerReceiverByUniqueRef profileImageRefNumber(String profileImageRefNumber) {
    
    this.profileImageRefNumber = profileImageRefNumber;
    return this;
  }

   /**
   * DMS Reference Number of Receiver&#39;s Profile Image.
   * @return profileImageRefNumber
  **/
  @javax.annotation.Nullable
  public String getProfileImageRefNumber() {
    return profileImageRefNumber;
  }


  public void setProfileImageRefNumber(String profileImageRefNumber) {
    this.profileImageRefNumber = profileImageRefNumber;
  }


  public CustomerReceiverByUniqueRef preferences(Preferences preferences) {
    
    this.preferences = preferences;
    return this;
  }

   /**
   * Get preferences
   * @return preferences
  **/
  @javax.annotation.Nullable
  public Preferences getPreferences() {
    return preferences;
  }


  public void setPreferences(Preferences preferences) {
    this.preferences = preferences;
  }


  public CustomerReceiverByUniqueRef phoneIso2Code(String phoneIso2Code) {
    
    this.phoneIso2Code = phoneIso2Code;
    return this;
  }

   /**
   * Receiver&#39;s Phone Country Code in ISO2 format. e.g. AT,IN,US
   * @return phoneIso2Code
  **/
  @javax.annotation.Nullable
  public String getPhoneIso2Code() {
    return phoneIso2Code;
  }


  public void setPhoneIso2Code(String phoneIso2Code) {
    this.phoneIso2Code = phoneIso2Code;
  }


  public CustomerReceiverByUniqueRef phoneIso3Code(String phoneIso3Code) {
    
    this.phoneIso3Code = phoneIso3Code;
    return this;
  }

   /**
   * Receiver&#39;s Phone Country Code in ISO3 format. e.g. AUT,IND,USA
   * @return phoneIso3Code
  **/
  @javax.annotation.Nullable
  public String getPhoneIso3Code() {
    return phoneIso3Code;
  }


  public void setPhoneIso3Code(String phoneIso3Code) {
    this.phoneIso3Code = phoneIso3Code;
  }


  public CustomerReceiverByUniqueRef phoneIsdCode(String phoneIsdCode) {
    
    this.phoneIsdCode = phoneIsdCode;
    return this;
  }

   /**
   * Receivers&#39;s International Dialing Code. e.g. 1 for USA, 44 for UK, 91 for India, etc.
   * @return phoneIsdCode
  **/
  @javax.annotation.Nullable
  public String getPhoneIsdCode() {
    return phoneIsdCode;
  }


  public void setPhoneIsdCode(String phoneIsdCode) {
    this.phoneIsdCode = phoneIsdCode;
  }


  public CustomerReceiverByUniqueRef phone(String phone) {
    
    this.phone = phone;
    return this;
  }

   /**
   * Receivers&#39;s Phone Number.
   * @return phone
  **/
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    this.phone = phone;
  }


  public CustomerReceiverByUniqueRef phoneVvStatus(PhoneVvStatusEnum phoneVvStatus) {
    
    this.phoneVvStatus = phoneVvStatus;
    return this;
  }

   /**
   * Phone Number Verification Status * L – Fixed line (Verified as Landline) * M – Mobile (Verified as Mobile) * N – Invalid (Not a valid Phone or Mobile number) * P – Unknown * T – Tollfree  * R – Premium Rate * S – Shared Cost * V – VOIP  * A – Personal Number * B – Pager  * U – Universal Access Number * C – Voicemail  * D – Fixed line or Mobile (Null) 
   * @return phoneVvStatus
  **/
  @javax.annotation.Nullable
  public PhoneVvStatusEnum getPhoneVvStatus() {
    return phoneVvStatus;
  }


  public void setPhoneVvStatus(PhoneVvStatusEnum phoneVvStatus) {
    this.phoneVvStatus = phoneVvStatus;
  }


  public CustomerReceiverByUniqueRef phoneVvStatusBy(String phoneVvStatusBy) {
    
    this.phoneVvStatusBy = phoneVvStatusBy;
    return this;
  }

   /**
   * Application/System/End User which added/updated the PhoneVVStatus.
   * @return phoneVvStatusBy
  **/
  @javax.annotation.Nullable
  public String getPhoneVvStatusBy() {
    return phoneVvStatusBy;
  }


  public void setPhoneVvStatusBy(String phoneVvStatusBy) {
    this.phoneVvStatusBy = phoneVvStatusBy;
  }


  public CustomerReceiverByUniqueRef phoneVvDate(String phoneVvDate) {
    
    this.phoneVvDate = phoneVvDate;
    return this;
  }

   /**
   * Timestamp when the PhoneVVStatus was added/updated.
   * @return phoneVvDate
  **/
  @javax.annotation.Nullable
  public String getPhoneVvDate() {
    return phoneVvDate;
  }


  public void setPhoneVvDate(String phoneVvDate) {
    this.phoneVvDate = phoneVvDate;
  }


  public CustomerReceiverByUniqueRef phoneCarrier(String phoneCarrier) {
    
    this.phoneCarrier = phoneCarrier;
    return this;
  }

   /**
   * Carrier of the Receiver&#39;s Phone Number
   * @return phoneCarrier
  **/
  @javax.annotation.Nullable
  public String getPhoneCarrier() {
    return phoneCarrier;
  }


  public void setPhoneCarrier(String phoneCarrier) {
    this.phoneCarrier = phoneCarrier;
  }


  public CustomerReceiverByUniqueRef phoneRegion(String phoneRegion) {
    
    this.phoneRegion = phoneRegion;
    return this;
  }

   /**
   * Region of the Receiver&#39;s Phone Number
   * @return phoneRegion
  **/
  @javax.annotation.Nullable
  public String getPhoneRegion() {
    return phoneRegion;
  }


  public void setPhoneRegion(String phoneRegion) {
    this.phoneRegion = phoneRegion;
  }


  public CustomerReceiverByUniqueRef alias(String alias) {
    
    this.alias = alias;
    return this;
  }

   /**
   * Receiver&#39;s Bank Account Alias.
   * @return alias
  **/
  @javax.annotation.Nullable
  public String getAlias() {
    return alias;
  }


  public void setAlias(String alias) {
    this.alias = alias;
  }


  public CustomerReceiverByUniqueRef isFavourite(String isFavourite) {
    
    this.isFavourite = isFavourite;
    return this;
  }

   /**
   * The field indicates whether the PI is/is not preferred.
   * @return isFavourite
  **/
  @javax.annotation.Nullable
  public String getIsFavourite() {
    return isFavourite;
  }


  public void setIsFavourite(String isFavourite) {
    this.isFavourite = isFavourite;
  }


  public CustomerReceiverByUniqueRef customerReceivers(List<CustomerReceiverInfoAndAudit> customerReceivers) {
    
    this.customerReceivers = customerReceivers;
    return this;
  }

  public CustomerReceiverByUniqueRef addCustomerReceiversItem(CustomerReceiverInfoAndAudit customerReceiversItem) {
    if (this.customerReceivers == null) {
      this.customerReceivers = new ArrayList<>();
    }
    this.customerReceivers.add(customerReceiversItem);
    return this;
  }

   /**
   * Customer Receiver Details.
   * @return customerReceivers
  **/
  @javax.annotation.Nullable
  public List<CustomerReceiverInfoAndAudit> getCustomerReceivers() {
    return customerReceivers;
  }


  public void setCustomerReceivers(List<CustomerReceiverInfoAndAudit> customerReceivers) {
    this.customerReceivers = customerReceivers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerReceiverByUniqueRef customerReceiverByUniqueRef = (CustomerReceiverByUniqueRef) o;
    return Objects.equals(this.receiverUniqueRef, customerReceiverByUniqueRef.receiverUniqueRef) &&
        Objects.equals(this.name, customerReceiverByUniqueRef.name) &&
        Objects.equals(this.address, customerReceiverByUniqueRef.address) &&
        Objects.equals(this.dob, customerReceiverByUniqueRef.dob) &&
        Objects.equals(this.gender, customerReceiverByUniqueRef.gender) &&
        Objects.equals(this.email, customerReceiverByUniqueRef.email) &&
        Objects.equals(this.relationshipType, customerReceiverByUniqueRef.relationshipType) &&
        Objects.equals(this.nationality, customerReceiverByUniqueRef.nationality) &&
        Objects.equals(this.countryOfBirth, customerReceiverByUniqueRef.countryOfBirth) &&
        Objects.equals(this.industry, customerReceiverByUniqueRef.industry) &&
        Objects.equals(this.isResident, customerReceiverByUniqueRef.isResident) &&
        Objects.equals(this.profileImageRefNumber, customerReceiverByUniqueRef.profileImageRefNumber) &&
        Objects.equals(this.preferences, customerReceiverByUniqueRef.preferences) &&
        Objects.equals(this.phoneIso2Code, customerReceiverByUniqueRef.phoneIso2Code) &&
        Objects.equals(this.phoneIso3Code, customerReceiverByUniqueRef.phoneIso3Code) &&
        Objects.equals(this.phoneIsdCode, customerReceiverByUniqueRef.phoneIsdCode) &&
        Objects.equals(this.phone, customerReceiverByUniqueRef.phone) &&
        Objects.equals(this.phoneVvStatus, customerReceiverByUniqueRef.phoneVvStatus) &&
        Objects.equals(this.phoneVvStatusBy, customerReceiverByUniqueRef.phoneVvStatusBy) &&
        Objects.equals(this.phoneVvDate, customerReceiverByUniqueRef.phoneVvDate) &&
        Objects.equals(this.phoneCarrier, customerReceiverByUniqueRef.phoneCarrier) &&
        Objects.equals(this.phoneRegion, customerReceiverByUniqueRef.phoneRegion) &&
        Objects.equals(this.alias, customerReceiverByUniqueRef.alias) &&
        Objects.equals(this.isFavourite, customerReceiverByUniqueRef.isFavourite) &&
        Objects.equals(this.customerReceivers, customerReceiverByUniqueRef.customerReceivers);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(receiverUniqueRef, name, address, dob, gender, email, relationshipType, nationality, countryOfBirth, industry, isResident, profileImageRefNumber, preferences, phoneIso2Code, phoneIso3Code, phoneIsdCode, phone, phoneVvStatus, phoneVvStatusBy, phoneVvDate, phoneCarrier, phoneRegion, alias, isFavourite, customerReceivers);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerReceiverByUniqueRef {\n");
    sb.append("    receiverUniqueRef: ").append(toIndentedString(receiverUniqueRef)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    relationshipType: ").append(toIndentedString(relationshipType)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    countryOfBirth: ").append(toIndentedString(countryOfBirth)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    isResident: ").append(toIndentedString(isResident)).append("\n");
    sb.append("    profileImageRefNumber: ").append(toIndentedString(profileImageRefNumber)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    phoneIso2Code: ").append(toIndentedString(phoneIso2Code)).append("\n");
    sb.append("    phoneIso3Code: ").append(toIndentedString(phoneIso3Code)).append("\n");
    sb.append("    phoneIsdCode: ").append(toIndentedString(phoneIsdCode)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    phoneVvStatus: ").append(toIndentedString(phoneVvStatus)).append("\n");
    sb.append("    phoneVvStatusBy: ").append(toIndentedString(phoneVvStatusBy)).append("\n");
    sb.append("    phoneVvDate: ").append(toIndentedString(phoneVvDate)).append("\n");
    sb.append("    phoneCarrier: ").append(toIndentedString(phoneCarrier)).append("\n");
    sb.append("    phoneRegion: ").append(toIndentedString(phoneRegion)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    isFavourite: ").append(toIndentedString(isFavourite)).append("\n");
    sb.append("    customerReceivers: ").append(toIndentedString(customerReceivers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("receiverUniqueRef");
    openapiFields.add("name");
    openapiFields.add("address");
    openapiFields.add("dob");
    openapiFields.add("gender");
    openapiFields.add("email");
    openapiFields.add("relationshipType");
    openapiFields.add("nationality");
    openapiFields.add("countryOfBirth");
    openapiFields.add("industry");
    openapiFields.add("isResident");
    openapiFields.add("profileImageRefNumber");
    openapiFields.add("preferences");
    openapiFields.add("phoneIso2Code");
    openapiFields.add("phoneIso3Code");
    openapiFields.add("phoneIsdCode");
    openapiFields.add("phone");
    openapiFields.add("phoneVvStatus");
    openapiFields.add("phoneVvStatusBy");
    openapiFields.add("phoneVvDate");
    openapiFields.add("phoneCarrier");
    openapiFields.add("phoneRegion");
    openapiFields.add("alias");
    openapiFields.add("isFavourite");
    openapiFields.add("customerReceivers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerReceiverByUniqueRef
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerReceiverByUniqueRef.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerReceiverByUniqueRef is not found in the empty JSON string", CustomerReceiverByUniqueRef.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerReceiverByUniqueRef.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerReceiverByUniqueRef` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("receiverUniqueRef") != null && !jsonObj.get("receiverUniqueRef").isJsonNull()) && !jsonObj.get("receiverUniqueRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverUniqueRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverUniqueRef").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        Name.validateJsonObject(jsonObj.getAsJsonObject("name"));
      }
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
          }

          // validate the optional field `address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            Address.validateJsonObject(jsonArrayaddress.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if ((jsonObj.get("countryOfBirth") != null && !jsonObj.get("countryOfBirth").isJsonNull()) && !jsonObj.get("countryOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryOfBirth").toString()));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      if ((jsonObj.get("isResident") != null && !jsonObj.get("isResident").isJsonNull()) && !jsonObj.get("isResident").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isResident` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isResident").toString()));
      }
      if ((jsonObj.get("profileImageRefNumber") != null && !jsonObj.get("profileImageRefNumber").isJsonNull()) && !jsonObj.get("profileImageRefNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileImageRefNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileImageRefNumber").toString()));
      }
      // validate the optional field `preferences`
      if (jsonObj.get("preferences") != null && !jsonObj.get("preferences").isJsonNull()) {
        Preferences.validateJsonObject(jsonObj.getAsJsonObject("preferences"));
      }
      if ((jsonObj.get("phoneIso2Code") != null && !jsonObj.get("phoneIso2Code").isJsonNull()) && !jsonObj.get("phoneIso2Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneIso2Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneIso2Code").toString()));
      }
      if ((jsonObj.get("phoneIso3Code") != null && !jsonObj.get("phoneIso3Code").isJsonNull()) && !jsonObj.get("phoneIso3Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneIso3Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneIso3Code").toString()));
      }
      if ((jsonObj.get("phoneIsdCode") != null && !jsonObj.get("phoneIsdCode").isJsonNull()) && !jsonObj.get("phoneIsdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneIsdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneIsdCode").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("phoneVvStatus") != null && !jsonObj.get("phoneVvStatus").isJsonNull()) && !jsonObj.get("phoneVvStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneVvStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneVvStatus").toString()));
      }
      if ((jsonObj.get("phoneVvStatusBy") != null && !jsonObj.get("phoneVvStatusBy").isJsonNull()) && !jsonObj.get("phoneVvStatusBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneVvStatusBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneVvStatusBy").toString()));
      }
      if ((jsonObj.get("phoneCarrier") != null && !jsonObj.get("phoneCarrier").isJsonNull()) && !jsonObj.get("phoneCarrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneCarrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneCarrier").toString()));
      }
      if ((jsonObj.get("phoneRegion") != null && !jsonObj.get("phoneRegion").isJsonNull()) && !jsonObj.get("phoneRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneRegion").toString()));
      }
      if ((jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) && !jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
      if ((jsonObj.get("isFavourite") != null && !jsonObj.get("isFavourite").isJsonNull()) && !jsonObj.get("isFavourite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isFavourite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isFavourite").toString()));
      }
      if (jsonObj.get("customerReceivers") != null && !jsonObj.get("customerReceivers").isJsonNull()) {
        JsonArray jsonArraycustomerReceivers = jsonObj.getAsJsonArray("customerReceivers");
        if (jsonArraycustomerReceivers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerReceivers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerReceivers` to be an array in the JSON string but got `%s`", jsonObj.get("customerReceivers").toString()));
          }

          // validate the optional field `customerReceivers` (array)
          for (int i = 0; i < jsonArraycustomerReceivers.size(); i++) {
            CustomerReceiverInfoAndAudit.validateJsonObject(jsonArraycustomerReceivers.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerReceiverByUniqueRef.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerReceiverByUniqueRef' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerReceiverByUniqueRef> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerReceiverByUniqueRef.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerReceiverByUniqueRef>() {
           @Override
           public void write(JsonWriter out, CustomerReceiverByUniqueRef value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerReceiverByUniqueRef read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerReceiverByUniqueRef given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerReceiverByUniqueRef
  * @throws IOException if the JSON string is invalid with respect to CustomerReceiverByUniqueRef
  */
  public static CustomerReceiverByUniqueRef fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerReceiverByUniqueRef.class);
  }

 /**
  * Convert an instance of CustomerReceiverByUniqueRef to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

