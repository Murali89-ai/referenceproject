/*
 * ucd_pmgmt_v1_api
 * Swagger documentation for UCD Profile Management Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.Name;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.JSON;

/**
 * Customer Personal Information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T21:22:09.739306500+05:30[Asia/Calcutta]")
public class Customer {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Name name;

  public static final String SERIALIZED_NAME_MOTHER_NAME = "motherName";
  @SerializedName(SERIALIZED_NAME_MOTHER_NAME)
  private String motherName;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private LocalDate dob;

  public static final String SERIALIZED_NAME_GENDER_TYPE = "genderType";
  @SerializedName(SERIALIZED_NAME_GENDER_TYPE)
  private String genderType;

  public static final String SERIALIZED_NAME_REFERENCE_FOR_GENDER_OTHER = "referenceForGenderOther";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FOR_GENDER_OTHER)
  private String referenceForGenderOther;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_NATIONALITY_ISO3 = "nationalityIso3";
  @SerializedName(SERIALIZED_NAME_NATIONALITY_ISO3)
  private String nationalityIso3;

  public static final String SERIALIZED_NAME_CUSTOMER_UMN = "customerUmn";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_UMN)
  private String customerUmn;

  public static final String SERIALIZED_NAME_CUSTOMER_UMN_HASH = "customerUmnHash";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_UMN_HASH)
  private String customerUmnHash;

  public static final String SERIALIZED_NAME_CONVENIENCE_NO = "convenienceNo";
  @SerializedName(SERIALIZED_NAME_CONVENIENCE_NO)
  private String convenienceNo;

  public static final String SERIALIZED_NAME_PROFILE_TYPE_ID = "profileTypeId";
  @SerializedName(SERIALIZED_NAME_PROFILE_TYPE_ID)
  private Integer profileTypeId;

  public static final String SERIALIZED_NAME_TRAFFIC_FLAG = "trafficFlag";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_FLAG)
  private String trafficFlag;

  public static final String SERIALIZED_NAME_RATING_CODE = "ratingCode";
  @SerializedName(SERIALIZED_NAME_RATING_CODE)
  private String ratingCode;

  public static final String SERIALIZED_NAME_RATING_DATE = "ratingDate";
  @SerializedName(SERIALIZED_NAME_RATING_DATE)
  private OffsetDateTime ratingDate;

  public static final String SERIALIZED_NAME_OPR_VALIDATION_FLAG = "oprValidationFlag";
  @SerializedName(SERIALIZED_NAME_OPR_VALIDATION_FLAG)
  private String oprValidationFlag;

  public static final String SERIALIZED_NAME_VALIDATION_DATE = "validationDate";
  @SerializedName(SERIALIZED_NAME_VALIDATION_DATE)
  private String validationDate;

  public static final String SERIALIZED_NAME_CUSTOMER_GAURANTEE = "customerGaurantee";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_GAURANTEE)
  private String customerGaurantee;

  public static final String SERIALIZED_NAME_CUSTOMER_LEVEL_CODE = "customerLevelCode";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_LEVEL_CODE)
  private String customerLevelCode;

  public static final String SERIALIZED_NAME_REASON_FOR_DELETION = "reasonForDeletion";
  @SerializedName(SERIALIZED_NAME_REASON_FOR_DELETION)
  private String reasonForDeletion;

  /**
   * Flag to indicate whether Customer has signed to receive Receipts Electronically
   */
  @JsonAdapter(CustomerEsignFlagEnum.Adapter.class)
  public enum CustomerEsignFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    CustomerEsignFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerEsignFlagEnum fromValue(String value) {
      for (CustomerEsignFlagEnum b : CustomerEsignFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomerEsignFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerEsignFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerEsignFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomerEsignFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMER_ESIGN_FLAG = "customerEsignFlag";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ESIGN_FLAG)
  private CustomerEsignFlagEnum customerEsignFlag;

  public static final String SERIALIZED_NAME_CUSTOMER_ESIGN_FLAG_UPDATE_DATE = "customerEsignFlagUpdateDate";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ESIGN_FLAG_UPDATE_DATE)
  private OffsetDateTime customerEsignFlagUpdateDate;

  public static final String SERIALIZED_NAME_OCCUPATION = "occupation";
  @SerializedName(SERIALIZED_NAME_OCCUPATION)
  private String occupation;

  public static final String SERIALIZED_NAME_CITY_OF_BIRTH = "cityOfBirth";
  @SerializedName(SERIALIZED_NAME_CITY_OF_BIRTH)
  private String cityOfBirth;

  public static final String SERIALIZED_NAME_COUNTRY_OF_BIRTH = "countryOfBirth";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OF_BIRTH)
  private String countryOfBirth;

  public static final String SERIALIZED_NAME_COUNTRY_OF_BIRTH_ISO3 = "countryOfBirthIso3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OF_BIRTH_ISO3)
  private String countryOfBirthIso3;

  public static final String SERIALIZED_NAME_GALACTIC_ID = "galacticId";
  @SerializedName(SERIALIZED_NAME_GALACTIC_ID)
  private String galacticId;

  public static final String SERIALIZED_NAME_GALACTIC_ID_UPDATED_DATE = "galacticIdUpdatedDate";
  @SerializedName(SERIALIZED_NAME_GALACTIC_ID_UPDATED_DATE)
  private OffsetDateTime galacticIdUpdatedDate;

  public static final String SERIALIZED_NAME_CUSTOMER_MASTER_KEY = "customerMasterKey";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_MASTER_KEY)
  private String customerMasterKey;

  public static final String SERIALIZED_NAME_CUSTOMER_MASTER_KEY_UPDATED_DATE = "customerMasterKeyUpdatedDate";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_MASTER_KEY_UPDATED_DATE)
  private OffsetDateTime customerMasterKeyUpdatedDate;

  public static final String SERIALIZED_NAME_EAS_SHA1 = "easSha1";
  @SerializedName(SERIALIZED_NAME_EAS_SHA1)
  private String easSha1;

  public static final String SERIALIZED_NAME_FREE_PASS_TXN_COUNT = "freePassTxnCount";
  @SerializedName(SERIALIZED_NAME_FREE_PASS_TXN_COUNT)
  private Integer freePassTxnCount;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private String industry;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_EMPLOYEE_POSITION_LEVEL = "employeePositionLevel";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_POSITION_LEVEL)
  private String employeePositionLevel;

  public static final String SERIALIZED_NAME_EMPLOYER_SCHOOL_NAME = "employerSchoolName";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_SCHOOL_NAME)
  private String employerSchoolName;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private String providerId;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_MARTIAL_STATUS = "martialStatus";
  @SerializedName(SERIALIZED_NAME_MARTIAL_STATUS)
  private String martialStatus;

  public static final String SERIALIZED_NAME_ANNUAL_INCOME = "annualIncome";
  @SerializedName(SERIALIZED_NAME_ANNUAL_INCOME)
  private Long annualIncome;

  public static final String SERIALIZED_NAME_ANNUAL_INCOME_CURRENCY = "annualIncomeCurrency";
  @SerializedName(SERIALIZED_NAME_ANNUAL_INCOME_CURRENCY)
  private String annualIncomeCurrency;

  public static final String SERIALIZED_NAME_ANNUAL_INCOME_BRACKET = "annualIncomeBracket";
  @SerializedName(SERIALIZED_NAME_ANNUAL_INCOME_BRACKET)
  private String annualIncomeBracket;

  /**
   * Consent to Refer a Friend. Default value - N * Y - Yes * N - No 
   */
  @JsonAdapter(ReferFriendFlagEnum.Adapter.class)
  public enum ReferFriendFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    ReferFriendFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReferFriendFlagEnum fromValue(String value) {
      for (ReferFriendFlagEnum b : ReferFriendFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReferFriendFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReferFriendFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReferFriendFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReferFriendFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REFER_FRIEND_FLAG = "referFriendFlag";
  @SerializedName(SERIALIZED_NAME_REFER_FRIEND_FLAG)
  private ReferFriendFlagEnum referFriendFlag;

  /**
   * Customer Category. Default Value - F * P - Partially Registered Customer (Digital) * F - Fully Registered Customer 
   */
  @JsonAdapter(CustomerCategoryEnum.Adapter.class)
  public enum CustomerCategoryEnum {
    F("F"),
    
    P("P");

    private String value;

    CustomerCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerCategoryEnum fromValue(String value) {
      for (CustomerCategoryEnum b : CustomerCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomerCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomerCategoryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMER_CATEGORY = "customerCategory";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CATEGORY)
  private CustomerCategoryEnum customerCategory;

  public static final String SERIALIZED_NAME_CUSTOMER_CATEGORY_UPDATED_DATE = "customerCategoryUpdatedDate";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CATEGORY_UPDATED_DATE)
  private OffsetDateTime customerCategoryUpdatedDate;

  public static final String SERIALIZED_NAME_EMPLOYMENT_STATUS = "employmentStatus";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_STATUS)
  private String employmentStatus;

  public static final String SERIALIZED_NAME_EMPLOYMENT_SDQ_EFFECTIVE_DATE = "employmentSdqEffectiveDate";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_SDQ_EFFECTIVE_DATE)
  private LocalDate employmentSdqEffectiveDate;

  /**
   * This field indicates if the Customer is/not an Employee.
   */
  @JsonAdapter(EmployeeFlagEnum.Adapter.class)
  public enum EmployeeFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EmployeeFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmployeeFlagEnum fromValue(String value) {
      for (EmployeeFlagEnum b : EmployeeFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmployeeFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmployeeFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmployeeFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmployeeFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYEE_FLAG = "employeeFlag";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_FLAG)
  private EmployeeFlagEnum employeeFlag;

  public static final String SERIALIZED_NAME_COUNTRY_OF_RESIDENCE = "countryOfResidence";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OF_RESIDENCE)
  private String countryOfResidence;

  public static final String SERIALIZED_NAME_COUNTRY_OF_RESIDENCE_ISO3 = "countryOfResidenceIso3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OF_RESIDENCE_ISO3)
  private String countryOfResidenceIso3;

  /**
   * Politically Exposed Person Self Declared Questions.
   */
  @JsonAdapter(PepSdqEnum.Adapter.class)
  public enum PepSdqEnum {
    Y("Y"),
    
    N("N");

    private String value;

    PepSdqEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PepSdqEnum fromValue(String value) {
      for (PepSdqEnum b : PepSdqEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PepSdqEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PepSdqEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PepSdqEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PepSdqEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PEP_SDQ = "pepSdq";
  @SerializedName(SERIALIZED_NAME_PEP_SDQ)
  private PepSdqEnum pepSdq;

  public static final String SERIALIZED_NAME_PEP_CATEGORY = "pepCategory";
  @SerializedName(SERIALIZED_NAME_PEP_CATEGORY)
  private String pepCategory;

  /**
   * This field indicates if Customer is/not a US Customer.
   */
  @JsonAdapter(IsUsPersonEnum.Adapter.class)
  public enum IsUsPersonEnum {
    Y("Y"),
    
    N("N");

    private String value;

    IsUsPersonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsUsPersonEnum fromValue(String value) {
      for (IsUsPersonEnum b : IsUsPersonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsUsPersonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsUsPersonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsUsPersonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IsUsPersonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IS_US_PERSON = "isUsPerson";
  @SerializedName(SERIALIZED_NAME_IS_US_PERSON)
  private IsUsPersonEnum isUsPerson;

  /**
   * This field indicates if Customer is/not of Legal Age.
   */
  @JsonAdapter(LegalAgeEnum.Adapter.class)
  public enum LegalAgeEnum {
    Y("Y"),
    
    N("N");

    private String value;

    LegalAgeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalAgeEnum fromValue(String value) {
      for (LegalAgeEnum b : LegalAgeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalAgeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalAgeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalAgeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalAgeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_AGE = "legalAge";
  @SerializedName(SERIALIZED_NAME_LEGAL_AGE)
  private LegalAgeEnum legalAge;

  public static final String SERIALIZED_NAME_SOURCE_OF_FUNDS = "sourceOfFunds";
  @SerializedName(SERIALIZED_NAME_SOURCE_OF_FUNDS)
  private String sourceOfFunds;

  public static final String SERIALIZED_NAME_PURPOSE_OF_ACCOUNT = "purposeOfAccount";
  @SerializedName(SERIALIZED_NAME_PURPOSE_OF_ACCOUNT)
  private String purposeOfAccount;

  public static final String SERIALIZED_NAME_EXPECTED_ACCOUNT_VOLUMES = "expectedAccountVolumes";
  @SerializedName(SERIALIZED_NAME_EXPECTED_ACCOUNT_VOLUMES)
  private String expectedAccountVolumes;

  public static final String SERIALIZED_NAME_FUNDS_IN_OUT_COUNTRIES = "fundsInOutCountries";
  @SerializedName(SERIALIZED_NAME_FUNDS_IN_OUT_COUNTRIES)
  private String fundsInOutCountries;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_TYPE = "subscriptionType";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_TYPE)
  private String subscriptionType;

  /**
   * Profile Visibility.
   */
  @JsonAdapter(ProfileVisibilityEnum.Adapter.class)
  public enum ProfileVisibilityEnum {
    Y("Y"),
    
    N("N");

    private String value;

    ProfileVisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProfileVisibilityEnum fromValue(String value) {
      for (ProfileVisibilityEnum b : ProfileVisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProfileVisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProfileVisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProfileVisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProfileVisibilityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROFILE_VISIBILITY = "profileVisibility";
  @SerializedName(SERIALIZED_NAME_PROFILE_VISIBILITY)
  private ProfileVisibilityEnum profileVisibility;

  public static final String SERIALIZED_NAME_THIRD_PARTY_STATUS = "thirdPartyStatus";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_STATUS)
  private String thirdPartyStatus;

  public static final String SERIALIZED_NAME_BANK_PROFILE_ID = "bankProfileId";
  @SerializedName(SERIALIZED_NAME_BANK_PROFILE_ID)
  private String bankProfileId;

  public static final String SERIALIZED_NAME_REFERRAL_CODE = "referralCode";
  @SerializedName(SERIALIZED_NAME_REFERRAL_CODE)
  private String referralCode;

  public static final String SERIALIZED_NAME_PROFILE_IMAGE_REF_NUMBER = "profileImageRefNumber";
  @SerializedName(SERIALIZED_NAME_PROFILE_IMAGE_REF_NUMBER)
  private String profileImageRefNumber;

  public static final String SERIALIZED_NAME_DATE_OF_DEATH = "dateOfDeath";
  @SerializedName(SERIALIZED_NAME_DATE_OF_DEATH)
  private LocalDate dateOfDeath;

  /**
   * This field indicates if Customer is/not a Non Resident Alien.
   */
  @JsonAdapter(NonResidentAlienEnum.Adapter.class)
  public enum NonResidentAlienEnum {
    Y("Y"),
    
    N("N");

    private String value;

    NonResidentAlienEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NonResidentAlienEnum fromValue(String value) {
      for (NonResidentAlienEnum b : NonResidentAlienEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NonResidentAlienEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NonResidentAlienEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NonResidentAlienEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NonResidentAlienEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NON_RESIDENT_ALIEN = "nonResidentAlien";
  @SerializedName(SERIALIZED_NAME_NON_RESIDENT_ALIEN)
  private NonResidentAlienEnum nonResidentAlien;

  /**
   * This field indicates if Customer is/not an Embassy.
   */
  @JsonAdapter(EmbassyEnum.Adapter.class)
  public enum EmbassyEnum {
    Y("Y"),
    
    N("N");

    private String value;

    EmbassyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmbassyEnum fromValue(String value) {
      for (EmbassyEnum b : EmbassyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmbassyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmbassyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmbassyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmbassyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMBASSY = "embassy";
  @SerializedName(SERIALIZED_NAME_EMBASSY)
  private EmbassyEnum embassy;

  public static final String SERIALIZED_NAME_CUSTOMER_TYPE = "customerType";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TYPE)
  private String customerType;

  public static final String SERIALIZED_NAME_EXPECTED_DEPOSITS_PER_YEAR = "expectedDepositsPerYear";
  @SerializedName(SERIALIZED_NAME_EXPECTED_DEPOSITS_PER_YEAR)
  private String expectedDepositsPerYear;

  public static final String SERIALIZED_NAME_OCCASIONAL_REGULAR_FLAG = "occasionalRegularFlag";
  @SerializedName(SERIALIZED_NAME_OCCASIONAL_REGULAR_FLAG)
  private String occasionalRegularFlag;

  public static final String SERIALIZED_NAME_NAME_UPDATE_CONSENT = "nameUpdateConsent";
  @SerializedName(SERIALIZED_NAME_NAME_UPDATE_CONSENT)
  private String nameUpdateConsent;

  public static final String SERIALIZED_NAME_NAME_UPDATE_CONSENT_DATE = "nameUpdateConsentDate";
  @SerializedName(SERIALIZED_NAME_NAME_UPDATE_CONSENT_DATE)
  private OffsetDateTime nameUpdateConsentDate;

  /**
   * Annual Check Status.
   */
  @JsonAdapter(AnnualCheckStatusEnum.Adapter.class)
  public enum AnnualCheckStatusEnum {
    Y("Y"),
    
    N("N");

    private String value;

    AnnualCheckStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnnualCheckStatusEnum fromValue(String value) {
      for (AnnualCheckStatusEnum b : AnnualCheckStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnnualCheckStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnualCheckStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnnualCheckStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnnualCheckStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ANNUAL_CHECK_STATUS = "annualCheckStatus";
  @SerializedName(SERIALIZED_NAME_ANNUAL_CHECK_STATUS)
  private AnnualCheckStatusEnum annualCheckStatus;

  public static final String SERIALIZED_NAME_ANNUAL_CHECK_STATUS_UPDATED_DATE = "annualCheckStatusUpdatedDate";
  @SerializedName(SERIALIZED_NAME_ANNUAL_CHECK_STATUS_UPDATED_DATE)
  private OffsetDateTime annualCheckStatusUpdatedDate;

  public static final String SERIALIZED_NAME_ELIGIBLE_FOR_CRYPTO_BUY = "eligibleForCryptoBuy";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_FOR_CRYPTO_BUY)
  private String eligibleForCryptoBuy;

  public static final String SERIALIZED_NAME_CRYPTO_TAX_ACCOUNT_ID = "cryptoTaxAccountId";
  @SerializedName(SERIALIZED_NAME_CRYPTO_TAX_ACCOUNT_ID)
  private String cryptoTaxAccountId;

  public static final String SERIALIZED_NAME_PROFILE_REFRESH_FLAG = "profileRefreshFlag";
  @SerializedName(SERIALIZED_NAME_PROFILE_REFRESH_FLAG)
  private String profileRefreshFlag;

  public static final String SERIALIZED_NAME_PROFILE_REFRESH_DATE = "profileRefreshDate";
  @SerializedName(SERIALIZED_NAME_PROFILE_REFRESH_DATE)
  private OffsetDateTime profileRefreshDate;

  public static final String SERIALIZED_NAME_PROFILE_REFRESH_DUE_DATE = "profileRefreshDueDate";
  @SerializedName(SERIALIZED_NAME_PROFILE_REFRESH_DUE_DATE)
  private OffsetDateTime profileRefreshDueDate;

  public static final String SERIALIZED_NAME_PROFILE_REFRESH_ATTRIBUTES = "profileRefreshAttributes";
  @SerializedName(SERIALIZED_NAME_PROFILE_REFRESH_ATTRIBUTES)
  private String profileRefreshAttributes;

  public static final String SERIALIZED_NAME_PREFERRED_MFA_METHOD = "preferredMfaMethod";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MFA_METHOD)
  private String preferredMfaMethod;

  public static final String SERIALIZED_NAME_REFERENCE_UMN = "referenceUmn";
  @SerializedName(SERIALIZED_NAME_REFERENCE_UMN)
  private String referenceUmn;

  public static final String SERIALIZED_NAME_PURPOSE_OF_SERVICES = "purposeOfServices";
  @SerializedName(SERIALIZED_NAME_PURPOSE_OF_SERVICES)
  private String purposeOfServices;

  public static final String SERIALIZED_NAME_EXP_RECEIVER_COUNTRIES = "expReceiverCountries";
  @SerializedName(SERIALIZED_NAME_EXP_RECEIVER_COUNTRIES)
  private String expReceiverCountries;

  public static final String SERIALIZED_NAME_EXP_SENDER_COUNTRIES = "expSenderCountries";
  @SerializedName(SERIALIZED_NAME_EXP_SENDER_COUNTRIES)
  private String expSenderCountries;

  public static final String SERIALIZED_NAME_TXN_FREQUENCY_RANGE = "txnFrequencyRange";
  @SerializedName(SERIALIZED_NAME_TXN_FREQUENCY_RANGE)
  private String txnFrequencyRange;

  public static final String SERIALIZED_NAME_PRIMARY_UMN_FLAG = "primaryUmnFlag";
  @SerializedName(SERIALIZED_NAME_PRIMARY_UMN_FLAG)
  private String primaryUmnFlag;

  public static final String SERIALIZED_NAME_PRIMARY_UMN_FLAG_UPDATED_DATE = "primaryUmnFlagUpdatedDate";
  @SerializedName(SERIALIZED_NAME_PRIMARY_UMN_FLAG_UPDATED_DATE)
  private OffsetDateTime primaryUmnFlagUpdatedDate;

  public static final String SERIALIZED_NAME_DIRECTORY_ALIAS = "directoryAlias";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_ALIAS)
  private String directoryAlias;

  public static final String SERIALIZED_NAME_REACCREDITION_FLAG = "reaccreditionFlag";
  @SerializedName(SERIALIZED_NAME_REACCREDITION_FLAG)
  private String reaccreditionFlag;

  public static final String SERIALIZED_NAME_REACCREDITATION_DUE_DATE = "reaccreditationDueDate";
  @SerializedName(SERIALIZED_NAME_REACCREDITATION_DUE_DATE)
  private OffsetDateTime reaccreditationDueDate;

  public static final String SERIALIZED_NAME_REACCREDITATION_STATUS_DATE = "reaccreditationStatusDate";
  @SerializedName(SERIALIZED_NAME_REACCREDITATION_STATUS_DATE)
  private OffsetDateTime reaccreditationStatusDate;

  public static final String SERIALIZED_NAME_REACCREDITATION_ATTRIBUTES = "reaccreditationAttributes";
  @SerializedName(SERIALIZED_NAME_REACCREDITATION_ATTRIBUTES)
  private String reaccreditationAttributes;

  public Customer() {
  }

  public Customer name(Name name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public Name getName() {
    return name;
  }


  public void setName(Name name) {
    this.name = name;
  }


  public Customer motherName(String motherName) {
    
    this.motherName = motherName;
    return this;
  }

   /**
   * Full Name of Customer&#39;s Mother.
   * @return motherName
  **/
  @javax.annotation.Nullable
  public String getMotherName() {
    return motherName;
  }


  public void setMotherName(String motherName) {
    this.motherName = motherName;
  }


  public Customer dob(LocalDate dob) {
    
    this.dob = dob;
    return this;
  }

   /**
   * Customer&#39;s Date of Birth.
   * @return dob
  **/
  @javax.annotation.Nullable
  public LocalDate getDob() {
    return dob;
  }


  public void setDob(LocalDate dob) {
    this.dob = dob;
  }


  public Customer genderType(String genderType) {
    
    this.genderType = genderType;
    return this;
  }

   /**
   * Customer&#39;s Gender. * M - Male * F - Female * S -  
   * @return genderType
  **/
  @javax.annotation.Nullable
  public String getGenderType() {
    return genderType;
  }


  public void setGenderType(String genderType) {
    this.genderType = genderType;
  }


  public Customer referenceForGenderOther(String referenceForGenderOther) {
    
    this.referenceForGenderOther = referenceForGenderOther;
    return this;
  }

   /**
   * When the Gender Other is selected, Client needs to send the reference/actual Gender value in this element.
   * @return referenceForGenderOther
  **/
  @javax.annotation.Nullable
  public String getReferenceForGenderOther() {
    return referenceForGenderOther;
  }


  public void setReferenceForGenderOther(String referenceForGenderOther) {
    this.referenceForGenderOther = referenceForGenderOther;
  }


  public Customer nationality(String nationality) {
    
    this.nationality = nationality;
    return this;
  }

   /**
   * Customer&#39;s nationality in ISO2 format. e.g. AT,IN,US.
   * @return nationality
  **/
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }


  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public Customer nationalityIso3(String nationalityIso3) {
    
    this.nationalityIso3 = nationalityIso3;
    return this;
  }

   /**
   * Customer&#39;s nationality in ISO3 format. e.g. AUT,IND,USA.
   * @return nationalityIso3
  **/
  @javax.annotation.Nullable
  public String getNationalityIso3() {
    return nationalityIso3;
  }


  public void setNationalityIso3(String nationalityIso3) {
    this.nationalityIso3 = nationalityIso3;
  }


  public Customer customerUmn(String customerUmn) {
    
    this.customerUmn = customerUmn;
    return this;
  }

   /**
   * Universal Membership Number. Not required as part of the customer registration request.
   * @return customerUmn
  **/
  @javax.annotation.Nullable
  public String getCustomerUmn() {
    return customerUmn;
  }


  public void setCustomerUmn(String customerUmn) {
    this.customerUmn = customerUmn;
  }


  public Customer customerUmnHash(String customerUmnHash) {
    
    this.customerUmnHash = customerUmnHash;
    return this;
  }

   /**
   * Hash value of customerUmn.
   * @return customerUmnHash
  **/
  @javax.annotation.Nullable
  public String getCustomerUmnHash() {
    return customerUmnHash;
  }


  public void setCustomerUmnHash(String customerUmnHash) {
    this.customerUmnHash = customerUmnHash;
  }


  public Customer convenienceNo(String convenienceNo) {
    
    this.convenienceNo = convenienceNo;
    return this;
  }

   /**
   * Convenience Number. Not required as part of the customer registration request.
   * @return convenienceNo
  **/
  @javax.annotation.Nullable
  public String getConvenienceNo() {
    return convenienceNo;
  }


  public void setConvenienceNo(String convenienceNo) {
    this.convenienceNo = convenienceNo;
  }


  public Customer profileTypeId(Integer profileTypeId) {
    
    this.profileTypeId = profileTypeId;
    return this;
  }

   /**
   * Type of Customer Profile. This field is not currently being used. Customer_Verified_By is used to determine if Customer is not Verified and is in Step-1 or Verified by Mobile / Email. * 0 - Full Registered * 1 - Semi or Lite Registered.  
   * @return profileTypeId
  **/
  @javax.annotation.Nullable
  public Integer getProfileTypeId() {
    return profileTypeId;
  }


  public void setProfileTypeId(Integer profileTypeId) {
    this.profileTypeId = profileTypeId;
  }


  public Customer trafficFlag(String trafficFlag) {
    
    this.trafficFlag = trafficFlag;
    return this;
  }

   /**
   * Customer&#39;s Level Lock. If the value is N, then we don’t allow any transactions from this Customer. Default value will be either Y.
   * @return trafficFlag
  **/
  @javax.annotation.Nullable
  public String getTrafficFlag() {
    return trafficFlag;
  }


  public void setTrafficFlag(String trafficFlag) {
    this.trafficFlag = trafficFlag;
  }


  public Customer ratingCode(String ratingCode) {
    
    this.ratingCode = ratingCode;
    return this;
  }

   /**
   * Based on a Customer&#39;s history the rating code is assigned. New Customer starts with rating of 0 and it keeps getting updated monthly. There could be a maximum rating code of 9.
   * @return ratingCode
  **/
  @javax.annotation.Nullable
  public String getRatingCode() {
    return ratingCode;
  }


  public void setRatingCode(String ratingCode) {
    this.ratingCode = ratingCode;
  }


  public Customer ratingDate(OffsetDateTime ratingDate) {
    
    this.ratingDate = ratingDate;
    return this;
  }

   /**
   * Timestamp when Rating Code was added/updated for a Customer.
   * @return ratingDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRatingDate() {
    return ratingDate;
  }


  public void setRatingDate(OffsetDateTime ratingDate) {
    this.ratingDate = ratingDate;
  }


  public Customer oprValidationFlag(String oprValidationFlag) {
    
    this.oprValidationFlag = oprValidationFlag;
    return this;
  }

   /**
   * This field indicates RED FLAG indicator set by CSR(s) on a Customer. Possible values can be Y or N. If the value is Y, then RED Flag is set on that Customer by CSR(s).
   * @return oprValidationFlag
  **/
  @javax.annotation.Nullable
  public String getOprValidationFlag() {
    return oprValidationFlag;
  }


  public void setOprValidationFlag(String oprValidationFlag) {
    this.oprValidationFlag = oprValidationFlag;
  }


  public Customer validationDate(String validationDate) {
    
    this.validationDate = validationDate;
    return this;
  }

   /**
   * Date on which OPR Validation Flag was set for a Customer by CSR(s).
   * @return validationDate
  **/
  @javax.annotation.Nullable
  public String getValidationDate() {
    return validationDate;
  }


  public void setValidationDate(String validationDate) {
    this.validationDate = validationDate;
  }


  public Customer customerGaurantee(String customerGaurantee) {
    
    this.customerGaurantee = customerGaurantee;
    return this;
  }

   /**
   * If this flag is set, then the Customer is very good Customer and does not have any bad remarks.
   * @return customerGaurantee
  **/
  @javax.annotation.Nullable
  public String getCustomerGaurantee() {
    return customerGaurantee;
  }


  public void setCustomerGaurantee(String customerGaurantee) {
    this.customerGaurantee = customerGaurantee;
  }


  public Customer customerLevelCode(String customerLevelCode) {
    
    this.customerLevelCode = customerLevelCode;
    return this;
  }

   /**
   * Loyalty level code to represent benefits at Customer Level. e.g. XXC, YYC, WU6, WU7 etc. Level code determines the reward benefits for the customers. WU7 or WU6 or XXC doesn&#39;t earn benefits. ZZ0, ZZ1 denotes - Convenience. SWP denotes - Swift Pay.
   * @return customerLevelCode
  **/
  @javax.annotation.Nullable
  public String getCustomerLevelCode() {
    return customerLevelCode;
  }


  public void setCustomerLevelCode(String customerLevelCode) {
    this.customerLevelCode = customerLevelCode;
  }


  public Customer reasonForDeletion(String reasonForDeletion) {
    
    this.reasonForDeletion = reasonForDeletion;
    return this;
  }

   /**
   * Reason stating why a customer has been logically deleted * D – Direct Mail Correspondence Returned * W – Do not wish to be a loyalty card member Or blank. * F -  * X -  
   * @return reasonForDeletion
  **/
  @javax.annotation.Nullable
  public String getReasonForDeletion() {
    return reasonForDeletion;
  }


  public void setReasonForDeletion(String reasonForDeletion) {
    this.reasonForDeletion = reasonForDeletion;
  }


  public Customer customerEsignFlag(CustomerEsignFlagEnum customerEsignFlag) {
    
    this.customerEsignFlag = customerEsignFlag;
    return this;
  }

   /**
   * Flag to indicate whether Customer has signed to receive Receipts Electronically
   * @return customerEsignFlag
  **/
  @javax.annotation.Nullable
  public CustomerEsignFlagEnum getCustomerEsignFlag() {
    return customerEsignFlag;
  }


  public void setCustomerEsignFlag(CustomerEsignFlagEnum customerEsignFlag) {
    this.customerEsignFlag = customerEsignFlag;
  }


  public Customer customerEsignFlagUpdateDate(OffsetDateTime customerEsignFlagUpdateDate) {
    
    this.customerEsignFlagUpdateDate = customerEsignFlagUpdateDate;
    return this;
  }

   /**
   * Date on which Customer updated the option for receiving Receipts Electronically
   * @return customerEsignFlagUpdateDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCustomerEsignFlagUpdateDate() {
    return customerEsignFlagUpdateDate;
  }


  public void setCustomerEsignFlagUpdateDate(OffsetDateTime customerEsignFlagUpdateDate) {
    this.customerEsignFlagUpdateDate = customerEsignFlagUpdateDate;
  }


  public Customer occupation(String occupation) {
    
    this.occupation = occupation;
    return this;
  }

   /**
   * Customer&#39;s Occupation details
   * @return occupation
  **/
  @javax.annotation.Nullable
  public String getOccupation() {
    return occupation;
  }


  public void setOccupation(String occupation) {
    this.occupation = occupation;
  }


  public Customer cityOfBirth(String cityOfBirth) {
    
    this.cityOfBirth = cityOfBirth;
    return this;
  }

   /**
   * Customer&#39;s City fo Birth
   * @return cityOfBirth
  **/
  @javax.annotation.Nullable
  public String getCityOfBirth() {
    return cityOfBirth;
  }


  public void setCityOfBirth(String cityOfBirth) {
    this.cityOfBirth = cityOfBirth;
  }


  public Customer countryOfBirth(String countryOfBirth) {
    
    this.countryOfBirth = countryOfBirth;
    return this;
  }

   /**
   * Customer&#39;s Country Of Birth in ISO2 format. e.g. AT,IN,US
   * @return countryOfBirth
  **/
  @javax.annotation.Nullable
  public String getCountryOfBirth() {
    return countryOfBirth;
  }


  public void setCountryOfBirth(String countryOfBirth) {
    this.countryOfBirth = countryOfBirth;
  }


  public Customer countryOfBirthIso3(String countryOfBirthIso3) {
    
    this.countryOfBirthIso3 = countryOfBirthIso3;
    return this;
  }

   /**
   * Customer&#39;s Country Of Birth in ISO3 format. e.g. AUT,IND,USA
   * @return countryOfBirthIso3
  **/
  @javax.annotation.Nullable
  public String getCountryOfBirthIso3() {
    return countryOfBirthIso3;
  }


  public void setCountryOfBirthIso3(String countryOfBirthIso3) {
    this.countryOfBirthIso3 = countryOfBirthIso3;
  }


  public Customer galacticId(String galacticId) {
    
    this.galacticId = galacticId;
    return this;
  }

   /**
   * Galactic ID generated by EAS system. It is used by Compliance system to find unique customer.
   * @return galacticId
  **/
  @javax.annotation.Nullable
  public String getGalacticId() {
    return galacticId;
  }


  public void setGalacticId(String galacticId) {
    this.galacticId = galacticId;
  }


  public Customer galacticIdUpdatedDate(OffsetDateTime galacticIdUpdatedDate) {
    
    this.galacticIdUpdatedDate = galacticIdUpdatedDate;
    return this;
  }

   /**
   * Timestamp on which the Galactic Id has been added/updated.
   * @return galacticIdUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getGalacticIdUpdatedDate() {
    return galacticIdUpdatedDate;
  }


  public void setGalacticIdUpdatedDate(OffsetDateTime galacticIdUpdatedDate) {
    this.galacticIdUpdatedDate = galacticIdUpdatedDate;
  }


  public Customer customerMasterKey(String customerMasterKey) {
    
    this.customerMasterKey = customerMasterKey;
    return this;
  }

   /**
   * Customer Master Key generated by TAMR system. It is used by Compliance system to find unique customer.
   * @return customerMasterKey
  **/
  @javax.annotation.Nullable
  public String getCustomerMasterKey() {
    return customerMasterKey;
  }


  public void setCustomerMasterKey(String customerMasterKey) {
    this.customerMasterKey = customerMasterKey;
  }


  public Customer customerMasterKeyUpdatedDate(OffsetDateTime customerMasterKeyUpdatedDate) {
    
    this.customerMasterKeyUpdatedDate = customerMasterKeyUpdatedDate;
    return this;
  }

   /**
   * Timestamp on which the Customer Master Key has been added/updated.
   * @return customerMasterKeyUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCustomerMasterKeyUpdatedDate() {
    return customerMasterKeyUpdatedDate;
  }


  public void setCustomerMasterKeyUpdatedDate(OffsetDateTime customerMasterKeyUpdatedDate) {
    this.customerMasterKeyUpdatedDate = customerMasterKeyUpdatedDate;
  }


  public Customer easSha1(String easSha1) {
    
    this.easSha1 = easSha1;
    return this;
  }

   /**
   * SHA1 Hash which is used as input to EAS to generate Galactic ID. It is generated using Name + Address + ID information.
   * @return easSha1
  **/
  @javax.annotation.Nullable
  public String getEasSha1() {
    return easSha1;
  }


  public void setEasSha1(String easSha1) {
    this.easSha1 = easSha1;
  }


  public Customer freePassTxnCount(Integer freePassTxnCount) {
    
    this.freePassTxnCount = freePassTxnCount;
    return this;
  }

   /**
   * FREE PASS FOR LOW RISK CUSTOMER WITHOUT IDVV&#39;D. This value indicates number of times customer can  transact till IDVV is done for the customer.
   * @return freePassTxnCount
  **/
  @javax.annotation.Nullable
  public Integer getFreePassTxnCount() {
    return freePassTxnCount;
  }


  public void setFreePassTxnCount(Integer freePassTxnCount) {
    this.freePassTxnCount = freePassTxnCount;
  }


  public Customer industry(String industry) {
    
    this.industry = industry;
    return this;
  }

   /**
   * Employment Industry.
   * @return industry
  **/
  @javax.annotation.Nullable
  public String getIndustry() {
    return industry;
  }


  public void setIndustry(String industry) {
    this.industry = industry;
  }


  public Customer platform(String platform) {
    
    this.platform = platform;
    return this;
  }

   /**
   * Customer&#39;s Platform. Default value is W (WU platform). * O - OVI platform * V - VIGO platform * W - WU platform 
   * @return platform
  **/
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }


  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public Customer employeePositionLevel(String employeePositionLevel) {
    
    this.employeePositionLevel = employeePositionLevel;
    return this;
  }

   /**
   * Employment Position. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return employeePositionLevel
  **/
  @javax.annotation.Nullable
  public String getEmployeePositionLevel() {
    return employeePositionLevel;
  }


  public void setEmployeePositionLevel(String employeePositionLevel) {
    this.employeePositionLevel = employeePositionLevel;
  }


  public Customer employerSchoolName(String employerSchoolName) {
    
    this.employerSchoolName = employerSchoolName;
    return this;
  }

   /**
   * Name of Employer / School.
   * @return employerSchoolName
  **/
  @javax.annotation.Nullable
  public String getEmployerSchoolName() {
    return employerSchoolName;
  }


  public void setEmployerSchoolName(String employerSchoolName) {
    this.employerSchoolName = employerSchoolName;
  }


  public Customer providerId(String providerId) {
    
    this.providerId = providerId;
    return this;
  }

   /**
   * Provider Id.
   * @return providerId
  **/
  @javax.annotation.Nullable
  public String getProviderId() {
    return providerId;
  }


  public void setProviderId(String providerId) {
    this.providerId = providerId;
  }


  public Customer clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Client Id.
   * @return clientId
  **/
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public Customer employeeId(String employeeId) {
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Employee Id.
   * @return employeeId
  **/
  @javax.annotation.Nullable
  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    this.employeeId = employeeId;
  }


  public Customer martialStatus(String martialStatus) {
    
    this.martialStatus = martialStatus;
    return this;
  }

   /**
   * Marital Status * M - MARRIED * S - SINGLE 
   * @return martialStatus
  **/
  @javax.annotation.Nullable
  public String getMartialStatus() {
    return martialStatus;
  }


  public void setMartialStatus(String martialStatus) {
    this.martialStatus = martialStatus;
  }


  public Customer annualIncome(Long annualIncome) {
    
    this.annualIncome = annualIncome;
    return this;
  }

   /**
   * Annual Income. This field could be nullified by passing \&quot;0\&quot;.
   * @return annualIncome
  **/
  @javax.annotation.Nullable
  public Long getAnnualIncome() {
    return annualIncome;
  }


  public void setAnnualIncome(Long annualIncome) {
    this.annualIncome = annualIncome;
  }


  public Customer annualIncomeCurrency(String annualIncomeCurrency) {
    
    this.annualIncomeCurrency = annualIncomeCurrency;
    return this;
  }

   /**
   * Currency of Annual Income in 3 characters Currecny Code
   * @return annualIncomeCurrency
  **/
  @javax.annotation.Nullable
  public String getAnnualIncomeCurrency() {
    return annualIncomeCurrency;
  }


  public void setAnnualIncomeCurrency(String annualIncomeCurrency) {
    this.annualIncomeCurrency = annualIncomeCurrency;
  }


  public Customer annualIncomeBracket(String annualIncomeBracket) {
    
    this.annualIncomeBracket = annualIncomeBracket;
    return this;
  }

   /**
   * Annual Income Bracket
   * @return annualIncomeBracket
  **/
  @javax.annotation.Nullable
  public String getAnnualIncomeBracket() {
    return annualIncomeBracket;
  }


  public void setAnnualIncomeBracket(String annualIncomeBracket) {
    this.annualIncomeBracket = annualIncomeBracket;
  }


  public Customer referFriendFlag(ReferFriendFlagEnum referFriendFlag) {
    
    this.referFriendFlag = referFriendFlag;
    return this;
  }

   /**
   * Consent to Refer a Friend. Default value - N * Y - Yes * N - No 
   * @return referFriendFlag
  **/
  @javax.annotation.Nullable
  public ReferFriendFlagEnum getReferFriendFlag() {
    return referFriendFlag;
  }


  public void setReferFriendFlag(ReferFriendFlagEnum referFriendFlag) {
    this.referFriendFlag = referFriendFlag;
  }


  public Customer customerCategory(CustomerCategoryEnum customerCategory) {
    
    this.customerCategory = customerCategory;
    return this;
  }

   /**
   * Customer Category. Default Value - F * P - Partially Registered Customer (Digital) * F - Fully Registered Customer 
   * @return customerCategory
  **/
  @javax.annotation.Nullable
  public CustomerCategoryEnum getCustomerCategory() {
    return customerCategory;
  }


  public void setCustomerCategory(CustomerCategoryEnum customerCategory) {
    this.customerCategory = customerCategory;
  }


  public Customer customerCategoryUpdatedDate(OffsetDateTime customerCategoryUpdatedDate) {
    
    this.customerCategoryUpdatedDate = customerCategoryUpdatedDate;
    return this;
  }

   /**
   * Timestamp on which the Customer Category has been added/updated.
   * @return customerCategoryUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCustomerCategoryUpdatedDate() {
    return customerCategoryUpdatedDate;
  }


  public void setCustomerCategoryUpdatedDate(OffsetDateTime customerCategoryUpdatedDate) {
    this.customerCategoryUpdatedDate = customerCategoryUpdatedDate;
  }


  public Customer employmentStatus(String employmentStatus) {
    
    this.employmentStatus = employmentStatus;
    return this;
  }

   /**
   * Customer&#39;s Employment Status.
   * @return employmentStatus
  **/
  @javax.annotation.Nullable
  public String getEmploymentStatus() {
    return employmentStatus;
  }


  public void setEmploymentStatus(String employmentStatus) {
    this.employmentStatus = employmentStatus;
  }


  public Customer employmentSdqEffectiveDate(LocalDate employmentSdqEffectiveDate) {
    
    this.employmentSdqEffectiveDate = employmentSdqEffectiveDate;
    return this;
  }

   /**
   * Employment&#39;s Self Decalred Questions Effective Date.
   * @return employmentSdqEffectiveDate
  **/
  @javax.annotation.Nullable
  public LocalDate getEmploymentSdqEffectiveDate() {
    return employmentSdqEffectiveDate;
  }


  public void setEmploymentSdqEffectiveDate(LocalDate employmentSdqEffectiveDate) {
    this.employmentSdqEffectiveDate = employmentSdqEffectiveDate;
  }


  public Customer employeeFlag(EmployeeFlagEnum employeeFlag) {
    
    this.employeeFlag = employeeFlag;
    return this;
  }

   /**
   * This field indicates if the Customer is/not an Employee.
   * @return employeeFlag
  **/
  @javax.annotation.Nullable
  public EmployeeFlagEnum getEmployeeFlag() {
    return employeeFlag;
  }


  public void setEmployeeFlag(EmployeeFlagEnum employeeFlag) {
    this.employeeFlag = employeeFlag;
  }


  public Customer countryOfResidence(String countryOfResidence) {
    
    this.countryOfResidence = countryOfResidence;
    return this;
  }

   /**
   * Customer&#39;s Country Of Residence in ISO2 format. e.g. AT,IN,US
   * @return countryOfResidence
  **/
  @javax.annotation.Nullable
  public String getCountryOfResidence() {
    return countryOfResidence;
  }


  public void setCountryOfResidence(String countryOfResidence) {
    this.countryOfResidence = countryOfResidence;
  }


  public Customer countryOfResidenceIso3(String countryOfResidenceIso3) {
    
    this.countryOfResidenceIso3 = countryOfResidenceIso3;
    return this;
  }

   /**
   * Customer&#39;s Country Of Residence in ISO3 format. e.g. AUT,IND,USA
   * @return countryOfResidenceIso3
  **/
  @javax.annotation.Nullable
  public String getCountryOfResidenceIso3() {
    return countryOfResidenceIso3;
  }


  public void setCountryOfResidenceIso3(String countryOfResidenceIso3) {
    this.countryOfResidenceIso3 = countryOfResidenceIso3;
  }


  public Customer pepSdq(PepSdqEnum pepSdq) {
    
    this.pepSdq = pepSdq;
    return this;
  }

   /**
   * Politically Exposed Person Self Declared Questions.
   * @return pepSdq
  **/
  @javax.annotation.Nullable
  public PepSdqEnum getPepSdq() {
    return pepSdq;
  }


  public void setPepSdq(PepSdqEnum pepSdq) {
    this.pepSdq = pepSdq;
  }


  public Customer pepCategory(String pepCategory) {
    
    this.pepCategory = pepCategory;
    return this;
  }

   /**
   * Politically Exposed Person&#39;s Category. PEP category gets populated when only PEP Status is Y. Customer can not have multiple PEP Categories. * A &#x3D; Head of State * B &#x3D; Senior government official * C &#x3D; Senior politician * D &#x3D; Senior judicial official * E &#x3D; Senior military official * F &#x3D; Ambassador, attaché or counsellor * G &#x3D; Executive of state-owned corporations * H &#x3D; Head of government agency * I &#x3D; Political party official * J &#x3D; Executive of international organizations * K &#x3D; Family member of a PEP * L &#x3D; Close associate of a PEP * M &#x3D; Regional/Provence level official * N &#x3D; Mayor * O &#x3D; Other 
   * @return pepCategory
  **/
  @javax.annotation.Nullable
  public String getPepCategory() {
    return pepCategory;
  }


  public void setPepCategory(String pepCategory) {
    this.pepCategory = pepCategory;
  }


  public Customer isUsPerson(IsUsPersonEnum isUsPerson) {
    
    this.isUsPerson = isUsPerson;
    return this;
  }

   /**
   * This field indicates if Customer is/not a US Customer.
   * @return isUsPerson
  **/
  @javax.annotation.Nullable
  public IsUsPersonEnum getIsUsPerson() {
    return isUsPerson;
  }


  public void setIsUsPerson(IsUsPersonEnum isUsPerson) {
    this.isUsPerson = isUsPerson;
  }


  public Customer legalAge(LegalAgeEnum legalAge) {
    
    this.legalAge = legalAge;
    return this;
  }

   /**
   * This field indicates if Customer is/not of Legal Age.
   * @return legalAge
  **/
  @javax.annotation.Nullable
  public LegalAgeEnum getLegalAge() {
    return legalAge;
  }


  public void setLegalAge(LegalAgeEnum legalAge) {
    this.legalAge = legalAge;
  }


  public Customer sourceOfFunds(String sourceOfFunds) {
    
    this.sourceOfFunds = sourceOfFunds;
    return this;
  }

   /**
   * Source of Funds. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return sourceOfFunds
  **/
  @javax.annotation.Nullable
  public String getSourceOfFunds() {
    return sourceOfFunds;
  }


  public void setSourceOfFunds(String sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
  }


  public Customer purposeOfAccount(String purposeOfAccount) {
    
    this.purposeOfAccount = purposeOfAccount;
    return this;
  }

   /**
   * Purpose of Account. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return purposeOfAccount
  **/
  @javax.annotation.Nullable
  public String getPurposeOfAccount() {
    return purposeOfAccount;
  }


  public void setPurposeOfAccount(String purposeOfAccount) {
    this.purposeOfAccount = purposeOfAccount;
  }


  public Customer expectedAccountVolumes(String expectedAccountVolumes) {
    
    this.expectedAccountVolumes = expectedAccountVolumes;
    return this;
  }

   /**
   * Expected Account Volumes.
   * @return expectedAccountVolumes
  **/
  @javax.annotation.Nullable
  public String getExpectedAccountVolumes() {
    return expectedAccountVolumes;
  }


  public void setExpectedAccountVolumes(String expectedAccountVolumes) {
    this.expectedAccountVolumes = expectedAccountVolumes;
  }


  public Customer fundsInOutCountries(String fundsInOutCountries) {
    
    this.fundsInOutCountries = fundsInOutCountries;
    return this;
  }

   /**
   * Funds In Out Countries (Comma separated list).
   * @return fundsInOutCountries
  **/
  @javax.annotation.Nullable
  public String getFundsInOutCountries() {
    return fundsInOutCountries;
  }


  public void setFundsInOutCountries(String fundsInOutCountries) {
    this.fundsInOutCountries = fundsInOutCountries;
  }


  public Customer subscriptionType(String subscriptionType) {
    
    this.subscriptionType = subscriptionType;
    return this;
  }

   /**
   * Subscription Type.
   * @return subscriptionType
  **/
  @javax.annotation.Nullable
  public String getSubscriptionType() {
    return subscriptionType;
  }


  public void setSubscriptionType(String subscriptionType) {
    this.subscriptionType = subscriptionType;
  }


  public Customer profileVisibility(ProfileVisibilityEnum profileVisibility) {
    
    this.profileVisibility = profileVisibility;
    return this;
  }

   /**
   * Profile Visibility.
   * @return profileVisibility
  **/
  @javax.annotation.Nullable
  public ProfileVisibilityEnum getProfileVisibility() {
    return profileVisibility;
  }


  public void setProfileVisibility(ProfileVisibilityEnum profileVisibility) {
    this.profileVisibility = profileVisibility;
  }


  public Customer thirdPartyStatus(String thirdPartyStatus) {
    
    this.thirdPartyStatus = thirdPartyStatus;
    return this;
  }

   /**
   * Third Party Status.
   * @return thirdPartyStatus
  **/
  @javax.annotation.Nullable
  public String getThirdPartyStatus() {
    return thirdPartyStatus;
  }


  public void setThirdPartyStatus(String thirdPartyStatus) {
    this.thirdPartyStatus = thirdPartyStatus;
  }


  public Customer bankProfileId(String bankProfileId) {
    
    this.bankProfileId = bankProfileId;
    return this;
  }

   /**
   * Bank Profile Id. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return bankProfileId
  **/
  @javax.annotation.Nullable
  public String getBankProfileId() {
    return bankProfileId;
  }


  public void setBankProfileId(String bankProfileId) {
    this.bankProfileId = bankProfileId;
  }


  public Customer referralCode(String referralCode) {
    
    this.referralCode = referralCode;
    return this;
  }

   /**
   * Referral Code.
   * @return referralCode
  **/
  @javax.annotation.Nullable
  public String getReferralCode() {
    return referralCode;
  }


  public void setReferralCode(String referralCode) {
    this.referralCode = referralCode;
  }


  public Customer profileImageRefNumber(String profileImageRefNumber) {
    
    this.profileImageRefNumber = profileImageRefNumber;
    return this;
  }

   /**
   * Reference Number of Customer&#39;s Profile Image.
   * @return profileImageRefNumber
  **/
  @javax.annotation.Nullable
  public String getProfileImageRefNumber() {
    return profileImageRefNumber;
  }


  public void setProfileImageRefNumber(String profileImageRefNumber) {
    this.profileImageRefNumber = profileImageRefNumber;
  }


  public Customer dateOfDeath(LocalDate dateOfDeath) {
    
    this.dateOfDeath = dateOfDeath;
    return this;
  }

   /**
   * Customer&#39;s Date of Death.
   * @return dateOfDeath
  **/
  @javax.annotation.Nullable
  public LocalDate getDateOfDeath() {
    return dateOfDeath;
  }


  public void setDateOfDeath(LocalDate dateOfDeath) {
    this.dateOfDeath = dateOfDeath;
  }


  public Customer nonResidentAlien(NonResidentAlienEnum nonResidentAlien) {
    
    this.nonResidentAlien = nonResidentAlien;
    return this;
  }

   /**
   * This field indicates if Customer is/not a Non Resident Alien.
   * @return nonResidentAlien
  **/
  @javax.annotation.Nullable
  public NonResidentAlienEnum getNonResidentAlien() {
    return nonResidentAlien;
  }


  public void setNonResidentAlien(NonResidentAlienEnum nonResidentAlien) {
    this.nonResidentAlien = nonResidentAlien;
  }


  public Customer embassy(EmbassyEnum embassy) {
    
    this.embassy = embassy;
    return this;
  }

   /**
   * This field indicates if Customer is/not an Embassy.
   * @return embassy
  **/
  @javax.annotation.Nullable
  public EmbassyEnum getEmbassy() {
    return embassy;
  }


  public void setEmbassy(EmbassyEnum embassy) {
    this.embassy = embassy;
  }


  public Customer customerType(String customerType) {
    
    this.customerType = customerType;
    return this;
  }

   /**
   * Customer Type. * Citizen/Permanent Resident * Expatriate or Foreign Worker 
   * @return customerType
  **/
  @javax.annotation.Nullable
  public String getCustomerType() {
    return customerType;
  }


  public void setCustomerType(String customerType) {
    this.customerType = customerType;
  }


  public Customer expectedDepositsPerYear(String expectedDepositsPerYear) {
    
    this.expectedDepositsPerYear = expectedDepositsPerYear;
    return this;
  }

   /**
   * Risk - Expected Deposits per year.
   * @return expectedDepositsPerYear
  **/
  @javax.annotation.Nullable
  public String getExpectedDepositsPerYear() {
    return expectedDepositsPerYear;
  }


  public void setExpectedDepositsPerYear(String expectedDepositsPerYear) {
    this.expectedDepositsPerYear = expectedDepositsPerYear;
  }


  public Customer occasionalRegularFlag(String occasionalRegularFlag) {
    
    this.occasionalRegularFlag = occasionalRegularFlag;
    return this;
  }

   /**
   * Setting up the Customer Type based on Occasional Regular Flag.
   * @return occasionalRegularFlag
  **/
  @javax.annotation.Nullable
  public String getOccasionalRegularFlag() {
    return occasionalRegularFlag;
  }


  public void setOccasionalRegularFlag(String occasionalRegularFlag) {
    this.occasionalRegularFlag = occasionalRegularFlag;
  }


  public Customer nameUpdateConsent(String nameUpdateConsent) {
    
    this.nameUpdateConsent = nameUpdateConsent;
    return this;
  }

   /**
   * Consent from customer to update name from the OCR details on the ID.
   * @return nameUpdateConsent
  **/
  @javax.annotation.Nullable
  public String getNameUpdateConsent() {
    return nameUpdateConsent;
  }


  public void setNameUpdateConsent(String nameUpdateConsent) {
    this.nameUpdateConsent = nameUpdateConsent;
  }


  public Customer nameUpdateConsentDate(OffsetDateTime nameUpdateConsentDate) {
    
    this.nameUpdateConsentDate = nameUpdateConsentDate;
    return this;
  }

   /**
   * Timestamp on which the Customer&#39;s Consent to update name from the OCR details on the Id has been added/updated (Read-Only).
   * @return nameUpdateConsentDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getNameUpdateConsentDate() {
    return nameUpdateConsentDate;
  }


  public void setNameUpdateConsentDate(OffsetDateTime nameUpdateConsentDate) {
    this.nameUpdateConsentDate = nameUpdateConsentDate;
  }


  public Customer annualCheckStatus(AnnualCheckStatusEnum annualCheckStatus) {
    
    this.annualCheckStatus = annualCheckStatus;
    return this;
  }

   /**
   * Annual Check Status.
   * @return annualCheckStatus
  **/
  @javax.annotation.Nullable
  public AnnualCheckStatusEnum getAnnualCheckStatus() {
    return annualCheckStatus;
  }


  public void setAnnualCheckStatus(AnnualCheckStatusEnum annualCheckStatus) {
    this.annualCheckStatus = annualCheckStatus;
  }


  public Customer annualCheckStatusUpdatedDate(OffsetDateTime annualCheckStatusUpdatedDate) {
    
    this.annualCheckStatusUpdatedDate = annualCheckStatusUpdatedDate;
    return this;
  }

   /**
   * Annual Check Status Updated Date.
   * @return annualCheckStatusUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAnnualCheckStatusUpdatedDate() {
    return annualCheckStatusUpdatedDate;
  }


  public void setAnnualCheckStatusUpdatedDate(OffsetDateTime annualCheckStatusUpdatedDate) {
    this.annualCheckStatusUpdatedDate = annualCheckStatusUpdatedDate;
  }


  public Customer eligibleForCryptoBuy(String eligibleForCryptoBuy) {
    
    this.eligibleForCryptoBuy = eligibleForCryptoBuy;
    return this;
  }

   /**
   * This field indicates if a Customer is eligible to buy Crypto. This field should be updated as Y when customer completes first crypto purchase or profile refresh process. If this flag is Y, customer can be allowed to buy crypto without further calls to RAC.
   * @return eligibleForCryptoBuy
  **/
  @javax.annotation.Nullable
  public String getEligibleForCryptoBuy() {
    return eligibleForCryptoBuy;
  }


  public void setEligibleForCryptoBuy(String eligibleForCryptoBuy) {
    this.eligibleForCryptoBuy = eligibleForCryptoBuy;
  }


  public Customer cryptoTaxAccountId(String cryptoTaxAccountId) {
    
    this.cryptoTaxAccountId = cryptoTaxAccountId;
    return this;
  }

   /**
   * Account Owner ID for Crypto Tax Partner/Provider (e.g., Taxbit)
   * @return cryptoTaxAccountId
  **/
  @javax.annotation.Nullable
  public String getCryptoTaxAccountId() {
    return cryptoTaxAccountId;
  }


  public void setCryptoTaxAccountId(String cryptoTaxAccountId) {
    this.cryptoTaxAccountId = cryptoTaxAccountId;
  }


  public Customer profileRefreshFlag(String profileRefreshFlag) {
    
    this.profileRefreshFlag = profileRefreshFlag;
    return this;
  }

   /**
   * This field represents the status of Profile Refresh.  * Not available/Blank – Profile Refresh was never completed * I - Profile Refresh is in progress (This value is updated by Mule/Outsystems) * Y - Profile Refresh is completed (This value is updated by RAC) * 0 - Nullify the existing value 
   * @return profileRefreshFlag
  **/
  @javax.annotation.Nullable
  public String getProfileRefreshFlag() {
    return profileRefreshFlag;
  }


  public void setProfileRefreshFlag(String profileRefreshFlag) {
    this.profileRefreshFlag = profileRefreshFlag;
  }


  public Customer profileRefreshDate(OffsetDateTime profileRefreshDate) {
    
    this.profileRefreshDate = profileRefreshDate;
    return this;
  }

   /**
   * Timestamp which represents when customer completed Profile Refresh. This field could be nullified by passing \&quot;1000-01-01T00:00:00.001-05:00\&quot;. (This value is maintained by RAC)
   * @return profileRefreshDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getProfileRefreshDate() {
    return profileRefreshDate;
  }


  public void setProfileRefreshDate(OffsetDateTime profileRefreshDate) {
    this.profileRefreshDate = profileRefreshDate;
  }


  public Customer profileRefreshDueDate(OffsetDateTime profileRefreshDueDate) {
    
    this.profileRefreshDueDate = profileRefreshDueDate;
    return this;
  }

   /**
   * Timestamp when the Profile Refresh is due for the customer. This field could be nullified by passing \&quot;1000-01-01T00:00:00.001-05:00\&quot;. (This value is maintained by RAC)
   * @return profileRefreshDueDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getProfileRefreshDueDate() {
    return profileRefreshDueDate;
  }


  public void setProfileRefreshDueDate(OffsetDateTime profileRefreshDueDate) {
    this.profileRefreshDueDate = profileRefreshDueDate;
  }


  public Customer profileRefreshAttributes(String profileRefreshAttributes) {
    
    this.profileRefreshAttributes = profileRefreshAttributes;
    return this;
  }

   /**
   * This field could be used to store additional info regarding the Profile Refresh. Profile Refresh refers to a process where Digital Bank/Wallet customer is asked to review his/her profile information and confirm if any changes are needed. It will have key-value pairs. This field could be nullified by passing \&quot;NUL\&quot;. (This value is maintained by RAC)
   * @return profileRefreshAttributes
  **/
  @javax.annotation.Nullable
  public String getProfileRefreshAttributes() {
    return profileRefreshAttributes;
  }


  public void setProfileRefreshAttributes(String profileRefreshAttributes) {
    this.profileRefreshAttributes = profileRefreshAttributes;
  }


  public Customer preferredMfaMethod(String preferredMfaMethod) {
    
    this.preferredMfaMethod = preferredMfaMethod;
    return this;
  }

   /**
   * Preferred Method for MFA (Multi Factor Authentication) for Prepaid. * E - Email * S - SMS. 
   * @return preferredMfaMethod
  **/
  @javax.annotation.Nullable
  public String getPreferredMfaMethod() {
    return preferredMfaMethod;
  }


  public void setPreferredMfaMethod(String preferredMfaMethod) {
    this.preferredMfaMethod = preferredMfaMethod;
  }


  public Customer referenceUmn(String referenceUmn) {
    
    this.referenceUmn = referenceUmn;
    return this;
  }

   /**
   * Reference Universal Membership Number.
   * @return referenceUmn
  **/
  @javax.annotation.Nullable
  public String getReferenceUmn() {
    return referenceUmn;
  }


  public void setReferenceUmn(String referenceUmn) {
    this.referenceUmn = referenceUmn;
  }


  public Customer purposeOfServices(String purposeOfServices) {
    
    this.purposeOfServices = purposeOfServices;
    return this;
  }

   /**
   * Purpose of Services.
   * @return purposeOfServices
  **/
  @javax.annotation.Nullable
  public String getPurposeOfServices() {
    return purposeOfServices;
  }


  public void setPurposeOfServices(String purposeOfServices) {
    this.purposeOfServices = purposeOfServices;
  }


  public Customer expReceiverCountries(String expReceiverCountries) {
    
    this.expReceiverCountries = expReceiverCountries;
    return this;
  }

   /**
   * Receiver Countries.
   * @return expReceiverCountries
  **/
  @javax.annotation.Nullable
  public String getExpReceiverCountries() {
    return expReceiverCountries;
  }


  public void setExpReceiverCountries(String expReceiverCountries) {
    this.expReceiverCountries = expReceiverCountries;
  }


  public Customer expSenderCountries(String expSenderCountries) {
    
    this.expSenderCountries = expSenderCountries;
    return this;
  }

   /**
   * Sender Countries.
   * @return expSenderCountries
  **/
  @javax.annotation.Nullable
  public String getExpSenderCountries() {
    return expSenderCountries;
  }


  public void setExpSenderCountries(String expSenderCountries) {
    this.expSenderCountries = expSenderCountries;
  }


  public Customer txnFrequencyRange(String txnFrequencyRange) {
    
    this.txnFrequencyRange = txnFrequencyRange;
    return this;
  }

   /**
   * Transaction Frequency Range.
   * @return txnFrequencyRange
  **/
  @javax.annotation.Nullable
  public String getTxnFrequencyRange() {
    return txnFrequencyRange;
  }


  public void setTxnFrequencyRange(String txnFrequencyRange) {
    this.txnFrequencyRange = txnFrequencyRange;
  }


  public Customer primaryUmnFlag(String primaryUmnFlag) {
    
    this.primaryUmnFlag = primaryUmnFlag;
    return this;
  }

   /**
   * Customer profile is primary or not. This is a ready-only field and generated by UCD.
   * @return primaryUmnFlag
  **/
  @javax.annotation.Nullable
  public String getPrimaryUmnFlag() {
    return primaryUmnFlag;
  }


  public void setPrimaryUmnFlag(String primaryUmnFlag) {
    this.primaryUmnFlag = primaryUmnFlag;
  }


  public Customer primaryUmnFlagUpdatedDate(OffsetDateTime primaryUmnFlagUpdatedDate) {
    
    this.primaryUmnFlagUpdatedDate = primaryUmnFlagUpdatedDate;
    return this;
  }

   /**
   * Timestamp when customer profile is identified as primary. This is a ready-only field and generated by UCD.
   * @return primaryUmnFlagUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getPrimaryUmnFlagUpdatedDate() {
    return primaryUmnFlagUpdatedDate;
  }


  public void setPrimaryUmnFlagUpdatedDate(OffsetDateTime primaryUmnFlagUpdatedDate) {
    this.primaryUmnFlagUpdatedDate = primaryUmnFlagUpdatedDate;
  }


  public Customer directoryAlias(String directoryAlias) {
    
    this.directoryAlias = directoryAlias;
    return this;
  }

   /**
   * Customer&#39;s directory handle.
   * @return directoryAlias
  **/
  @javax.annotation.Nullable
  public String getDirectoryAlias() {
    return directoryAlias;
  }


  public void setDirectoryAlias(String directoryAlias) {
    this.directoryAlias = directoryAlias;
  }


  public Customer reaccreditionFlag(String reaccreditionFlag) {
    
    this.reaccreditionFlag = reaccreditionFlag;
    return this;
  }

   /**
   * This field represents the status of Reaccreditation.  * Not available/Blank – reaccreditation was never completed * I - Reaccreditation is in progress (This value is updated by Mule/Outsystems) * Y - Reaccreditation is completed (This value is updated by RAC) * 0 - Nullify the existing value 
   * @return reaccreditionFlag
  **/
  @javax.annotation.Nullable
  public String getReaccreditionFlag() {
    return reaccreditionFlag;
  }


  public void setReaccreditionFlag(String reaccreditionFlag) {
    this.reaccreditionFlag = reaccreditionFlag;
  }


  public Customer reaccreditationDueDate(OffsetDateTime reaccreditationDueDate) {
    
    this.reaccreditationDueDate = reaccreditationDueDate;
    return this;
  }

   /**
   * Timestamp when the Reaccreditation is due for the customer. This field could be nullified by passing \&quot;1000-01-01T00:00:00.001-05:00\&quot;. (This value is maintained by RAC)
   * @return reaccreditationDueDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getReaccreditationDueDate() {
    return reaccreditationDueDate;
  }


  public void setReaccreditationDueDate(OffsetDateTime reaccreditationDueDate) {
    this.reaccreditationDueDate = reaccreditationDueDate;
  }


  public Customer reaccreditationStatusDate(OffsetDateTime reaccreditationStatusDate) {
    
    this.reaccreditationStatusDate = reaccreditationStatusDate;
    return this;
  }

   /**
   * Timestamp when ReaccreditationFlag is added/updated. This field could be nullified by passing \&quot;1000-01-01T00:00:00.001-05:00\&quot;. (This value is maintained by RAC)
   * @return reaccreditationStatusDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getReaccreditationStatusDate() {
    return reaccreditationStatusDate;
  }


  public void setReaccreditationStatusDate(OffsetDateTime reaccreditationStatusDate) {
    this.reaccreditationStatusDate = reaccreditationStatusDate;
  }


  public Customer reaccreditationAttributes(String reaccreditationAttributes) {
    
    this.reaccreditationAttributes = reaccreditationAttributes;
    return this;
  }

   /**
   * Reaccreditation Attributes to be stored in JSON format. This field could be nullified by passing \&quot;NUL\&quot;. (This value is maintained by RAC)
   * @return reaccreditationAttributes
  **/
  @javax.annotation.Nullable
  public String getReaccreditationAttributes() {
    return reaccreditationAttributes;
  }


  public void setReaccreditationAttributes(String reaccreditationAttributes) {
    this.reaccreditationAttributes = reaccreditationAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Customer customer = (Customer) o;
    return Objects.equals(this.name, customer.name) &&
        Objects.equals(this.motherName, customer.motherName) &&
        Objects.equals(this.dob, customer.dob) &&
        Objects.equals(this.genderType, customer.genderType) &&
        Objects.equals(this.referenceForGenderOther, customer.referenceForGenderOther) &&
        Objects.equals(this.nationality, customer.nationality) &&
        Objects.equals(this.nationalityIso3, customer.nationalityIso3) &&
        Objects.equals(this.customerUmn, customer.customerUmn) &&
        Objects.equals(this.customerUmnHash, customer.customerUmnHash) &&
        Objects.equals(this.convenienceNo, customer.convenienceNo) &&
        Objects.equals(this.profileTypeId, customer.profileTypeId) &&
        Objects.equals(this.trafficFlag, customer.trafficFlag) &&
        Objects.equals(this.ratingCode, customer.ratingCode) &&
        Objects.equals(this.ratingDate, customer.ratingDate) &&
        Objects.equals(this.oprValidationFlag, customer.oprValidationFlag) &&
        Objects.equals(this.validationDate, customer.validationDate) &&
        Objects.equals(this.customerGaurantee, customer.customerGaurantee) &&
        Objects.equals(this.customerLevelCode, customer.customerLevelCode) &&
        Objects.equals(this.reasonForDeletion, customer.reasonForDeletion) &&
        Objects.equals(this.customerEsignFlag, customer.customerEsignFlag) &&
        Objects.equals(this.customerEsignFlagUpdateDate, customer.customerEsignFlagUpdateDate) &&
        Objects.equals(this.occupation, customer.occupation) &&
        Objects.equals(this.cityOfBirth, customer.cityOfBirth) &&
        Objects.equals(this.countryOfBirth, customer.countryOfBirth) &&
        Objects.equals(this.countryOfBirthIso3, customer.countryOfBirthIso3) &&
        Objects.equals(this.galacticId, customer.galacticId) &&
        Objects.equals(this.galacticIdUpdatedDate, customer.galacticIdUpdatedDate) &&
        Objects.equals(this.customerMasterKey, customer.customerMasterKey) &&
        Objects.equals(this.customerMasterKeyUpdatedDate, customer.customerMasterKeyUpdatedDate) &&
        Objects.equals(this.easSha1, customer.easSha1) &&
        Objects.equals(this.freePassTxnCount, customer.freePassTxnCount) &&
        Objects.equals(this.industry, customer.industry) &&
        Objects.equals(this.platform, customer.platform) &&
        Objects.equals(this.employeePositionLevel, customer.employeePositionLevel) &&
        Objects.equals(this.employerSchoolName, customer.employerSchoolName) &&
        Objects.equals(this.providerId, customer.providerId) &&
        Objects.equals(this.clientId, customer.clientId) &&
        Objects.equals(this.employeeId, customer.employeeId) &&
        Objects.equals(this.martialStatus, customer.martialStatus) &&
        Objects.equals(this.annualIncome, customer.annualIncome) &&
        Objects.equals(this.annualIncomeCurrency, customer.annualIncomeCurrency) &&
        Objects.equals(this.annualIncomeBracket, customer.annualIncomeBracket) &&
        Objects.equals(this.referFriendFlag, customer.referFriendFlag) &&
        Objects.equals(this.customerCategory, customer.customerCategory) &&
        Objects.equals(this.customerCategoryUpdatedDate, customer.customerCategoryUpdatedDate) &&
        Objects.equals(this.employmentStatus, customer.employmentStatus) &&
        Objects.equals(this.employmentSdqEffectiveDate, customer.employmentSdqEffectiveDate) &&
        Objects.equals(this.employeeFlag, customer.employeeFlag) &&
        Objects.equals(this.countryOfResidence, customer.countryOfResidence) &&
        Objects.equals(this.countryOfResidenceIso3, customer.countryOfResidenceIso3) &&
        Objects.equals(this.pepSdq, customer.pepSdq) &&
        Objects.equals(this.pepCategory, customer.pepCategory) &&
        Objects.equals(this.isUsPerson, customer.isUsPerson) &&
        Objects.equals(this.legalAge, customer.legalAge) &&
        Objects.equals(this.sourceOfFunds, customer.sourceOfFunds) &&
        Objects.equals(this.purposeOfAccount, customer.purposeOfAccount) &&
        Objects.equals(this.expectedAccountVolumes, customer.expectedAccountVolumes) &&
        Objects.equals(this.fundsInOutCountries, customer.fundsInOutCountries) &&
        Objects.equals(this.subscriptionType, customer.subscriptionType) &&
        Objects.equals(this.profileVisibility, customer.profileVisibility) &&
        Objects.equals(this.thirdPartyStatus, customer.thirdPartyStatus) &&
        Objects.equals(this.bankProfileId, customer.bankProfileId) &&
        Objects.equals(this.referralCode, customer.referralCode) &&
        Objects.equals(this.profileImageRefNumber, customer.profileImageRefNumber) &&
        Objects.equals(this.dateOfDeath, customer.dateOfDeath) &&
        Objects.equals(this.nonResidentAlien, customer.nonResidentAlien) &&
        Objects.equals(this.embassy, customer.embassy) &&
        Objects.equals(this.customerType, customer.customerType) &&
        Objects.equals(this.expectedDepositsPerYear, customer.expectedDepositsPerYear) &&
        Objects.equals(this.occasionalRegularFlag, customer.occasionalRegularFlag) &&
        Objects.equals(this.nameUpdateConsent, customer.nameUpdateConsent) &&
        Objects.equals(this.nameUpdateConsentDate, customer.nameUpdateConsentDate) &&
        Objects.equals(this.annualCheckStatus, customer.annualCheckStatus) &&
        Objects.equals(this.annualCheckStatusUpdatedDate, customer.annualCheckStatusUpdatedDate) &&
        Objects.equals(this.eligibleForCryptoBuy, customer.eligibleForCryptoBuy) &&
        Objects.equals(this.cryptoTaxAccountId, customer.cryptoTaxAccountId) &&
        Objects.equals(this.profileRefreshFlag, customer.profileRefreshFlag) &&
        Objects.equals(this.profileRefreshDate, customer.profileRefreshDate) &&
        Objects.equals(this.profileRefreshDueDate, customer.profileRefreshDueDate) &&
        Objects.equals(this.profileRefreshAttributes, customer.profileRefreshAttributes) &&
        Objects.equals(this.preferredMfaMethod, customer.preferredMfaMethod) &&
        Objects.equals(this.referenceUmn, customer.referenceUmn) &&
        Objects.equals(this.purposeOfServices, customer.purposeOfServices) &&
        Objects.equals(this.expReceiverCountries, customer.expReceiverCountries) &&
        Objects.equals(this.expSenderCountries, customer.expSenderCountries) &&
        Objects.equals(this.txnFrequencyRange, customer.txnFrequencyRange) &&
        Objects.equals(this.primaryUmnFlag, customer.primaryUmnFlag) &&
        Objects.equals(this.primaryUmnFlagUpdatedDate, customer.primaryUmnFlagUpdatedDate) &&
        Objects.equals(this.directoryAlias, customer.directoryAlias) &&
        Objects.equals(this.reaccreditionFlag, customer.reaccreditionFlag) &&
        Objects.equals(this.reaccreditationDueDate, customer.reaccreditationDueDate) &&
        Objects.equals(this.reaccreditationStatusDate, customer.reaccreditationStatusDate) &&
        Objects.equals(this.reaccreditationAttributes, customer.reaccreditationAttributes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, motherName, dob, genderType, referenceForGenderOther, nationality, nationalityIso3, customerUmn, customerUmnHash, convenienceNo, profileTypeId, trafficFlag, ratingCode, ratingDate, oprValidationFlag, validationDate, customerGaurantee, customerLevelCode, reasonForDeletion, customerEsignFlag, customerEsignFlagUpdateDate, occupation, cityOfBirth, countryOfBirth, countryOfBirthIso3, galacticId, galacticIdUpdatedDate, customerMasterKey, customerMasterKeyUpdatedDate, easSha1, freePassTxnCount, industry, platform, employeePositionLevel, employerSchoolName, providerId, clientId, employeeId, martialStatus, annualIncome, annualIncomeCurrency, annualIncomeBracket, referFriendFlag, customerCategory, customerCategoryUpdatedDate, employmentStatus, employmentSdqEffectiveDate, employeeFlag, countryOfResidence, countryOfResidenceIso3, pepSdq, pepCategory, isUsPerson, legalAge, sourceOfFunds, purposeOfAccount, expectedAccountVolumes, fundsInOutCountries, subscriptionType, profileVisibility, thirdPartyStatus, bankProfileId, referralCode, profileImageRefNumber, dateOfDeath, nonResidentAlien, embassy, customerType, expectedDepositsPerYear, occasionalRegularFlag, nameUpdateConsent, nameUpdateConsentDate, annualCheckStatus, annualCheckStatusUpdatedDate, eligibleForCryptoBuy, cryptoTaxAccountId, profileRefreshFlag, profileRefreshDate, profileRefreshDueDate, profileRefreshAttributes, preferredMfaMethod, referenceUmn, purposeOfServices, expReceiverCountries, expSenderCountries, txnFrequencyRange, primaryUmnFlag, primaryUmnFlagUpdatedDate, directoryAlias, reaccreditionFlag, reaccreditationDueDate, reaccreditationStatusDate, reaccreditationAttributes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Customer {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    motherName: ").append(toIndentedString(motherName)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    genderType: ").append(toIndentedString(genderType)).append("\n");
    sb.append("    referenceForGenderOther: ").append(toIndentedString(referenceForGenderOther)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    nationalityIso3: ").append(toIndentedString(nationalityIso3)).append("\n");
    sb.append("    customerUmn: ").append(toIndentedString(customerUmn)).append("\n");
    sb.append("    customerUmnHash: ").append(toIndentedString(customerUmnHash)).append("\n");
    sb.append("    convenienceNo: ").append(toIndentedString(convenienceNo)).append("\n");
    sb.append("    profileTypeId: ").append(toIndentedString(profileTypeId)).append("\n");
    sb.append("    trafficFlag: ").append(toIndentedString(trafficFlag)).append("\n");
    sb.append("    ratingCode: ").append(toIndentedString(ratingCode)).append("\n");
    sb.append("    ratingDate: ").append(toIndentedString(ratingDate)).append("\n");
    sb.append("    oprValidationFlag: ").append(toIndentedString(oprValidationFlag)).append("\n");
    sb.append("    validationDate: ").append(toIndentedString(validationDate)).append("\n");
    sb.append("    customerGaurantee: ").append(toIndentedString(customerGaurantee)).append("\n");
    sb.append("    customerLevelCode: ").append(toIndentedString(customerLevelCode)).append("\n");
    sb.append("    reasonForDeletion: ").append(toIndentedString(reasonForDeletion)).append("\n");
    sb.append("    customerEsignFlag: ").append(toIndentedString(customerEsignFlag)).append("\n");
    sb.append("    customerEsignFlagUpdateDate: ").append(toIndentedString(customerEsignFlagUpdateDate)).append("\n");
    sb.append("    occupation: ").append(toIndentedString(occupation)).append("\n");
    sb.append("    cityOfBirth: ").append(toIndentedString(cityOfBirth)).append("\n");
    sb.append("    countryOfBirth: ").append(toIndentedString(countryOfBirth)).append("\n");
    sb.append("    countryOfBirthIso3: ").append(toIndentedString(countryOfBirthIso3)).append("\n");
    sb.append("    galacticId: ").append(toIndentedString(galacticId)).append("\n");
    sb.append("    galacticIdUpdatedDate: ").append(toIndentedString(galacticIdUpdatedDate)).append("\n");
    sb.append("    customerMasterKey: ").append(toIndentedString(customerMasterKey)).append("\n");
    sb.append("    customerMasterKeyUpdatedDate: ").append(toIndentedString(customerMasterKeyUpdatedDate)).append("\n");
    sb.append("    easSha1: ").append(toIndentedString(easSha1)).append("\n");
    sb.append("    freePassTxnCount: ").append(toIndentedString(freePassTxnCount)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    employeePositionLevel: ").append(toIndentedString(employeePositionLevel)).append("\n");
    sb.append("    employerSchoolName: ").append(toIndentedString(employerSchoolName)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    martialStatus: ").append(toIndentedString(martialStatus)).append("\n");
    sb.append("    annualIncome: ").append(toIndentedString(annualIncome)).append("\n");
    sb.append("    annualIncomeCurrency: ").append(toIndentedString(annualIncomeCurrency)).append("\n");
    sb.append("    annualIncomeBracket: ").append(toIndentedString(annualIncomeBracket)).append("\n");
    sb.append("    referFriendFlag: ").append(toIndentedString(referFriendFlag)).append("\n");
    sb.append("    customerCategory: ").append(toIndentedString(customerCategory)).append("\n");
    sb.append("    customerCategoryUpdatedDate: ").append(toIndentedString(customerCategoryUpdatedDate)).append("\n");
    sb.append("    employmentStatus: ").append(toIndentedString(employmentStatus)).append("\n");
    sb.append("    employmentSdqEffectiveDate: ").append(toIndentedString(employmentSdqEffectiveDate)).append("\n");
    sb.append("    employeeFlag: ").append(toIndentedString(employeeFlag)).append("\n");
    sb.append("    countryOfResidence: ").append(toIndentedString(countryOfResidence)).append("\n");
    sb.append("    countryOfResidenceIso3: ").append(toIndentedString(countryOfResidenceIso3)).append("\n");
    sb.append("    pepSdq: ").append(toIndentedString(pepSdq)).append("\n");
    sb.append("    pepCategory: ").append(toIndentedString(pepCategory)).append("\n");
    sb.append("    isUsPerson: ").append(toIndentedString(isUsPerson)).append("\n");
    sb.append("    legalAge: ").append(toIndentedString(legalAge)).append("\n");
    sb.append("    sourceOfFunds: ").append(toIndentedString(sourceOfFunds)).append("\n");
    sb.append("    purposeOfAccount: ").append(toIndentedString(purposeOfAccount)).append("\n");
    sb.append("    expectedAccountVolumes: ").append(toIndentedString(expectedAccountVolumes)).append("\n");
    sb.append("    fundsInOutCountries: ").append(toIndentedString(fundsInOutCountries)).append("\n");
    sb.append("    subscriptionType: ").append(toIndentedString(subscriptionType)).append("\n");
    sb.append("    profileVisibility: ").append(toIndentedString(profileVisibility)).append("\n");
    sb.append("    thirdPartyStatus: ").append(toIndentedString(thirdPartyStatus)).append("\n");
    sb.append("    bankProfileId: ").append(toIndentedString(bankProfileId)).append("\n");
    sb.append("    referralCode: ").append(toIndentedString(referralCode)).append("\n");
    sb.append("    profileImageRefNumber: ").append(toIndentedString(profileImageRefNumber)).append("\n");
    sb.append("    dateOfDeath: ").append(toIndentedString(dateOfDeath)).append("\n");
    sb.append("    nonResidentAlien: ").append(toIndentedString(nonResidentAlien)).append("\n");
    sb.append("    embassy: ").append(toIndentedString(embassy)).append("\n");
    sb.append("    customerType: ").append(toIndentedString(customerType)).append("\n");
    sb.append("    expectedDepositsPerYear: ").append(toIndentedString(expectedDepositsPerYear)).append("\n");
    sb.append("    occasionalRegularFlag: ").append(toIndentedString(occasionalRegularFlag)).append("\n");
    sb.append("    nameUpdateConsent: ").append(toIndentedString(nameUpdateConsent)).append("\n");
    sb.append("    nameUpdateConsentDate: ").append(toIndentedString(nameUpdateConsentDate)).append("\n");
    sb.append("    annualCheckStatus: ").append(toIndentedString(annualCheckStatus)).append("\n");
    sb.append("    annualCheckStatusUpdatedDate: ").append(toIndentedString(annualCheckStatusUpdatedDate)).append("\n");
    sb.append("    eligibleForCryptoBuy: ").append(toIndentedString(eligibleForCryptoBuy)).append("\n");
    sb.append("    cryptoTaxAccountId: ").append(toIndentedString(cryptoTaxAccountId)).append("\n");
    sb.append("    profileRefreshFlag: ").append(toIndentedString(profileRefreshFlag)).append("\n");
    sb.append("    profileRefreshDate: ").append(toIndentedString(profileRefreshDate)).append("\n");
    sb.append("    profileRefreshDueDate: ").append(toIndentedString(profileRefreshDueDate)).append("\n");
    sb.append("    profileRefreshAttributes: ").append(toIndentedString(profileRefreshAttributes)).append("\n");
    sb.append("    preferredMfaMethod: ").append(toIndentedString(preferredMfaMethod)).append("\n");
    sb.append("    referenceUmn: ").append(toIndentedString(referenceUmn)).append("\n");
    sb.append("    purposeOfServices: ").append(toIndentedString(purposeOfServices)).append("\n");
    sb.append("    expReceiverCountries: ").append(toIndentedString(expReceiverCountries)).append("\n");
    sb.append("    expSenderCountries: ").append(toIndentedString(expSenderCountries)).append("\n");
    sb.append("    txnFrequencyRange: ").append(toIndentedString(txnFrequencyRange)).append("\n");
    sb.append("    primaryUmnFlag: ").append(toIndentedString(primaryUmnFlag)).append("\n");
    sb.append("    primaryUmnFlagUpdatedDate: ").append(toIndentedString(primaryUmnFlagUpdatedDate)).append("\n");
    sb.append("    directoryAlias: ").append(toIndentedString(directoryAlias)).append("\n");
    sb.append("    reaccreditionFlag: ").append(toIndentedString(reaccreditionFlag)).append("\n");
    sb.append("    reaccreditationDueDate: ").append(toIndentedString(reaccreditationDueDate)).append("\n");
    sb.append("    reaccreditationStatusDate: ").append(toIndentedString(reaccreditationStatusDate)).append("\n");
    sb.append("    reaccreditationAttributes: ").append(toIndentedString(reaccreditationAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("motherName");
    openapiFields.add("dob");
    openapiFields.add("genderType");
    openapiFields.add("referenceForGenderOther");
    openapiFields.add("nationality");
    openapiFields.add("nationalityIso3");
    openapiFields.add("customerUmn");
    openapiFields.add("customerUmnHash");
    openapiFields.add("convenienceNo");
    openapiFields.add("profileTypeId");
    openapiFields.add("trafficFlag");
    openapiFields.add("ratingCode");
    openapiFields.add("ratingDate");
    openapiFields.add("oprValidationFlag");
    openapiFields.add("validationDate");
    openapiFields.add("customerGaurantee");
    openapiFields.add("customerLevelCode");
    openapiFields.add("reasonForDeletion");
    openapiFields.add("customerEsignFlag");
    openapiFields.add("customerEsignFlagUpdateDate");
    openapiFields.add("occupation");
    openapiFields.add("cityOfBirth");
    openapiFields.add("countryOfBirth");
    openapiFields.add("countryOfBirthIso3");
    openapiFields.add("galacticId");
    openapiFields.add("galacticIdUpdatedDate");
    openapiFields.add("customerMasterKey");
    openapiFields.add("customerMasterKeyUpdatedDate");
    openapiFields.add("easSha1");
    openapiFields.add("freePassTxnCount");
    openapiFields.add("industry");
    openapiFields.add("platform");
    openapiFields.add("employeePositionLevel");
    openapiFields.add("employerSchoolName");
    openapiFields.add("providerId");
    openapiFields.add("clientId");
    openapiFields.add("employeeId");
    openapiFields.add("martialStatus");
    openapiFields.add("annualIncome");
    openapiFields.add("annualIncomeCurrency");
    openapiFields.add("annualIncomeBracket");
    openapiFields.add("referFriendFlag");
    openapiFields.add("customerCategory");
    openapiFields.add("customerCategoryUpdatedDate");
    openapiFields.add("employmentStatus");
    openapiFields.add("employmentSdqEffectiveDate");
    openapiFields.add("employeeFlag");
    openapiFields.add("countryOfResidence");
    openapiFields.add("countryOfResidenceIso3");
    openapiFields.add("pepSdq");
    openapiFields.add("pepCategory");
    openapiFields.add("isUsPerson");
    openapiFields.add("legalAge");
    openapiFields.add("sourceOfFunds");
    openapiFields.add("purposeOfAccount");
    openapiFields.add("expectedAccountVolumes");
    openapiFields.add("fundsInOutCountries");
    openapiFields.add("subscriptionType");
    openapiFields.add("profileVisibility");
    openapiFields.add("thirdPartyStatus");
    openapiFields.add("bankProfileId");
    openapiFields.add("referralCode");
    openapiFields.add("profileImageRefNumber");
    openapiFields.add("dateOfDeath");
    openapiFields.add("nonResidentAlien");
    openapiFields.add("embassy");
    openapiFields.add("customerType");
    openapiFields.add("expectedDepositsPerYear");
    openapiFields.add("occasionalRegularFlag");
    openapiFields.add("nameUpdateConsent");
    openapiFields.add("nameUpdateConsentDate");
    openapiFields.add("annualCheckStatus");
    openapiFields.add("annualCheckStatusUpdatedDate");
    openapiFields.add("eligibleForCryptoBuy");
    openapiFields.add("cryptoTaxAccountId");
    openapiFields.add("profileRefreshFlag");
    openapiFields.add("profileRefreshDate");
    openapiFields.add("profileRefreshDueDate");
    openapiFields.add("profileRefreshAttributes");
    openapiFields.add("preferredMfaMethod");
    openapiFields.add("referenceUmn");
    openapiFields.add("purposeOfServices");
    openapiFields.add("expReceiverCountries");
    openapiFields.add("expSenderCountries");
    openapiFields.add("txnFrequencyRange");
    openapiFields.add("primaryUmnFlag");
    openapiFields.add("primaryUmnFlagUpdatedDate");
    openapiFields.add("directoryAlias");
    openapiFields.add("reaccreditionFlag");
    openapiFields.add("reaccreditationDueDate");
    openapiFields.add("reaccreditationStatusDate");
    openapiFields.add("reaccreditationAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Customer
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Customer.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Customer is not found in the empty JSON string", Customer.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Customer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Customer` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        Name.validateJsonObject(jsonObj.getAsJsonObject("name"));
      }
      if ((jsonObj.get("motherName") != null && !jsonObj.get("motherName").isJsonNull()) && !jsonObj.get("motherName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `motherName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("motherName").toString()));
      }
      if ((jsonObj.get("genderType") != null && !jsonObj.get("genderType").isJsonNull()) && !jsonObj.get("genderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genderType").toString()));
      }
      if ((jsonObj.get("referenceForGenderOther") != null && !jsonObj.get("referenceForGenderOther").isJsonNull()) && !jsonObj.get("referenceForGenderOther").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceForGenderOther` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceForGenderOther").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if ((jsonObj.get("nationalityIso3") != null && !jsonObj.get("nationalityIso3").isJsonNull()) && !jsonObj.get("nationalityIso3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalityIso3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalityIso3").toString()));
      }
      if ((jsonObj.get("customerUmn") != null && !jsonObj.get("customerUmn").isJsonNull()) && !jsonObj.get("customerUmn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerUmn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerUmn").toString()));
      }
      if ((jsonObj.get("customerUmnHash") != null && !jsonObj.get("customerUmnHash").isJsonNull()) && !jsonObj.get("customerUmnHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerUmnHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerUmnHash").toString()));
      }
      if ((jsonObj.get("convenienceNo") != null && !jsonObj.get("convenienceNo").isJsonNull()) && !jsonObj.get("convenienceNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convenienceNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convenienceNo").toString()));
      }
      if ((jsonObj.get("trafficFlag") != null && !jsonObj.get("trafficFlag").isJsonNull()) && !jsonObj.get("trafficFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trafficFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trafficFlag").toString()));
      }
      if ((jsonObj.get("ratingCode") != null && !jsonObj.get("ratingCode").isJsonNull()) && !jsonObj.get("ratingCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratingCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratingCode").toString()));
      }
      if ((jsonObj.get("oprValidationFlag") != null && !jsonObj.get("oprValidationFlag").isJsonNull()) && !jsonObj.get("oprValidationFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oprValidationFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oprValidationFlag").toString()));
      }
      if ((jsonObj.get("validationDate") != null && !jsonObj.get("validationDate").isJsonNull()) && !jsonObj.get("validationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationDate").toString()));
      }
      if ((jsonObj.get("customerGaurantee") != null && !jsonObj.get("customerGaurantee").isJsonNull()) && !jsonObj.get("customerGaurantee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerGaurantee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerGaurantee").toString()));
      }
      if ((jsonObj.get("customerLevelCode") != null && !jsonObj.get("customerLevelCode").isJsonNull()) && !jsonObj.get("customerLevelCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerLevelCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerLevelCode").toString()));
      }
      if ((jsonObj.get("reasonForDeletion") != null && !jsonObj.get("reasonForDeletion").isJsonNull()) && !jsonObj.get("reasonForDeletion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonForDeletion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonForDeletion").toString()));
      }
      if ((jsonObj.get("customerEsignFlag") != null && !jsonObj.get("customerEsignFlag").isJsonNull()) && !jsonObj.get("customerEsignFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerEsignFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerEsignFlag").toString()));
      }
      if ((jsonObj.get("occupation") != null && !jsonObj.get("occupation").isJsonNull()) && !jsonObj.get("occupation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occupation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occupation").toString()));
      }
      if ((jsonObj.get("cityOfBirth") != null && !jsonObj.get("cityOfBirth").isJsonNull()) && !jsonObj.get("cityOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cityOfBirth").toString()));
      }
      if ((jsonObj.get("countryOfBirth") != null && !jsonObj.get("countryOfBirth").isJsonNull()) && !jsonObj.get("countryOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryOfBirth").toString()));
      }
      if ((jsonObj.get("countryOfBirthIso3") != null && !jsonObj.get("countryOfBirthIso3").isJsonNull()) && !jsonObj.get("countryOfBirthIso3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryOfBirthIso3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryOfBirthIso3").toString()));
      }
      if ((jsonObj.get("galacticId") != null && !jsonObj.get("galacticId").isJsonNull()) && !jsonObj.get("galacticId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `galacticId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("galacticId").toString()));
      }
      if ((jsonObj.get("customerMasterKey") != null && !jsonObj.get("customerMasterKey").isJsonNull()) && !jsonObj.get("customerMasterKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerMasterKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerMasterKey").toString()));
      }
      if ((jsonObj.get("easSha1") != null && !jsonObj.get("easSha1").isJsonNull()) && !jsonObj.get("easSha1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `easSha1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("easSha1").toString()));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("employeePositionLevel") != null && !jsonObj.get("employeePositionLevel").isJsonNull()) && !jsonObj.get("employeePositionLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeePositionLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeePositionLevel").toString()));
      }
      if ((jsonObj.get("employerSchoolName") != null && !jsonObj.get("employerSchoolName").isJsonNull()) && !jsonObj.get("employerSchoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employerSchoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employerSchoolName").toString()));
      }
      if ((jsonObj.get("providerId") != null && !jsonObj.get("providerId").isJsonNull()) && !jsonObj.get("providerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerId").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("martialStatus") != null && !jsonObj.get("martialStatus").isJsonNull()) && !jsonObj.get("martialStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `martialStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("martialStatus").toString()));
      }
      if ((jsonObj.get("annualIncomeCurrency") != null && !jsonObj.get("annualIncomeCurrency").isJsonNull()) && !jsonObj.get("annualIncomeCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annualIncomeCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annualIncomeCurrency").toString()));
      }
      if ((jsonObj.get("annualIncomeBracket") != null && !jsonObj.get("annualIncomeBracket").isJsonNull()) && !jsonObj.get("annualIncomeBracket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annualIncomeBracket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annualIncomeBracket").toString()));
      }
      if ((jsonObj.get("referFriendFlag") != null && !jsonObj.get("referFriendFlag").isJsonNull()) && !jsonObj.get("referFriendFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referFriendFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referFriendFlag").toString()));
      }
      if ((jsonObj.get("customerCategory") != null && !jsonObj.get("customerCategory").isJsonNull()) && !jsonObj.get("customerCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerCategory").toString()));
      }
      if ((jsonObj.get("employmentStatus") != null && !jsonObj.get("employmentStatus").isJsonNull()) && !jsonObj.get("employmentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employmentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employmentStatus").toString()));
      }
      if ((jsonObj.get("employeeFlag") != null && !jsonObj.get("employeeFlag").isJsonNull()) && !jsonObj.get("employeeFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeFlag").toString()));
      }
      if ((jsonObj.get("countryOfResidence") != null && !jsonObj.get("countryOfResidence").isJsonNull()) && !jsonObj.get("countryOfResidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryOfResidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryOfResidence").toString()));
      }
      if ((jsonObj.get("countryOfResidenceIso3") != null && !jsonObj.get("countryOfResidenceIso3").isJsonNull()) && !jsonObj.get("countryOfResidenceIso3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryOfResidenceIso3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryOfResidenceIso3").toString()));
      }
      if ((jsonObj.get("pepSdq") != null && !jsonObj.get("pepSdq").isJsonNull()) && !jsonObj.get("pepSdq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pepSdq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pepSdq").toString()));
      }
      if ((jsonObj.get("pepCategory") != null && !jsonObj.get("pepCategory").isJsonNull()) && !jsonObj.get("pepCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pepCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pepCategory").toString()));
      }
      if ((jsonObj.get("isUsPerson") != null && !jsonObj.get("isUsPerson").isJsonNull()) && !jsonObj.get("isUsPerson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isUsPerson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isUsPerson").toString()));
      }
      if ((jsonObj.get("legalAge") != null && !jsonObj.get("legalAge").isJsonNull()) && !jsonObj.get("legalAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalAge").toString()));
      }
      if ((jsonObj.get("sourceOfFunds") != null && !jsonObj.get("sourceOfFunds").isJsonNull()) && !jsonObj.get("sourceOfFunds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceOfFunds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceOfFunds").toString()));
      }
      if ((jsonObj.get("purposeOfAccount") != null && !jsonObj.get("purposeOfAccount").isJsonNull()) && !jsonObj.get("purposeOfAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purposeOfAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purposeOfAccount").toString()));
      }
      if ((jsonObj.get("expectedAccountVolumes") != null && !jsonObj.get("expectedAccountVolumes").isJsonNull()) && !jsonObj.get("expectedAccountVolumes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedAccountVolumes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedAccountVolumes").toString()));
      }
      if ((jsonObj.get("fundsInOutCountries") != null && !jsonObj.get("fundsInOutCountries").isJsonNull()) && !jsonObj.get("fundsInOutCountries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundsInOutCountries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundsInOutCountries").toString()));
      }
      if ((jsonObj.get("subscriptionType") != null && !jsonObj.get("subscriptionType").isJsonNull()) && !jsonObj.get("subscriptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionType").toString()));
      }
      if ((jsonObj.get("profileVisibility") != null && !jsonObj.get("profileVisibility").isJsonNull()) && !jsonObj.get("profileVisibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileVisibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileVisibility").toString()));
      }
      if ((jsonObj.get("thirdPartyStatus") != null && !jsonObj.get("thirdPartyStatus").isJsonNull()) && !jsonObj.get("thirdPartyStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thirdPartyStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thirdPartyStatus").toString()));
      }
      if ((jsonObj.get("bankProfileId") != null && !jsonObj.get("bankProfileId").isJsonNull()) && !jsonObj.get("bankProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankProfileId").toString()));
      }
      if ((jsonObj.get("referralCode") != null && !jsonObj.get("referralCode").isJsonNull()) && !jsonObj.get("referralCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referralCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referralCode").toString()));
      }
      if ((jsonObj.get("profileImageRefNumber") != null && !jsonObj.get("profileImageRefNumber").isJsonNull()) && !jsonObj.get("profileImageRefNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileImageRefNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileImageRefNumber").toString()));
      }
      if ((jsonObj.get("nonResidentAlien") != null && !jsonObj.get("nonResidentAlien").isJsonNull()) && !jsonObj.get("nonResidentAlien").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonResidentAlien` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonResidentAlien").toString()));
      }
      if ((jsonObj.get("embassy") != null && !jsonObj.get("embassy").isJsonNull()) && !jsonObj.get("embassy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embassy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embassy").toString()));
      }
      if ((jsonObj.get("customerType") != null && !jsonObj.get("customerType").isJsonNull()) && !jsonObj.get("customerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerType").toString()));
      }
      if ((jsonObj.get("expectedDepositsPerYear") != null && !jsonObj.get("expectedDepositsPerYear").isJsonNull()) && !jsonObj.get("expectedDepositsPerYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedDepositsPerYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedDepositsPerYear").toString()));
      }
      if ((jsonObj.get("occasionalRegularFlag") != null && !jsonObj.get("occasionalRegularFlag").isJsonNull()) && !jsonObj.get("occasionalRegularFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occasionalRegularFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occasionalRegularFlag").toString()));
      }
      if ((jsonObj.get("nameUpdateConsent") != null && !jsonObj.get("nameUpdateConsent").isJsonNull()) && !jsonObj.get("nameUpdateConsent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameUpdateConsent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameUpdateConsent").toString()));
      }
      if ((jsonObj.get("annualCheckStatus") != null && !jsonObj.get("annualCheckStatus").isJsonNull()) && !jsonObj.get("annualCheckStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annualCheckStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annualCheckStatus").toString()));
      }
      if ((jsonObj.get("eligibleForCryptoBuy") != null && !jsonObj.get("eligibleForCryptoBuy").isJsonNull()) && !jsonObj.get("eligibleForCryptoBuy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eligibleForCryptoBuy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eligibleForCryptoBuy").toString()));
      }
      if ((jsonObj.get("cryptoTaxAccountId") != null && !jsonObj.get("cryptoTaxAccountId").isJsonNull()) && !jsonObj.get("cryptoTaxAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cryptoTaxAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cryptoTaxAccountId").toString()));
      }
      if ((jsonObj.get("profileRefreshFlag") != null && !jsonObj.get("profileRefreshFlag").isJsonNull()) && !jsonObj.get("profileRefreshFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileRefreshFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileRefreshFlag").toString()));
      }
      if ((jsonObj.get("profileRefreshAttributes") != null && !jsonObj.get("profileRefreshAttributes").isJsonNull()) && !jsonObj.get("profileRefreshAttributes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileRefreshAttributes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileRefreshAttributes").toString()));
      }
      if ((jsonObj.get("preferredMfaMethod") != null && !jsonObj.get("preferredMfaMethod").isJsonNull()) && !jsonObj.get("preferredMfaMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredMfaMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredMfaMethod").toString()));
      }
      if ((jsonObj.get("referenceUmn") != null && !jsonObj.get("referenceUmn").isJsonNull()) && !jsonObj.get("referenceUmn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceUmn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceUmn").toString()));
      }
      if ((jsonObj.get("purposeOfServices") != null && !jsonObj.get("purposeOfServices").isJsonNull()) && !jsonObj.get("purposeOfServices").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purposeOfServices` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purposeOfServices").toString()));
      }
      if ((jsonObj.get("expReceiverCountries") != null && !jsonObj.get("expReceiverCountries").isJsonNull()) && !jsonObj.get("expReceiverCountries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expReceiverCountries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expReceiverCountries").toString()));
      }
      if ((jsonObj.get("expSenderCountries") != null && !jsonObj.get("expSenderCountries").isJsonNull()) && !jsonObj.get("expSenderCountries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expSenderCountries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expSenderCountries").toString()));
      }
      if ((jsonObj.get("txnFrequencyRange") != null && !jsonObj.get("txnFrequencyRange").isJsonNull()) && !jsonObj.get("txnFrequencyRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txnFrequencyRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txnFrequencyRange").toString()));
      }
      if ((jsonObj.get("primaryUmnFlag") != null && !jsonObj.get("primaryUmnFlag").isJsonNull()) && !jsonObj.get("primaryUmnFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryUmnFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryUmnFlag").toString()));
      }
      if ((jsonObj.get("directoryAlias") != null && !jsonObj.get("directoryAlias").isJsonNull()) && !jsonObj.get("directoryAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directoryAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directoryAlias").toString()));
      }
      if ((jsonObj.get("reaccreditionFlag") != null && !jsonObj.get("reaccreditionFlag").isJsonNull()) && !jsonObj.get("reaccreditionFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reaccreditionFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reaccreditionFlag").toString()));
      }
      if ((jsonObj.get("reaccreditationAttributes") != null && !jsonObj.get("reaccreditationAttributes").isJsonNull()) && !jsonObj.get("reaccreditationAttributes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reaccreditationAttributes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reaccreditationAttributes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Customer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Customer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Customer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Customer.class));

       return (TypeAdapter<T>) new TypeAdapter<Customer>() {
           @Override
           public void write(JsonWriter out, Customer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Customer read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Customer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Customer
  * @throws IOException if the JSON string is invalid with respect to Customer
  */
  public static Customer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Customer.class);
  }

 /**
  * Convert an instance of Customer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

