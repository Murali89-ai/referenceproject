/*
 * ucd_pmgmt_v1_api
 * Swagger documentation for UCD Profile Management Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.JSON;

/**
 * CustomerUsageStatistics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T21:22:09.739306500+05:30[Asia/Calcutta]")
public class CustomerUsageStatistics {
  public static final String SERIALIZED_NAME_CARD_CLASS = "cardClass";
  @SerializedName(SERIALIZED_NAME_CARD_CLASS)
  private String cardClass;

  public static final String SERIALIZED_NAME_ISSUE_STATUS_CODE = "issueStatusCode";
  @SerializedName(SERIALIZED_NAME_ISSUE_STATUS_CODE)
  private String issueStatusCode;

  public static final String SERIALIZED_NAME_CARD_ENROLLED_DATE = "cardEnrolledDate";
  @SerializedName(SERIALIZED_NAME_CARD_ENROLLED_DATE)
  private OffsetDateTime cardEnrolledDate;

  public static final String SERIALIZED_NAME_ENROLLMENT_TYPE = "enrollmentType";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_TYPE)
  private String enrollmentType;

  public static final String SERIALIZED_NAME_CARD_EXPIRY_DATE = "cardExpiryDate";
  @SerializedName(SERIALIZED_NAME_CARD_EXPIRY_DATE)
  private OffsetDateTime cardExpiryDate;

  public static final String SERIALIZED_NAME_ENROLLING_AGENT_NUMBER = "enrollingAgentNumber";
  @SerializedName(SERIALIZED_NAME_ENROLLING_AGENT_NUMBER)
  private String enrollingAgentNumber;

  public static final String SERIALIZED_NAME_ENROLLING_MTCN = "enrollingMtcn";
  @SerializedName(SERIALIZED_NAME_ENROLLING_MTCN)
  private String enrollingMtcn;

  public static final String SERIALIZED_NAME_LEVEL_CODE_UPDATED_DATE = "levelCodeUpdatedDate";
  @SerializedName(SERIALIZED_NAME_LEVEL_CODE_UPDATED_DATE)
  private OffsetDateTime levelCodeUpdatedDate;

  public static final String SERIALIZED_NAME_MARKETING_CODE = "marketingCode";
  @SerializedName(SERIALIZED_NAME_MARKETING_CODE)
  private String marketingCode;

  public static final String SERIALIZED_NAME_ID_PROVIDED = "idProvided";
  @SerializedName(SERIALIZED_NAME_ID_PROVIDED)
  private String idProvided;

  public static final String SERIALIZED_NAME_CARD_REGISTERED_BY = "cardRegisteredBy";
  @SerializedName(SERIALIZED_NAME_CARD_REGISTERED_BY)
  private String cardRegisteredBy;

  public static final String SERIALIZED_NAME_CARD_TYPE = "cardType";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE)
  private String cardType;

  public static final String SERIALIZED_NAME_DELETED_CODE = "deletedCode";
  @SerializedName(SERIALIZED_NAME_DELETED_CODE)
  private String deletedCode;

  public static final String SERIALIZED_NAME_CARD_STATUS = "cardStatus";
  @SerializedName(SERIALIZED_NAME_CARD_STATUS)
  private String cardStatus;

  public static final String SERIALIZED_NAME_LAST_REDEMPTION_DATE = "lastRedemptionDate";
  @SerializedName(SERIALIZED_NAME_LAST_REDEMPTION_DATE)
  private OffsetDateTime lastRedemptionDate;

  public static final String SERIALIZED_NAME_LAST_LOGIN_IP = "lastLoginIp";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN_IP)
  private String lastLoginIp;

  public static final String SERIALIZED_NAME_PHONE_PIN = "phonePin";
  @SerializedName(SERIALIZED_NAME_PHONE_PIN)
  private String phonePin;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_EXPORT_DATE_TIME = "exportDateTime";
  @SerializedName(SERIALIZED_NAME_EXPORT_DATE_TIME)
  private OffsetDateTime exportDateTime;

  public static final String SERIALIZED_NAME_EXPORT_STATUS = "exportStatus";
  @SerializedName(SERIALIZED_NAME_EXPORT_STATUS)
  private String exportStatus;

  public static final String SERIALIZED_NAME_SENDER_TRANSACTION_COUNT = "senderTransactionCount";
  @SerializedName(SERIALIZED_NAME_SENDER_TRANSACTION_COUNT)
  private Long senderTransactionCount;

  public static final String SERIALIZED_NAME_CARD_REPLACED_COUNT = "cardReplacedCount";
  @SerializedName(SERIALIZED_NAME_CARD_REPLACED_COUNT)
  private Long cardReplacedCount;

  public static final String SERIALIZED_NAME_BLOB = "blob";
  @SerializedName(SERIALIZED_NAME_BLOB)
  private String blob;

  public static final String SERIALIZED_NAME_EBLOB = "eblob";
  @SerializedName(SERIALIZED_NAME_EBLOB)
  private String eblob;

  public static final String SERIALIZED_NAME_CPC_COUNTRY_CODE = "cpcCountryCode";
  @SerializedName(SERIALIZED_NAME_CPC_COUNTRY_CODE)
  private String cpcCountryCode;

  public static final String SERIALIZED_NAME_SEGMENTATION_CODE = "segmentationCode";
  @SerializedName(SERIALIZED_NAME_SEGMENTATION_CODE)
  private String segmentationCode;

  public static final String SERIALIZED_NAME_PREPAID_FLAG = "prepaidFlag";
  @SerializedName(SERIALIZED_NAME_PREPAID_FLAG)
  private String prepaidFlag;

  public static final String SERIALIZED_NAME_ENROLLING_TERM = "enrollingTerm";
  @SerializedName(SERIALIZED_NAME_ENROLLING_TERM)
  private String enrollingTerm;

  public static final String SERIALIZED_NAME_ENROLLING_OPERATOR_ID = "enrollingOperatorId";
  @SerializedName(SERIALIZED_NAME_ENROLLING_OPERATOR_ID)
  private String enrollingOperatorId;

  /**
   * Client which verified the Customer. Accepts N for Digital Not Verified Customer but stores it as D in DB. Similarly returns N for Digital Not Verified Customer though in DB it is stored as D. * E - Email Verified * M - Mobile Verified * N - Not Verified * D - Digital Channel. 
   */
  @JsonAdapter(CustomerVerifiedByEnum.Adapter.class)
  public enum CustomerVerifiedByEnum {
    E("E"),
    
    M("M"),
    
    N("N"),
    
    D("D");

    private String value;

    CustomerVerifiedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerVerifiedByEnum fromValue(String value) {
      for (CustomerVerifiedByEnum b : CustomerVerifiedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomerVerifiedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerVerifiedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerVerifiedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomerVerifiedByEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMER_VERIFIED_BY = "customerVerifiedBy";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_VERIFIED_BY)
  private CustomerVerifiedByEnum customerVerifiedBy;

  public static final String SERIALIZED_NAME_CUSTOMER_VERIFICATION_DATE = "customerVerificationDate";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_VERIFICATION_DATE)
  private OffsetDateTime customerVerificationDate;

  /**
   * This field indicates whether Customer has been enrolled into MYWU Program or not. * Y / Space / Null - Enrolled to MyWU Program * N - Not Enrolled to MyWU Program 
   */
  @JsonAdapter(MyWuMemberFlagEnum.Adapter.class)
  public enum MyWuMemberFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    MyWuMemberFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MyWuMemberFlagEnum fromValue(String value) {
      for (MyWuMemberFlagEnum b : MyWuMemberFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MyWuMemberFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MyWuMemberFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MyWuMemberFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MyWuMemberFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MY_WU_MEMBER_FLAG = "myWuMemberFlag";
  @SerializedName(SERIALIZED_NAME_MY_WU_MEMBER_FLAG)
  private MyWuMemberFlagEnum myWuMemberFlag;

  public static final String SERIALIZED_NAME_MY_WU_MEMBER_UPDATE_DATE = "myWuMemberUpdateDate";
  @SerializedName(SERIALIZED_NAME_MY_WU_MEMBER_UPDATE_DATE)
  private OffsetDateTime myWuMemberUpdateDate;

  public static final String SERIALIZED_NAME_WU_GOLD_CARD = "wuGoldCard";
  @SerializedName(SERIALIZED_NAME_WU_GOLD_CARD)
  private String wuGoldCard;

  public static final String SERIALIZED_NAME_LOGIN_IP_ADDRESS = "loginIpAddress";
  @SerializedName(SERIALIZED_NAME_LOGIN_IP_ADDRESS)
  private String loginIpAddress;

  public static final String SERIALIZED_NAME_BUSINESS_FLOW_TYPE = "businessFlowType";
  @SerializedName(SERIALIZED_NAME_BUSINESS_FLOW_TYPE)
  private String businessFlowType;

  public static final String SERIALIZED_NAME_FLAG1 = "flag1";
  @SerializedName(SERIALIZED_NAME_FLAG1)
  private String flag1;

  public static final String SERIALIZED_NAME_FLAG2 = "flag2";
  @SerializedName(SERIALIZED_NAME_FLAG2)
  private String flag2;

  public static final String SERIALIZED_NAME_FLAG3 = "flag3";
  @SerializedName(SERIALIZED_NAME_FLAG3)
  private String flag3;

  public static final String SERIALIZED_NAME_PPS_FLAG = "ppsFlag";
  @SerializedName(SERIALIZED_NAME_PPS_FLAG)
  private String ppsFlag;

  /**
   * Customer&#39;s Consent to update the Account. * Y - Consent given by Customer * NULL or N - Consent not given by Customer&#39; 
   */
  @JsonAdapter(AcctUpdateConsentFlagEnum.Adapter.class)
  public enum AcctUpdateConsentFlagEnum {
    Y("Y"),
    
    N("N");

    private String value;

    AcctUpdateConsentFlagEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcctUpdateConsentFlagEnum fromValue(String value) {
      for (AcctUpdateConsentFlagEnum b : AcctUpdateConsentFlagEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcctUpdateConsentFlagEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcctUpdateConsentFlagEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcctUpdateConsentFlagEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcctUpdateConsentFlagEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCT_UPDATE_CONSENT_FLAG = "acctUpdateConsentFlag";
  @SerializedName(SERIALIZED_NAME_ACCT_UPDATE_CONSENT_FLAG)
  private AcctUpdateConsentFlagEnum acctUpdateConsentFlag;

  public static final String SERIALIZED_NAME_ACCT_UPDATE_CONSENT_DATE = "acctUpdateConsentDate";
  @SerializedName(SERIALIZED_NAME_ACCT_UPDATE_CONSENT_DATE)
  private OffsetDateTime acctUpdateConsentDate;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private String flags;

  public static final String SERIALIZED_NAME_NETWORK_AGENT_ID = "networkAgentId";
  @SerializedName(SERIALIZED_NAME_NETWORK_AGENT_ID)
  private String networkAgentId;

  public static final String SERIALIZED_NAME_VIP_STATUS = "vipStatus";
  @SerializedName(SERIALIZED_NAME_VIP_STATUS)
  private String vipStatus;

  public static final String SERIALIZED_NAME_VIP_STATUS_ENROLLMENT_DATE = "vipStatusEnrollmentDate";
  @SerializedName(SERIALIZED_NAME_VIP_STATUS_ENROLLMENT_DATE)
  private OffsetDateTime vipStatusEnrollmentDate;

  public static final String SERIALIZED_NAME_VIP_STATUS_EXPIRY_DATE = "vipStatusExpiryDate";
  @SerializedName(SERIALIZED_NAME_VIP_STATUS_EXPIRY_DATE)
  private OffsetDateTime vipStatusExpiryDate;

  public static final String SERIALIZED_NAME_VIP_STATUS_AUTO_RENEWAL = "vipStatusAutoRenewal";
  @SerializedName(SERIALIZED_NAME_VIP_STATUS_AUTO_RENEWAL)
  private String vipStatusAutoRenewal;

  public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";
  @SerializedName(SERIALIZED_NAME_NETWORK_ID)
  private String networkId;

  public static final String SERIALIZED_NAME_TRANS_TYPE = "transType";
  @SerializedName(SERIALIZED_NAME_TRANS_TYPE)
  private String transType;

  public static final String SERIALIZED_NAME_MO_CITY = "moCity";
  @SerializedName(SERIALIZED_NAME_MO_CITY)
  private String moCity;

  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_SOCIAL_LOGIN_PHOTO_URL = "socialLoginPhotoUrl";
  @SerializedName(SERIALIZED_NAME_SOCIAL_LOGIN_PHOTO_URL)
  private String socialLoginPhotoUrl;

  public static final String SERIALIZED_NAME_DEFAULT_FLAG = "defaultFlag";
  @SerializedName(SERIALIZED_NAME_DEFAULT_FLAG)
  private String defaultFlag;

  public static final String SERIALIZED_NAME_DEFAULT_FLAG_UPDATED_BY = "defaultFlagUpdatedBy";
  @SerializedName(SERIALIZED_NAME_DEFAULT_FLAG_UPDATED_BY)
  private String defaultFlagUpdatedBy;

  public static final String SERIALIZED_NAME_DEFAULT_FLAG_UPDATED_DATE = "defaultFlagUpdatedDate";
  @SerializedName(SERIALIZED_NAME_DEFAULT_FLAG_UPDATED_DATE)
  private OffsetDateTime defaultFlagUpdatedDate;

  public static final String SERIALIZED_NAME_SPECIAL_FLAG = "specialFlag";
  @SerializedName(SERIALIZED_NAME_SPECIAL_FLAG)
  private String specialFlag;

  public static final String SERIALIZED_NAME_SPECIAL_FLAG_UPDATED_BY = "specialFlagUpdatedBy";
  @SerializedName(SERIALIZED_NAME_SPECIAL_FLAG_UPDATED_BY)
  private String specialFlagUpdatedBy;

  public static final String SERIALIZED_NAME_SPECIAL_FLAG_UPDATED_DATE = "specialFlagUpdatedDate";
  @SerializedName(SERIALIZED_NAME_SPECIAL_FLAG_UPDATED_DATE)
  private OffsetDateTime specialFlagUpdatedDate;

  public static final String SERIALIZED_NAME_AML_FLAG = "amlFlag";
  @SerializedName(SERIALIZED_NAME_AML_FLAG)
  private String amlFlag;

  public static final String SERIALIZED_NAME_AML_FLAG_UPDATED_BY = "amlFlagUpdatedBy";
  @SerializedName(SERIALIZED_NAME_AML_FLAG_UPDATED_BY)
  private String amlFlagUpdatedBy;

  public static final String SERIALIZED_NAME_AML_FLAG_UPDATED_DATE = "amlFlagUpdatedDate";
  @SerializedName(SERIALIZED_NAME_AML_FLAG_UPDATED_DATE)
  private OffsetDateTime amlFlagUpdatedDate;

  public static final String SERIALIZED_NAME_TC_FLAG = "tcFlag";
  @SerializedName(SERIALIZED_NAME_TC_FLAG)
  private String tcFlag;

  public static final String SERIALIZED_NAME_TC_FLAG_UPDATED_DATE = "tcFlagUpdatedDate";
  @SerializedName(SERIALIZED_NAME_TC_FLAG_UPDATED_DATE)
  private OffsetDateTime tcFlagUpdatedDate;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public CustomerUsageStatistics() {
  }

  public CustomerUsageStatistics cardClass(String cardClass) {
    
    this.cardClass = cardClass;
    return this;
  }

   /**
   * Extension of Customer&#39;s Level Code.
   * @return cardClass
  **/
  @javax.annotation.Nullable
  public String getCardClass() {
    return cardClass;
  }


  public void setCardClass(String cardClass) {
    this.cardClass = cardClass;
  }


  public CustomerUsageStatistics issueStatusCode(String issueStatusCode) {
    
    this.issueStatusCode = issueStatusCode;
    return this;
  }

   /**
   * Issue Status Code.
   * @return issueStatusCode
  **/
  @javax.annotation.Nullable
  public String getIssueStatusCode() {
    return issueStatusCode;
  }


  public void setIssueStatusCode(String issueStatusCode) {
    this.issueStatusCode = issueStatusCode;
  }


  public CustomerUsageStatistics cardEnrolledDate(OffsetDateTime cardEnrolledDate) {
    
    this.cardEnrolledDate = cardEnrolledDate;
    return this;
  }

   /**
   * Customer&#39;s Card Enrollment Date.
   * @return cardEnrolledDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCardEnrolledDate() {
    return cardEnrolledDate;
  }


  public void setCardEnrolledDate(OffsetDateTime cardEnrolledDate) {
    this.cardEnrolledDate = cardEnrolledDate;
  }


  public CustomerUsageStatistics enrollmentType(String enrollmentType) {
    
    this.enrollmentType = enrollmentType;
    return this;
  }

   /**
   * Enrollment Type. * E - Explicit * C - Convenience * A - Auto 
   * @return enrollmentType
  **/
  @javax.annotation.Nullable
  public String getEnrollmentType() {
    return enrollmentType;
  }


  public void setEnrollmentType(String enrollmentType) {
    this.enrollmentType = enrollmentType;
  }


  public CustomerUsageStatistics cardExpiryDate(OffsetDateTime cardExpiryDate) {
    
    this.cardExpiryDate = cardExpiryDate;
    return this;
  }

   /**
   * Customer&#39;s Card Expiry Date.
   * @return cardExpiryDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCardExpiryDate() {
    return cardExpiryDate;
  }


  public void setCardExpiryDate(OffsetDateTime cardExpiryDate) {
    this.cardExpiryDate = cardExpiryDate;
  }


  public CustomerUsageStatistics enrollingAgentNumber(String enrollingAgentNumber) {
    
    this.enrollingAgentNumber = enrollingAgentNumber;
    return this;
  }

   /**
   * Enrolling Agent ID.
   * @return enrollingAgentNumber
  **/
  @javax.annotation.Nullable
  public String getEnrollingAgentNumber() {
    return enrollingAgentNumber;
  }


  public void setEnrollingAgentNumber(String enrollingAgentNumber) {
    this.enrollingAgentNumber = enrollingAgentNumber;
  }


  public CustomerUsageStatistics enrollingMtcn(String enrollingMtcn) {
    
    this.enrollingMtcn = enrollingMtcn;
    return this;
  }

   /**
   * MTCN of the Enrolling transaction.
   * @return enrollingMtcn
  **/
  @javax.annotation.Nullable
  public String getEnrollingMtcn() {
    return enrollingMtcn;
  }


  public void setEnrollingMtcn(String enrollingMtcn) {
    this.enrollingMtcn = enrollingMtcn;
  }


  public CustomerUsageStatistics levelCodeUpdatedDate(OffsetDateTime levelCodeUpdatedDate) {
    
    this.levelCodeUpdatedDate = levelCodeUpdatedDate;
    return this;
  }

   /**
   * Timestamp when Customer&#39;s Level Code is added/updated.
   * @return levelCodeUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLevelCodeUpdatedDate() {
    return levelCodeUpdatedDate;
  }


  public void setLevelCodeUpdatedDate(OffsetDateTime levelCodeUpdatedDate) {
    this.levelCodeUpdatedDate = levelCodeUpdatedDate;
  }


  public CustomerUsageStatistics marketingCode(String marketingCode) {
    
    this.marketingCode = marketingCode;
    return this;
  }

   /**
   * Marketing Flag used by Marketing Team.  * Provided on batch or by CSC update. * Used by prepaid gold card program to mark type of prepaid card. 
   * @return marketingCode
  **/
  @javax.annotation.Nullable
  public String getMarketingCode() {
    return marketingCode;
  }


  public void setMarketingCode(String marketingCode) {
    this.marketingCode = marketingCode;
  }


  public CustomerUsageStatistics idProvided(String idProvided) {
    
    this.idProvided = idProvided;
    return this;
  }

   /**
   * This is an Enrollment question - Y / N.
   * @return idProvided
  **/
  @javax.annotation.Nullable
  public String getIdProvided() {
    return idProvided;
  }


  public void setIdProvided(String idProvided) {
    this.idProvided = idProvided;
  }


  public CustomerUsageStatistics cardRegisteredBy(String cardRegisteredBy) {
    
    this.cardRegisteredBy = cardRegisteredBy;
    return this;
  }

   /**
   * This field indicates the adaptor which registers the Card.
   * @return cardRegisteredBy
  **/
  @javax.annotation.Nullable
  public String getCardRegisteredBy() {
    return cardRegisteredBy;
  }


  public void setCardRegisteredBy(String cardRegisteredBy) {
    this.cardRegisteredBy = cardRegisteredBy;
  }


  public CustomerUsageStatistics cardType(String cardType) {
    
    this.cardType = cardType;
    return this;
  }

   /**
   * Type of the Card. * International * Domestic * B * C * D * G * I * L * M * Q * S * W 
   * @return cardType
  **/
  @javax.annotation.Nullable
  public String getCardType() {
    return cardType;
  }


  public void setCardType(String cardType) {
    this.cardType = cardType;
  }


  public CustomerUsageStatistics deletedCode(String deletedCode) {
    
    this.deletedCode = deletedCode;
    return this;
  }

   /**
   * Deletion Code indicating the reason if a Customer has been logically deleted. * D – Direct Mail Correspondence Returned. * W – Do not wish to be a loyalty card member Or blank. * F -  * X - Reason that a Customer has been logically deleted. 
   * @return deletedCode
  **/
  @javax.annotation.Nullable
  public String getDeletedCode() {
    return deletedCode;
  }


  public void setDeletedCode(String deletedCode) {
    this.deletedCode = deletedCode;
  }


  public CustomerUsageStatistics cardStatus(String cardStatus) {
    
    this.cardStatus = cardStatus;
    return this;
  }

   /**
   * Status of the Card. * Active * Inactive * E - Expired 
   * @return cardStatus
  **/
  @javax.annotation.Nullable
  public String getCardStatus() {
    return cardStatus;
  }


  public void setCardStatus(String cardStatus) {
    this.cardStatus = cardStatus;
  }


  public CustomerUsageStatistics lastRedemptionDate(OffsetDateTime lastRedemptionDate) {
    
    this.lastRedemptionDate = lastRedemptionDate;
    return this;
  }

   /**
   * Timestamp when Customer redeemed the points.
   * @return lastRedemptionDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastRedemptionDate() {
    return lastRedemptionDate;
  }


  public void setLastRedemptionDate(OffsetDateTime lastRedemptionDate) {
    this.lastRedemptionDate = lastRedemptionDate;
  }


  public CustomerUsageStatistics lastLoginIp(String lastLoginIp) {
    
    this.lastLoginIp = lastLoginIp;
    return this;
  }

   /**
   * Recent IP from where the Customer accessed the Account.
   * @return lastLoginIp
  **/
  @javax.annotation.Nullable
  public String getLastLoginIp() {
    return lastLoginIp;
  }


  public void setLastLoginIp(String lastLoginIp) {
    this.lastLoginIp = lastLoginIp;
  }


  public CustomerUsageStatistics phonePin(String phonePin) {
    
    this.phonePin = phonePin;
    return this;
  }

   /**
   * PIN sent to a Customer&#39;s Mobile Phone.
   * @return phonePin
  **/
  @javax.annotation.Nullable
  public String getPhonePin() {
    return phonePin;
  }


  public void setPhonePin(String phonePin) {
    this.phonePin = phonePin;
  }


  public CustomerUsageStatistics operationId(String operationId) {
    
    this.operationId = operationId;
    return this;
  }

   /**
   * Last Operations on the Customer&#39;s account.
   * @return operationId
  **/
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }


  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public CustomerUsageStatistics exportDateTime(OffsetDateTime exportDateTime) {
    
    this.exportDateTime = exportDateTime;
    return this;
  }

   /**
   * Timstamp when the Card was exported.
   * @return exportDateTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExportDateTime() {
    return exportDateTime;
  }


  public void setExportDateTime(OffsetDateTime exportDateTime) {
    this.exportDateTime = exportDateTime;
  }


  public CustomerUsageStatistics exportStatus(String exportStatus) {
    
    this.exportStatus = exportStatus;
    return this;
  }

   /**
   * This field indicates whether the Customer&#39;s Account has been processed by card fulfillment. Shows if we have sent the customer their card.
   * @return exportStatus
  **/
  @javax.annotation.Nullable
  public String getExportStatus() {
    return exportStatus;
  }


  public void setExportStatus(String exportStatus) {
    this.exportStatus = exportStatus;
  }


  public CustomerUsageStatistics senderTransactionCount(Long senderTransactionCount) {
    
    this.senderTransactionCount = senderTransactionCount;
    return this;
  }

   /**
   * Number of transactions done by the Customer.
   * @return senderTransactionCount
  **/
  @javax.annotation.Nullable
  public Long getSenderTransactionCount() {
    return senderTransactionCount;
  }


  public void setSenderTransactionCount(Long senderTransactionCount) {
    this.senderTransactionCount = senderTransactionCount;
  }


  public CustomerUsageStatistics cardReplacedCount(Long cardReplacedCount) {
    
    this.cardReplacedCount = cardReplacedCount;
    return this;
  }

   /**
   * Number of times Custromer has requeted for Card replacement.
   * @return cardReplacedCount
  **/
  @javax.annotation.Nullable
  public Long getCardReplacedCount() {
    return cardReplacedCount;
  }


  public void setCardReplacedCount(Long cardReplacedCount) {
    this.cardReplacedCount = cardReplacedCount;
  }


  public CustomerUsageStatistics blob(String blob) {
    
    this.blob = blob;
    return this;
  }

   /**
   * BLOB is an universal-style buffer containing multiple data elements. e.g. REF_NUM_C, LAST_SEND_AMOUNT, DELIVERY_SERVICE_CODE, DESTINATION_CPC_CODE, SENDER_ACCOUNT_NUMBER etc.
   * @return blob
  **/
  @javax.annotation.Nullable
  public String getBlob() {
    return blob;
  }


  public void setBlob(String blob) {
    this.blob = blob;
  }


  public CustomerUsageStatistics eblob(String eblob) {
    
    this.eblob = eblob;
    return this;
  }

   /**
   * EBLOB is an universal-style buffer containing multiple data elements. e.g. TAX_ID, SNDR_ACCT_NUM_C, D2B_ACCT_NUM_C, ALTERNATE_SEARCH_ID etc.
   * @return eblob
  **/
  @javax.annotation.Nullable
  public String getEblob() {
    return eblob;
  }


  public void setEblob(String eblob) {
    this.eblob = eblob;
  }


  public CustomerUsageStatistics cpcCountryCode(String cpcCountryCode) {
    
    this.cpcCountryCode = cpcCountryCode;
    return this;
  }

   /**
   * Country Plus Currency Code in ISO3 format.
   * @return cpcCountryCode
  **/
  @javax.annotation.Nullable
  public String getCpcCountryCode() {
    return cpcCountryCode;
  }


  public void setCpcCountryCode(String cpcCountryCode) {
    this.cpcCountryCode = cpcCountryCode;
  }


  public CustomerUsageStatistics segmentationCode(String segmentationCode) {
    
    this.segmentationCode = segmentationCode;
    return this;
  }

   /**
   * Segmentation Code to classify Customer&#39;s. * CUS - Customer * EMP - Employee * DIR - Board of Director * FLA - Front Line Agent * AGT - Agent 
   * @return segmentationCode
  **/
  @javax.annotation.Nullable
  public String getSegmentationCode() {
    return segmentationCode;
  }


  public void setSegmentationCode(String segmentationCode) {
    this.segmentationCode = segmentationCode;
  }


  public CustomerUsageStatistics prepaidFlag(String prepaidFlag) {
    
    this.prepaidFlag = prepaidFlag;
    return this;
  }

   /**
   * This field indicates whether a Customer is/is not Prepaid. * Y - Prepaid * N - Not Prepaid 
   * @return prepaidFlag
  **/
  @javax.annotation.Nullable
  public String getPrepaidFlag() {
    return prepaidFlag;
  }


  public void setPrepaidFlag(String prepaidFlag) {
    this.prepaidFlag = prepaidFlag;
  }


  public CustomerUsageStatistics enrollingTerm(String enrollingTerm) {
    
    this.enrollingTerm = enrollingTerm;
    return this;
  }

   /**
   * Enrolling Terminal ID.
   * @return enrollingTerm
  **/
  @javax.annotation.Nullable
  public String getEnrollingTerm() {
    return enrollingTerm;
  }


  public void setEnrollingTerm(String enrollingTerm) {
    this.enrollingTerm = enrollingTerm;
  }


  public CustomerUsageStatistics enrollingOperatorId(String enrollingOperatorId) {
    
    this.enrollingOperatorId = enrollingOperatorId;
    return this;
  }

   /**
   * Enrolling Operator ID.
   * @return enrollingOperatorId
  **/
  @javax.annotation.Nullable
  public String getEnrollingOperatorId() {
    return enrollingOperatorId;
  }


  public void setEnrollingOperatorId(String enrollingOperatorId) {
    this.enrollingOperatorId = enrollingOperatorId;
  }


  public CustomerUsageStatistics customerVerifiedBy(CustomerVerifiedByEnum customerVerifiedBy) {
    
    this.customerVerifiedBy = customerVerifiedBy;
    return this;
  }

   /**
   * Client which verified the Customer. Accepts N for Digital Not Verified Customer but stores it as D in DB. Similarly returns N for Digital Not Verified Customer though in DB it is stored as D. * E - Email Verified * M - Mobile Verified * N - Not Verified * D - Digital Channel. 
   * @return customerVerifiedBy
  **/
  @javax.annotation.Nullable
  public CustomerVerifiedByEnum getCustomerVerifiedBy() {
    return customerVerifiedBy;
  }


  public void setCustomerVerifiedBy(CustomerVerifiedByEnum customerVerifiedBy) {
    this.customerVerifiedBy = customerVerifiedBy;
  }


  public CustomerUsageStatistics customerVerificationDate(OffsetDateTime customerVerificationDate) {
    
    this.customerVerificationDate = customerVerificationDate;
    return this;
  }

   /**
   * Timestamp when Customer Verification By is added/updated.
   * @return customerVerificationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCustomerVerificationDate() {
    return customerVerificationDate;
  }


  public void setCustomerVerificationDate(OffsetDateTime customerVerificationDate) {
    this.customerVerificationDate = customerVerificationDate;
  }


  public CustomerUsageStatistics myWuMemberFlag(MyWuMemberFlagEnum myWuMemberFlag) {
    
    this.myWuMemberFlag = myWuMemberFlag;
    return this;
  }

   /**
   * This field indicates whether Customer has been enrolled into MYWU Program or not. * Y / Space / Null - Enrolled to MyWU Program * N - Not Enrolled to MyWU Program 
   * @return myWuMemberFlag
  **/
  @javax.annotation.Nullable
  public MyWuMemberFlagEnum getMyWuMemberFlag() {
    return myWuMemberFlag;
  }


  public void setMyWuMemberFlag(MyWuMemberFlagEnum myWuMemberFlag) {
    this.myWuMemberFlag = myWuMemberFlag;
  }


  public CustomerUsageStatistics myWuMemberUpdateDate(OffsetDateTime myWuMemberUpdateDate) {
    
    this.myWuMemberUpdateDate = myWuMemberUpdateDate;
    return this;
  }

   /**
   * Timestamp when MyWU Member Flag is added/updated.
   * @return myWuMemberUpdateDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getMyWuMemberUpdateDate() {
    return myWuMemberUpdateDate;
  }


  public void setMyWuMemberUpdateDate(OffsetDateTime myWuMemberUpdateDate) {
    this.myWuMemberUpdateDate = myWuMemberUpdateDate;
  }


  public CustomerUsageStatistics wuGoldCard(String wuGoldCard) {
    
    this.wuGoldCard = wuGoldCard;
    return this;
  }

   /**
   * Gold Card Number of the WUCOM Customer. 5, 9-characters WUGoldCard&#39;s with comma separated could be passed. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return wuGoldCard
  **/
  @javax.annotation.Nullable
  public String getWuGoldCard() {
    return wuGoldCard;
  }


  public void setWuGoldCard(String wuGoldCard) {
    this.wuGoldCard = wuGoldCard;
  }


  public CustomerUsageStatistics loginIpAddress(String loginIpAddress) {
    
    this.loginIpAddress = loginIpAddress;
    return this;
  }

   /**
   * Last Login IP address of the WU.COM customers.
   * @return loginIpAddress
  **/
  @javax.annotation.Nullable
  public String getLoginIpAddress() {
    return loginIpAddress;
  }


  public void setLoginIpAddress(String loginIpAddress) {
    this.loginIpAddress = loginIpAddress;
  }


  public CustomerUsageStatistics businessFlowType(String businessFlowType) {
    
    this.businessFlowType = businessFlowType;
    return this;
  }

   /**
   * Business Flow Type.
   * @return businessFlowType
  **/
  @javax.annotation.Nullable
  public String getBusinessFlowType() {
    return businessFlowType;
  }


  public void setBusinessFlowType(String businessFlowType) {
    this.businessFlowType = businessFlowType;
  }


  public CustomerUsageStatistics flag1(String flag1) {
    
    this.flag1 = flag1;
    return this;
  }

   /**
   * Flag 1.
   * @return flag1
  **/
  @javax.annotation.Nullable
  public String getFlag1() {
    return flag1;
  }


  public void setFlag1(String flag1) {
    this.flag1 = flag1;
  }


  public CustomerUsageStatistics flag2(String flag2) {
    
    this.flag2 = flag2;
    return this;
  }

   /**
   * Flag 2.
   * @return flag2
  **/
  @javax.annotation.Nullable
  public String getFlag2() {
    return flag2;
  }


  public void setFlag2(String flag2) {
    this.flag2 = flag2;
  }


  public CustomerUsageStatistics flag3(String flag3) {
    
    this.flag3 = flag3;
    return this;
  }

   /**
   * Flag 3.
   * @return flag3
  **/
  @javax.annotation.Nullable
  public String getFlag3() {
    return flag3;
  }


  public void setFlag3(String flag3) {
    this.flag3 = flag3;
  }


  public CustomerUsageStatistics ppsFlag(String ppsFlag) {
    
    this.ppsFlag = ppsFlag;
    return this;
  }

   /**
   * PPS (Post Payroll Services) Flag for Cruise Customer&#39;s.
   * @return ppsFlag
  **/
  @javax.annotation.Nullable
  public String getPpsFlag() {
    return ppsFlag;
  }


  public void setPpsFlag(String ppsFlag) {
    this.ppsFlag = ppsFlag;
  }


  public CustomerUsageStatistics acctUpdateConsentFlag(AcctUpdateConsentFlagEnum acctUpdateConsentFlag) {
    
    this.acctUpdateConsentFlag = acctUpdateConsentFlag;
    return this;
  }

   /**
   * Customer&#39;s Consent to update the Account. * Y - Consent given by Customer * NULL or N - Consent not given by Customer&#39; 
   * @return acctUpdateConsentFlag
  **/
  @javax.annotation.Nullable
  public AcctUpdateConsentFlagEnum getAcctUpdateConsentFlag() {
    return acctUpdateConsentFlag;
  }


  public void setAcctUpdateConsentFlag(AcctUpdateConsentFlagEnum acctUpdateConsentFlag) {
    this.acctUpdateConsentFlag = acctUpdateConsentFlag;
  }


  public CustomerUsageStatistics acctUpdateConsentDate(OffsetDateTime acctUpdateConsentDate) {
    
    this.acctUpdateConsentDate = acctUpdateConsentDate;
    return this;
  }

   /**
   * Timestamp when Account Update Consent Flag is added/updated.
   * @return acctUpdateConsentDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAcctUpdateConsentDate() {
    return acctUpdateConsentDate;
  }


  public void setAcctUpdateConsentDate(OffsetDateTime acctUpdateConsentDate) {
    this.acctUpdateConsentDate = acctUpdateConsentDate;
  }


  public CustomerUsageStatistics flags(String flags) {
    
    this.flags = flags;
    return this;
  }

   /**
   * This field contains 8, 1-byte flags. Support Preferences for Convenience.
   * @return flags
  **/
  @javax.annotation.Nullable
  public String getFlags() {
    return flags;
  }


  public void setFlags(String flags) {
    this.flags = flags;
  }


  public CustomerUsageStatistics networkAgentId(String networkAgentId) {
    
    this.networkAgentId = networkAgentId;
    return this;
  }

   /**
   * Network Agent ID.
   * @return networkAgentId
  **/
  @javax.annotation.Nullable
  public String getNetworkAgentId() {
    return networkAgentId;
  }


  public void setNetworkAgentId(String networkAgentId) {
    this.networkAgentId = networkAgentId;
  }


  public CustomerUsageStatistics vipStatus(String vipStatus) {
    
    this.vipStatus = vipStatus;
    return this;
  }

   /**
   * This field indicates whether Customer has VIP Status or not.
   * @return vipStatus
  **/
  @javax.annotation.Nullable
  public String getVipStatus() {
    return vipStatus;
  }


  public void setVipStatus(String vipStatus) {
    this.vipStatus = vipStatus;
  }


  public CustomerUsageStatistics vipStatusEnrollmentDate(OffsetDateTime vipStatusEnrollmentDate) {
    
    this.vipStatusEnrollmentDate = vipStatusEnrollmentDate;
    return this;
  }

   /**
   * Timestamp when Customer is enrolled to VIP Status.
   * @return vipStatusEnrollmentDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getVipStatusEnrollmentDate() {
    return vipStatusEnrollmentDate;
  }


  public void setVipStatusEnrollmentDate(OffsetDateTime vipStatusEnrollmentDate) {
    this.vipStatusEnrollmentDate = vipStatusEnrollmentDate;
  }


  public CustomerUsageStatistics vipStatusExpiryDate(OffsetDateTime vipStatusExpiryDate) {
    
    this.vipStatusExpiryDate = vipStatusExpiryDate;
    return this;
  }

   /**
   * Timestamp when Customer&#39;s VIP Status would expire.
   * @return vipStatusExpiryDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getVipStatusExpiryDate() {
    return vipStatusExpiryDate;
  }


  public void setVipStatusExpiryDate(OffsetDateTime vipStatusExpiryDate) {
    this.vipStatusExpiryDate = vipStatusExpiryDate;
  }


  public CustomerUsageStatistics vipStatusAutoRenewal(String vipStatusAutoRenewal) {
    
    this.vipStatusAutoRenewal = vipStatusAutoRenewal;
    return this;
  }

   /**
   * This field indicates whether Customer&#39;s VIP Status should be Auto Renewal or not.
   * @return vipStatusAutoRenewal
  **/
  @javax.annotation.Nullable
  public String getVipStatusAutoRenewal() {
    return vipStatusAutoRenewal;
  }


  public void setVipStatusAutoRenewal(String vipStatusAutoRenewal) {
    this.vipStatusAutoRenewal = vipStatusAutoRenewal;
  }


  public CustomerUsageStatistics networkId(String networkId) {
    
    this.networkId = networkId;
    return this;
  }

   /**
   * Network Id.
   * @return networkId
  **/
  @javax.annotation.Nullable
  public String getNetworkId() {
    return networkId;
  }


  public void setNetworkId(String networkId) {
    this.networkId = networkId;
  }


  public CustomerUsageStatistics transType(String transType) {
    
    this.transType = transType;
    return this;
  }

   /**
   * Transaction Type.
   * @return transType
  **/
  @javax.annotation.Nullable
  public String getTransType() {
    return transType;
  }


  public void setTransType(String transType) {
    this.transType = transType;
  }


  public CustomerUsageStatistics moCity(String moCity) {
    
    this.moCity = moCity;
    return this;
  }

   /**
   * Quick Collect Codes.
   * @return moCity
  **/
  @javax.annotation.Nullable
  public String getMoCity() {
    return moCity;
  }


  public void setMoCity(String moCity) {
    this.moCity = moCity;
  }


  public CustomerUsageStatistics ruleId(String ruleId) {
    
    this.ruleId = ruleId;
    return this;
  }

   /**
   * Rule Id.
   * @return ruleId
  **/
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }


  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public CustomerUsageStatistics socialLoginPhotoUrl(String socialLoginPhotoUrl) {
    
    this.socialLoginPhotoUrl = socialLoginPhotoUrl;
    return this;
  }

   /**
   * Customer&#39;s Social Login Photo Url.
   * @return socialLoginPhotoUrl
  **/
  @javax.annotation.Nullable
  public String getSocialLoginPhotoUrl() {
    return socialLoginPhotoUrl;
  }


  public void setSocialLoginPhotoUrl(String socialLoginPhotoUrl) {
    this.socialLoginPhotoUrl = socialLoginPhotoUrl;
  }


  public CustomerUsageStatistics defaultFlag(String defaultFlag) {
    
    this.defaultFlag = defaultFlag;
    return this;
  }

   /**
   * Default Flag.
   * @return defaultFlag
  **/
  @javax.annotation.Nullable
  public String getDefaultFlag() {
    return defaultFlag;
  }


  public void setDefaultFlag(String defaultFlag) {
    this.defaultFlag = defaultFlag;
  }


  public CustomerUsageStatistics defaultFlagUpdatedBy(String defaultFlagUpdatedBy) {
    
    this.defaultFlagUpdatedBy = defaultFlagUpdatedBy;
    return this;
  }

   /**
   * Application/System/End User which added/updated the Default Flag.
   * @return defaultFlagUpdatedBy
  **/
  @javax.annotation.Nullable
  public String getDefaultFlagUpdatedBy() {
    return defaultFlagUpdatedBy;
  }


  public void setDefaultFlagUpdatedBy(String defaultFlagUpdatedBy) {
    this.defaultFlagUpdatedBy = defaultFlagUpdatedBy;
  }


  public CustomerUsageStatistics defaultFlagUpdatedDate(OffsetDateTime defaultFlagUpdatedDate) {
    
    this.defaultFlagUpdatedDate = defaultFlagUpdatedDate;
    return this;
  }

   /**
   * Timestamp when Default Flag is added/updated.
   * @return defaultFlagUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDefaultFlagUpdatedDate() {
    return defaultFlagUpdatedDate;
  }


  public void setDefaultFlagUpdatedDate(OffsetDateTime defaultFlagUpdatedDate) {
    this.defaultFlagUpdatedDate = defaultFlagUpdatedDate;
  }


  public CustomerUsageStatistics specialFlag(String specialFlag) {
    
    this.specialFlag = specialFlag;
    return this;
  }

   /**
   * Special Flag.
   * @return specialFlag
  **/
  @javax.annotation.Nullable
  public String getSpecialFlag() {
    return specialFlag;
  }


  public void setSpecialFlag(String specialFlag) {
    this.specialFlag = specialFlag;
  }


  public CustomerUsageStatistics specialFlagUpdatedBy(String specialFlagUpdatedBy) {
    
    this.specialFlagUpdatedBy = specialFlagUpdatedBy;
    return this;
  }

   /**
   * Application/System/End User which added/updated the Special Flag.
   * @return specialFlagUpdatedBy
  **/
  @javax.annotation.Nullable
  public String getSpecialFlagUpdatedBy() {
    return specialFlagUpdatedBy;
  }


  public void setSpecialFlagUpdatedBy(String specialFlagUpdatedBy) {
    this.specialFlagUpdatedBy = specialFlagUpdatedBy;
  }


  public CustomerUsageStatistics specialFlagUpdatedDate(OffsetDateTime specialFlagUpdatedDate) {
    
    this.specialFlagUpdatedDate = specialFlagUpdatedDate;
    return this;
  }

   /**
   * Timestamp when Special Flag is added/updated.
   * @return specialFlagUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSpecialFlagUpdatedDate() {
    return specialFlagUpdatedDate;
  }


  public void setSpecialFlagUpdatedDate(OffsetDateTime specialFlagUpdatedDate) {
    this.specialFlagUpdatedDate = specialFlagUpdatedDate;
  }


  public CustomerUsageStatistics amlFlag(String amlFlag) {
    
    this.amlFlag = amlFlag;
    return this;
  }

   /**
   * AML (Anti Money Laundering) Flag.
   * @return amlFlag
  **/
  @javax.annotation.Nullable
  public String getAmlFlag() {
    return amlFlag;
  }


  public void setAmlFlag(String amlFlag) {
    this.amlFlag = amlFlag;
  }


  public CustomerUsageStatistics amlFlagUpdatedBy(String amlFlagUpdatedBy) {
    
    this.amlFlagUpdatedBy = amlFlagUpdatedBy;
    return this;
  }

   /**
   * Application/System/End User which added/updated the AML Flag.
   * @return amlFlagUpdatedBy
  **/
  @javax.annotation.Nullable
  public String getAmlFlagUpdatedBy() {
    return amlFlagUpdatedBy;
  }


  public void setAmlFlagUpdatedBy(String amlFlagUpdatedBy) {
    this.amlFlagUpdatedBy = amlFlagUpdatedBy;
  }


  public CustomerUsageStatistics amlFlagUpdatedDate(OffsetDateTime amlFlagUpdatedDate) {
    
    this.amlFlagUpdatedDate = amlFlagUpdatedDate;
    return this;
  }

   /**
   * Timestamp when AML Flag is added/updated.
   * @return amlFlagUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAmlFlagUpdatedDate() {
    return amlFlagUpdatedDate;
  }


  public void setAmlFlagUpdatedDate(OffsetDateTime amlFlagUpdatedDate) {
    this.amlFlagUpdatedDate = amlFlagUpdatedDate;
  }


  public CustomerUsageStatistics tcFlag(String tcFlag) {
    
    this.tcFlag = tcFlag;
    return this;
  }

   /**
   * Terms of Use of Western Union / Te Enviei and Privacy Statement of Western Union Global * Y - Yes. Accepted T&amp;C. * N - No. Not Accepted T&amp;C. * Not Present / Blank. Not Accepted T&amp;C. 
   * @return tcFlag
  **/
  @javax.annotation.Nullable
  public String getTcFlag() {
    return tcFlag;
  }


  public void setTcFlag(String tcFlag) {
    this.tcFlag = tcFlag;
  }


  public CustomerUsageStatistics tcFlagUpdatedDate(OffsetDateTime tcFlagUpdatedDate) {
    
    this.tcFlagUpdatedDate = tcFlagUpdatedDate;
    return this;
  }

   /**
   * Date Time of Updation of Terms of Use of Western Union and Privacy Statement of Western Union Global.
   * @return tcFlagUpdatedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTcFlagUpdatedDate() {
    return tcFlagUpdatedDate;
  }


  public void setTcFlagUpdatedDate(OffsetDateTime tcFlagUpdatedDate) {
    this.tcFlagUpdatedDate = tcFlagUpdatedDate;
  }


  public CustomerUsageStatistics latitude(Double latitude) {
    
    this.latitude = latitude;
    return this;
  }

   /**
   * Latitude of the Customer at the time of Onboarding.
   * @return latitude
  **/
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }


  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public CustomerUsageStatistics longitude(Double longitude) {
    
    this.longitude = longitude;
    return this;
  }

   /**
   * Longitude of the Customer at the time of Onboarding.
   * @return longitude
  **/
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }


  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerUsageStatistics customerUsageStatistics = (CustomerUsageStatistics) o;
    return Objects.equals(this.cardClass, customerUsageStatistics.cardClass) &&
        Objects.equals(this.issueStatusCode, customerUsageStatistics.issueStatusCode) &&
        Objects.equals(this.cardEnrolledDate, customerUsageStatistics.cardEnrolledDate) &&
        Objects.equals(this.enrollmentType, customerUsageStatistics.enrollmentType) &&
        Objects.equals(this.cardExpiryDate, customerUsageStatistics.cardExpiryDate) &&
        Objects.equals(this.enrollingAgentNumber, customerUsageStatistics.enrollingAgentNumber) &&
        Objects.equals(this.enrollingMtcn, customerUsageStatistics.enrollingMtcn) &&
        Objects.equals(this.levelCodeUpdatedDate, customerUsageStatistics.levelCodeUpdatedDate) &&
        Objects.equals(this.marketingCode, customerUsageStatistics.marketingCode) &&
        Objects.equals(this.idProvided, customerUsageStatistics.idProvided) &&
        Objects.equals(this.cardRegisteredBy, customerUsageStatistics.cardRegisteredBy) &&
        Objects.equals(this.cardType, customerUsageStatistics.cardType) &&
        Objects.equals(this.deletedCode, customerUsageStatistics.deletedCode) &&
        Objects.equals(this.cardStatus, customerUsageStatistics.cardStatus) &&
        Objects.equals(this.lastRedemptionDate, customerUsageStatistics.lastRedemptionDate) &&
        Objects.equals(this.lastLoginIp, customerUsageStatistics.lastLoginIp) &&
        Objects.equals(this.phonePin, customerUsageStatistics.phonePin) &&
        Objects.equals(this.operationId, customerUsageStatistics.operationId) &&
        Objects.equals(this.exportDateTime, customerUsageStatistics.exportDateTime) &&
        Objects.equals(this.exportStatus, customerUsageStatistics.exportStatus) &&
        Objects.equals(this.senderTransactionCount, customerUsageStatistics.senderTransactionCount) &&
        Objects.equals(this.cardReplacedCount, customerUsageStatistics.cardReplacedCount) &&
        Objects.equals(this.blob, customerUsageStatistics.blob) &&
        Objects.equals(this.eblob, customerUsageStatistics.eblob) &&
        Objects.equals(this.cpcCountryCode, customerUsageStatistics.cpcCountryCode) &&
        Objects.equals(this.segmentationCode, customerUsageStatistics.segmentationCode) &&
        Objects.equals(this.prepaidFlag, customerUsageStatistics.prepaidFlag) &&
        Objects.equals(this.enrollingTerm, customerUsageStatistics.enrollingTerm) &&
        Objects.equals(this.enrollingOperatorId, customerUsageStatistics.enrollingOperatorId) &&
        Objects.equals(this.customerVerifiedBy, customerUsageStatistics.customerVerifiedBy) &&
        Objects.equals(this.customerVerificationDate, customerUsageStatistics.customerVerificationDate) &&
        Objects.equals(this.myWuMemberFlag, customerUsageStatistics.myWuMemberFlag) &&
        Objects.equals(this.myWuMemberUpdateDate, customerUsageStatistics.myWuMemberUpdateDate) &&
        Objects.equals(this.wuGoldCard, customerUsageStatistics.wuGoldCard) &&
        Objects.equals(this.loginIpAddress, customerUsageStatistics.loginIpAddress) &&
        Objects.equals(this.businessFlowType, customerUsageStatistics.businessFlowType) &&
        Objects.equals(this.flag1, customerUsageStatistics.flag1) &&
        Objects.equals(this.flag2, customerUsageStatistics.flag2) &&
        Objects.equals(this.flag3, customerUsageStatistics.flag3) &&
        Objects.equals(this.ppsFlag, customerUsageStatistics.ppsFlag) &&
        Objects.equals(this.acctUpdateConsentFlag, customerUsageStatistics.acctUpdateConsentFlag) &&
        Objects.equals(this.acctUpdateConsentDate, customerUsageStatistics.acctUpdateConsentDate) &&
        Objects.equals(this.flags, customerUsageStatistics.flags) &&
        Objects.equals(this.networkAgentId, customerUsageStatistics.networkAgentId) &&
        Objects.equals(this.vipStatus, customerUsageStatistics.vipStatus) &&
        Objects.equals(this.vipStatusEnrollmentDate, customerUsageStatistics.vipStatusEnrollmentDate) &&
        Objects.equals(this.vipStatusExpiryDate, customerUsageStatistics.vipStatusExpiryDate) &&
        Objects.equals(this.vipStatusAutoRenewal, customerUsageStatistics.vipStatusAutoRenewal) &&
        Objects.equals(this.networkId, customerUsageStatistics.networkId) &&
        Objects.equals(this.transType, customerUsageStatistics.transType) &&
        Objects.equals(this.moCity, customerUsageStatistics.moCity) &&
        Objects.equals(this.ruleId, customerUsageStatistics.ruleId) &&
        Objects.equals(this.socialLoginPhotoUrl, customerUsageStatistics.socialLoginPhotoUrl) &&
        Objects.equals(this.defaultFlag, customerUsageStatistics.defaultFlag) &&
        Objects.equals(this.defaultFlagUpdatedBy, customerUsageStatistics.defaultFlagUpdatedBy) &&
        Objects.equals(this.defaultFlagUpdatedDate, customerUsageStatistics.defaultFlagUpdatedDate) &&
        Objects.equals(this.specialFlag, customerUsageStatistics.specialFlag) &&
        Objects.equals(this.specialFlagUpdatedBy, customerUsageStatistics.specialFlagUpdatedBy) &&
        Objects.equals(this.specialFlagUpdatedDate, customerUsageStatistics.specialFlagUpdatedDate) &&
        Objects.equals(this.amlFlag, customerUsageStatistics.amlFlag) &&
        Objects.equals(this.amlFlagUpdatedBy, customerUsageStatistics.amlFlagUpdatedBy) &&
        Objects.equals(this.amlFlagUpdatedDate, customerUsageStatistics.amlFlagUpdatedDate) &&
        Objects.equals(this.tcFlag, customerUsageStatistics.tcFlag) &&
        Objects.equals(this.tcFlagUpdatedDate, customerUsageStatistics.tcFlagUpdatedDate) &&
        Objects.equals(this.latitude, customerUsageStatistics.latitude) &&
        Objects.equals(this.longitude, customerUsageStatistics.longitude);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardClass, issueStatusCode, cardEnrolledDate, enrollmentType, cardExpiryDate, enrollingAgentNumber, enrollingMtcn, levelCodeUpdatedDate, marketingCode, idProvided, cardRegisteredBy, cardType, deletedCode, cardStatus, lastRedemptionDate, lastLoginIp, phonePin, operationId, exportDateTime, exportStatus, senderTransactionCount, cardReplacedCount, blob, eblob, cpcCountryCode, segmentationCode, prepaidFlag, enrollingTerm, enrollingOperatorId, customerVerifiedBy, customerVerificationDate, myWuMemberFlag, myWuMemberUpdateDate, wuGoldCard, loginIpAddress, businessFlowType, flag1, flag2, flag3, ppsFlag, acctUpdateConsentFlag, acctUpdateConsentDate, flags, networkAgentId, vipStatus, vipStatusEnrollmentDate, vipStatusExpiryDate, vipStatusAutoRenewal, networkId, transType, moCity, ruleId, socialLoginPhotoUrl, defaultFlag, defaultFlagUpdatedBy, defaultFlagUpdatedDate, specialFlag, specialFlagUpdatedBy, specialFlagUpdatedDate, amlFlag, amlFlagUpdatedBy, amlFlagUpdatedDate, tcFlag, tcFlagUpdatedDate, latitude, longitude);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerUsageStatistics {\n");
    sb.append("    cardClass: ").append(toIndentedString(cardClass)).append("\n");
    sb.append("    issueStatusCode: ").append(toIndentedString(issueStatusCode)).append("\n");
    sb.append("    cardEnrolledDate: ").append(toIndentedString(cardEnrolledDate)).append("\n");
    sb.append("    enrollmentType: ").append(toIndentedString(enrollmentType)).append("\n");
    sb.append("    cardExpiryDate: ").append(toIndentedString(cardExpiryDate)).append("\n");
    sb.append("    enrollingAgentNumber: ").append(toIndentedString(enrollingAgentNumber)).append("\n");
    sb.append("    enrollingMtcn: ").append(toIndentedString(enrollingMtcn)).append("\n");
    sb.append("    levelCodeUpdatedDate: ").append(toIndentedString(levelCodeUpdatedDate)).append("\n");
    sb.append("    marketingCode: ").append(toIndentedString(marketingCode)).append("\n");
    sb.append("    idProvided: ").append(toIndentedString(idProvided)).append("\n");
    sb.append("    cardRegisteredBy: ").append(toIndentedString(cardRegisteredBy)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    deletedCode: ").append(toIndentedString(deletedCode)).append("\n");
    sb.append("    cardStatus: ").append(toIndentedString(cardStatus)).append("\n");
    sb.append("    lastRedemptionDate: ").append(toIndentedString(lastRedemptionDate)).append("\n");
    sb.append("    lastLoginIp: ").append(toIndentedString(lastLoginIp)).append("\n");
    sb.append("    phonePin: ").append(toIndentedString(phonePin)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    exportDateTime: ").append(toIndentedString(exportDateTime)).append("\n");
    sb.append("    exportStatus: ").append(toIndentedString(exportStatus)).append("\n");
    sb.append("    senderTransactionCount: ").append(toIndentedString(senderTransactionCount)).append("\n");
    sb.append("    cardReplacedCount: ").append(toIndentedString(cardReplacedCount)).append("\n");
    sb.append("    blob: ").append(toIndentedString(blob)).append("\n");
    sb.append("    eblob: ").append(toIndentedString(eblob)).append("\n");
    sb.append("    cpcCountryCode: ").append(toIndentedString(cpcCountryCode)).append("\n");
    sb.append("    segmentationCode: ").append(toIndentedString(segmentationCode)).append("\n");
    sb.append("    prepaidFlag: ").append(toIndentedString(prepaidFlag)).append("\n");
    sb.append("    enrollingTerm: ").append(toIndentedString(enrollingTerm)).append("\n");
    sb.append("    enrollingOperatorId: ").append(toIndentedString(enrollingOperatorId)).append("\n");
    sb.append("    customerVerifiedBy: ").append(toIndentedString(customerVerifiedBy)).append("\n");
    sb.append("    customerVerificationDate: ").append(toIndentedString(customerVerificationDate)).append("\n");
    sb.append("    myWuMemberFlag: ").append(toIndentedString(myWuMemberFlag)).append("\n");
    sb.append("    myWuMemberUpdateDate: ").append(toIndentedString(myWuMemberUpdateDate)).append("\n");
    sb.append("    wuGoldCard: ").append(toIndentedString(wuGoldCard)).append("\n");
    sb.append("    loginIpAddress: ").append(toIndentedString(loginIpAddress)).append("\n");
    sb.append("    businessFlowType: ").append(toIndentedString(businessFlowType)).append("\n");
    sb.append("    flag1: ").append(toIndentedString(flag1)).append("\n");
    sb.append("    flag2: ").append(toIndentedString(flag2)).append("\n");
    sb.append("    flag3: ").append(toIndentedString(flag3)).append("\n");
    sb.append("    ppsFlag: ").append(toIndentedString(ppsFlag)).append("\n");
    sb.append("    acctUpdateConsentFlag: ").append(toIndentedString(acctUpdateConsentFlag)).append("\n");
    sb.append("    acctUpdateConsentDate: ").append(toIndentedString(acctUpdateConsentDate)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    networkAgentId: ").append(toIndentedString(networkAgentId)).append("\n");
    sb.append("    vipStatus: ").append(toIndentedString(vipStatus)).append("\n");
    sb.append("    vipStatusEnrollmentDate: ").append(toIndentedString(vipStatusEnrollmentDate)).append("\n");
    sb.append("    vipStatusExpiryDate: ").append(toIndentedString(vipStatusExpiryDate)).append("\n");
    sb.append("    vipStatusAutoRenewal: ").append(toIndentedString(vipStatusAutoRenewal)).append("\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    transType: ").append(toIndentedString(transType)).append("\n");
    sb.append("    moCity: ").append(toIndentedString(moCity)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    socialLoginPhotoUrl: ").append(toIndentedString(socialLoginPhotoUrl)).append("\n");
    sb.append("    defaultFlag: ").append(toIndentedString(defaultFlag)).append("\n");
    sb.append("    defaultFlagUpdatedBy: ").append(toIndentedString(defaultFlagUpdatedBy)).append("\n");
    sb.append("    defaultFlagUpdatedDate: ").append(toIndentedString(defaultFlagUpdatedDate)).append("\n");
    sb.append("    specialFlag: ").append(toIndentedString(specialFlag)).append("\n");
    sb.append("    specialFlagUpdatedBy: ").append(toIndentedString(specialFlagUpdatedBy)).append("\n");
    sb.append("    specialFlagUpdatedDate: ").append(toIndentedString(specialFlagUpdatedDate)).append("\n");
    sb.append("    amlFlag: ").append(toIndentedString(amlFlag)).append("\n");
    sb.append("    amlFlagUpdatedBy: ").append(toIndentedString(amlFlagUpdatedBy)).append("\n");
    sb.append("    amlFlagUpdatedDate: ").append(toIndentedString(amlFlagUpdatedDate)).append("\n");
    sb.append("    tcFlag: ").append(toIndentedString(tcFlag)).append("\n");
    sb.append("    tcFlagUpdatedDate: ").append(toIndentedString(tcFlagUpdatedDate)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardClass");
    openapiFields.add("issueStatusCode");
    openapiFields.add("cardEnrolledDate");
    openapiFields.add("enrollmentType");
    openapiFields.add("cardExpiryDate");
    openapiFields.add("enrollingAgentNumber");
    openapiFields.add("enrollingMtcn");
    openapiFields.add("levelCodeUpdatedDate");
    openapiFields.add("marketingCode");
    openapiFields.add("idProvided");
    openapiFields.add("cardRegisteredBy");
    openapiFields.add("cardType");
    openapiFields.add("deletedCode");
    openapiFields.add("cardStatus");
    openapiFields.add("lastRedemptionDate");
    openapiFields.add("lastLoginIp");
    openapiFields.add("phonePin");
    openapiFields.add("operationId");
    openapiFields.add("exportDateTime");
    openapiFields.add("exportStatus");
    openapiFields.add("senderTransactionCount");
    openapiFields.add("cardReplacedCount");
    openapiFields.add("blob");
    openapiFields.add("eblob");
    openapiFields.add("cpcCountryCode");
    openapiFields.add("segmentationCode");
    openapiFields.add("prepaidFlag");
    openapiFields.add("enrollingTerm");
    openapiFields.add("enrollingOperatorId");
    openapiFields.add("customerVerifiedBy");
    openapiFields.add("customerVerificationDate");
    openapiFields.add("myWuMemberFlag");
    openapiFields.add("myWuMemberUpdateDate");
    openapiFields.add("wuGoldCard");
    openapiFields.add("loginIpAddress");
    openapiFields.add("businessFlowType");
    openapiFields.add("flag1");
    openapiFields.add("flag2");
    openapiFields.add("flag3");
    openapiFields.add("ppsFlag");
    openapiFields.add("acctUpdateConsentFlag");
    openapiFields.add("acctUpdateConsentDate");
    openapiFields.add("flags");
    openapiFields.add("networkAgentId");
    openapiFields.add("vipStatus");
    openapiFields.add("vipStatusEnrollmentDate");
    openapiFields.add("vipStatusExpiryDate");
    openapiFields.add("vipStatusAutoRenewal");
    openapiFields.add("networkId");
    openapiFields.add("transType");
    openapiFields.add("moCity");
    openapiFields.add("ruleId");
    openapiFields.add("socialLoginPhotoUrl");
    openapiFields.add("defaultFlag");
    openapiFields.add("defaultFlagUpdatedBy");
    openapiFields.add("defaultFlagUpdatedDate");
    openapiFields.add("specialFlag");
    openapiFields.add("specialFlagUpdatedBy");
    openapiFields.add("specialFlagUpdatedDate");
    openapiFields.add("amlFlag");
    openapiFields.add("amlFlagUpdatedBy");
    openapiFields.add("amlFlagUpdatedDate");
    openapiFields.add("tcFlag");
    openapiFields.add("tcFlagUpdatedDate");
    openapiFields.add("latitude");
    openapiFields.add("longitude");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerUsageStatistics
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerUsageStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerUsageStatistics is not found in the empty JSON string", CustomerUsageStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerUsageStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerUsageStatistics` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("cardClass") != null && !jsonObj.get("cardClass").isJsonNull()) && !jsonObj.get("cardClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardClass").toString()));
      }
      if ((jsonObj.get("issueStatusCode") != null && !jsonObj.get("issueStatusCode").isJsonNull()) && !jsonObj.get("issueStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issueStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issueStatusCode").toString()));
      }
      if ((jsonObj.get("enrollmentType") != null && !jsonObj.get("enrollmentType").isJsonNull()) && !jsonObj.get("enrollmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentType").toString()));
      }
      if ((jsonObj.get("enrollingAgentNumber") != null && !jsonObj.get("enrollingAgentNumber").isJsonNull()) && !jsonObj.get("enrollingAgentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollingAgentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollingAgentNumber").toString()));
      }
      if ((jsonObj.get("enrollingMtcn") != null && !jsonObj.get("enrollingMtcn").isJsonNull()) && !jsonObj.get("enrollingMtcn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollingMtcn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollingMtcn").toString()));
      }
      if ((jsonObj.get("marketingCode") != null && !jsonObj.get("marketingCode").isJsonNull()) && !jsonObj.get("marketingCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketingCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketingCode").toString()));
      }
      if ((jsonObj.get("idProvided") != null && !jsonObj.get("idProvided").isJsonNull()) && !jsonObj.get("idProvided").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idProvided` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idProvided").toString()));
      }
      if ((jsonObj.get("cardRegisteredBy") != null && !jsonObj.get("cardRegisteredBy").isJsonNull()) && !jsonObj.get("cardRegisteredBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardRegisteredBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardRegisteredBy").toString()));
      }
      if ((jsonObj.get("cardType") != null && !jsonObj.get("cardType").isJsonNull()) && !jsonObj.get("cardType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardType").toString()));
      }
      if ((jsonObj.get("deletedCode") != null && !jsonObj.get("deletedCode").isJsonNull()) && !jsonObj.get("deletedCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deletedCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deletedCode").toString()));
      }
      if ((jsonObj.get("cardStatus") != null && !jsonObj.get("cardStatus").isJsonNull()) && !jsonObj.get("cardStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardStatus").toString()));
      }
      if ((jsonObj.get("lastLoginIp") != null && !jsonObj.get("lastLoginIp").isJsonNull()) && !jsonObj.get("lastLoginIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastLoginIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastLoginIp").toString()));
      }
      if ((jsonObj.get("phonePin") != null && !jsonObj.get("phonePin").isJsonNull()) && !jsonObj.get("phonePin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phonePin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phonePin").toString()));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      if ((jsonObj.get("exportStatus") != null && !jsonObj.get("exportStatus").isJsonNull()) && !jsonObj.get("exportStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exportStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exportStatus").toString()));
      }
      if ((jsonObj.get("blob") != null && !jsonObj.get("blob").isJsonNull()) && !jsonObj.get("blob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blob").toString()));
      }
      if ((jsonObj.get("eblob") != null && !jsonObj.get("eblob").isJsonNull()) && !jsonObj.get("eblob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eblob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eblob").toString()));
      }
      if ((jsonObj.get("cpcCountryCode") != null && !jsonObj.get("cpcCountryCode").isJsonNull()) && !jsonObj.get("cpcCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpcCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpcCountryCode").toString()));
      }
      if ((jsonObj.get("segmentationCode") != null && !jsonObj.get("segmentationCode").isJsonNull()) && !jsonObj.get("segmentationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segmentationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segmentationCode").toString()));
      }
      if ((jsonObj.get("prepaidFlag") != null && !jsonObj.get("prepaidFlag").isJsonNull()) && !jsonObj.get("prepaidFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prepaidFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prepaidFlag").toString()));
      }
      if ((jsonObj.get("enrollingTerm") != null && !jsonObj.get("enrollingTerm").isJsonNull()) && !jsonObj.get("enrollingTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollingTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollingTerm").toString()));
      }
      if ((jsonObj.get("enrollingOperatorId") != null && !jsonObj.get("enrollingOperatorId").isJsonNull()) && !jsonObj.get("enrollingOperatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollingOperatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollingOperatorId").toString()));
      }
      if ((jsonObj.get("customerVerifiedBy") != null && !jsonObj.get("customerVerifiedBy").isJsonNull()) && !jsonObj.get("customerVerifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerVerifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerVerifiedBy").toString()));
      }
      if ((jsonObj.get("myWuMemberFlag") != null && !jsonObj.get("myWuMemberFlag").isJsonNull()) && !jsonObj.get("myWuMemberFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `myWuMemberFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("myWuMemberFlag").toString()));
      }
      if ((jsonObj.get("wuGoldCard") != null && !jsonObj.get("wuGoldCard").isJsonNull()) && !jsonObj.get("wuGoldCard").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wuGoldCard` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wuGoldCard").toString()));
      }
      if ((jsonObj.get("loginIpAddress") != null && !jsonObj.get("loginIpAddress").isJsonNull()) && !jsonObj.get("loginIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginIpAddress").toString()));
      }
      if ((jsonObj.get("businessFlowType") != null && !jsonObj.get("businessFlowType").isJsonNull()) && !jsonObj.get("businessFlowType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessFlowType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessFlowType").toString()));
      }
      if ((jsonObj.get("flag1") != null && !jsonObj.get("flag1").isJsonNull()) && !jsonObj.get("flag1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flag1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flag1").toString()));
      }
      if ((jsonObj.get("flag2") != null && !jsonObj.get("flag2").isJsonNull()) && !jsonObj.get("flag2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flag2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flag2").toString()));
      }
      if ((jsonObj.get("flag3") != null && !jsonObj.get("flag3").isJsonNull()) && !jsonObj.get("flag3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flag3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flag3").toString()));
      }
      if ((jsonObj.get("ppsFlag") != null && !jsonObj.get("ppsFlag").isJsonNull()) && !jsonObj.get("ppsFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ppsFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ppsFlag").toString()));
      }
      if ((jsonObj.get("acctUpdateConsentFlag") != null && !jsonObj.get("acctUpdateConsentFlag").isJsonNull()) && !jsonObj.get("acctUpdateConsentFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acctUpdateConsentFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acctUpdateConsentFlag").toString()));
      }
      if ((jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull()) && !jsonObj.get("flags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if ((jsonObj.get("networkAgentId") != null && !jsonObj.get("networkAgentId").isJsonNull()) && !jsonObj.get("networkAgentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkAgentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkAgentId").toString()));
      }
      if ((jsonObj.get("vipStatus") != null && !jsonObj.get("vipStatus").isJsonNull()) && !jsonObj.get("vipStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vipStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vipStatus").toString()));
      }
      if ((jsonObj.get("vipStatusAutoRenewal") != null && !jsonObj.get("vipStatusAutoRenewal").isJsonNull()) && !jsonObj.get("vipStatusAutoRenewal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vipStatusAutoRenewal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vipStatusAutoRenewal").toString()));
      }
      if ((jsonObj.get("networkId") != null && !jsonObj.get("networkId").isJsonNull()) && !jsonObj.get("networkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkId").toString()));
      }
      if ((jsonObj.get("transType") != null && !jsonObj.get("transType").isJsonNull()) && !jsonObj.get("transType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transType").toString()));
      }
      if ((jsonObj.get("moCity") != null && !jsonObj.get("moCity").isJsonNull()) && !jsonObj.get("moCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moCity").toString()));
      }
      if ((jsonObj.get("ruleId") != null && !jsonObj.get("ruleId").isJsonNull()) && !jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
      if ((jsonObj.get("socialLoginPhotoUrl") != null && !jsonObj.get("socialLoginPhotoUrl").isJsonNull()) && !jsonObj.get("socialLoginPhotoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `socialLoginPhotoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("socialLoginPhotoUrl").toString()));
      }
      if ((jsonObj.get("defaultFlag") != null && !jsonObj.get("defaultFlag").isJsonNull()) && !jsonObj.get("defaultFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultFlag").toString()));
      }
      if ((jsonObj.get("defaultFlagUpdatedBy") != null && !jsonObj.get("defaultFlagUpdatedBy").isJsonNull()) && !jsonObj.get("defaultFlagUpdatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultFlagUpdatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultFlagUpdatedBy").toString()));
      }
      if ((jsonObj.get("specialFlag") != null && !jsonObj.get("specialFlag").isJsonNull()) && !jsonObj.get("specialFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specialFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specialFlag").toString()));
      }
      if ((jsonObj.get("specialFlagUpdatedBy") != null && !jsonObj.get("specialFlagUpdatedBy").isJsonNull()) && !jsonObj.get("specialFlagUpdatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specialFlagUpdatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specialFlagUpdatedBy").toString()));
      }
      if ((jsonObj.get("amlFlag") != null && !jsonObj.get("amlFlag").isJsonNull()) && !jsonObj.get("amlFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amlFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amlFlag").toString()));
      }
      if ((jsonObj.get("amlFlagUpdatedBy") != null && !jsonObj.get("amlFlagUpdatedBy").isJsonNull()) && !jsonObj.get("amlFlagUpdatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amlFlagUpdatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amlFlagUpdatedBy").toString()));
      }
      if ((jsonObj.get("tcFlag") != null && !jsonObj.get("tcFlag").isJsonNull()) && !jsonObj.get("tcFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tcFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tcFlag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerUsageStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerUsageStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerUsageStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerUsageStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerUsageStatistics>() {
           @Override
           public void write(JsonWriter out, CustomerUsageStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerUsageStatistics read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerUsageStatistics given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerUsageStatistics
  * @throws IOException if the JSON string is invalid with respect to CustomerUsageStatistics
  */
  public static CustomerUsageStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerUsageStatistics.class);
  }

 /**
  * Convert an instance of CustomerUsageStatistics to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

