/*
 * ucd_pmgmt_v1_api
 * Swagger documentation for UCD Profile Management Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.JSON;

/**
 * AccountOnboarding
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T21:22:09.739306500+05:30[Asia/Calcutta]")
public class AccountOnboarding {
  public static final String SERIALIZED_NAME_ACCOUNT_TYPE_ID = "accountTypeId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE_ID)
  private Integer accountTypeId;

  public static final String SERIALIZED_NAME_ONBOARDING_ATTESTATIONS = "onboardingAttestations";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_ATTESTATIONS)
  private String onboardingAttestations;

  public static final String SERIALIZED_NAME_ONBOARDING_ATTESTATIONS_VERSION = "onboardingAttestationsVersion";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_ATTESTATIONS_VERSION)
  private String onboardingAttestationsVersion;

  public static final String SERIALIZED_NAME_ONBOARDING_ATTESTATIONS_DATE = "onboardingAttestationsDate";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_ATTESTATIONS_DATE)
  private OffsetDateTime onboardingAttestationsDate;

  public static final String SERIALIZED_NAME_PURPOSE_OF_SERVICES = "purposeOfServices";
  @SerializedName(SERIALIZED_NAME_PURPOSE_OF_SERVICES)
  private String purposeOfServices;

  public static final String SERIALIZED_NAME_EXP_RECEIVER_COUNTRIES = "expReceiverCountries";
  @SerializedName(SERIALIZED_NAME_EXP_RECEIVER_COUNTRIES)
  private String expReceiverCountries;

  public static final String SERIALIZED_NAME_EXP_SENDER_COUNTRIES = "expSenderCountries";
  @SerializedName(SERIALIZED_NAME_EXP_SENDER_COUNTRIES)
  private String expSenderCountries;

  public static final String SERIALIZED_NAME_TXN_FREQUENCY_RANGE = "txnFrequencyRange";
  @SerializedName(SERIALIZED_NAME_TXN_FREQUENCY_RANGE)
  private String txnFrequencyRange;

  public static final String SERIALIZED_NAME_PROFILE_REVIEW_ATTESTATION = "profileReviewAttestation";
  @SerializedName(SERIALIZED_NAME_PROFILE_REVIEW_ATTESTATION)
  private String profileReviewAttestation;

  public static final String SERIALIZED_NAME_PROFILE_REVIEW_ATTESTATION_DATE = "profileReviewAttestationDate";
  @SerializedName(SERIALIZED_NAME_PROFILE_REVIEW_ATTESTATION_DATE)
  private OffsetDateTime profileReviewAttestationDate;

  public AccountOnboarding() {
  }

  public AccountOnboarding accountTypeId(Integer accountTypeId) {
    
    this.accountTypeId = accountTypeId;
    return this;
  }

   /**
   * Account Type ID values  * 0 - WU COM INTL R3 Nordic * 1 - WUCOM R3 Nordic * 2 - WUGOLD  * 3 - Loyalty  * 4 - TMT  * 5 - Prepaid Cardholder I2C  * 6 - Prepaid Cardholder FIS * 7 - Prepaid Purchaser  * 8 - MTX  * 9 - WUBS  * 10 - R2/R3/R4 SmartPhone  * 11 - R2/R3/R4 Web  * 12 - Banking * 13 - Guest US * 14 - Wallet * 15 - Correction Pay * 16 - Crypto * 17 - Guest EU * 18 - Business Relationship * 99 - OtherAccountTypeID 
   * @return accountTypeId
  **/
  @javax.annotation.Nonnull
  public Integer getAccountTypeId() {
    return accountTypeId;
  }


  public void setAccountTypeId(Integer accountTypeId) {
    this.accountTypeId = accountTypeId;
  }


  public AccountOnboarding onboardingAttestations(String onboardingAttestations) {
    
    this.onboardingAttestations = onboardingAttestations;
    return this;
  }

   /**
   * Onboarding Attestations.
   * @return onboardingAttestations
  **/
  @javax.annotation.Nullable
  public String getOnboardingAttestations() {
    return onboardingAttestations;
  }


  public void setOnboardingAttestations(String onboardingAttestations) {
    this.onboardingAttestations = onboardingAttestations;
  }


  public AccountOnboarding onboardingAttestationsVersion(String onboardingAttestationsVersion) {
    
    this.onboardingAttestationsVersion = onboardingAttestationsVersion;
    return this;
  }

   /**
   * Onboarding Attestations.
   * @return onboardingAttestationsVersion
  **/
  @javax.annotation.Nullable
  public String getOnboardingAttestationsVersion() {
    return onboardingAttestationsVersion;
  }


  public void setOnboardingAttestationsVersion(String onboardingAttestationsVersion) {
    this.onboardingAttestationsVersion = onboardingAttestationsVersion;
  }


  public AccountOnboarding onboardingAttestationsDate(OffsetDateTime onboardingAttestationsDate) {
    
    this.onboardingAttestationsDate = onboardingAttestationsDate;
    return this;
  }

   /**
   * Timestamp when the Onboarding Attestations was added/updated.
   * @return onboardingAttestationsDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getOnboardingAttestationsDate() {
    return onboardingAttestationsDate;
  }


  public void setOnboardingAttestationsDate(OffsetDateTime onboardingAttestationsDate) {
    this.onboardingAttestationsDate = onboardingAttestationsDate;
  }


  public AccountOnboarding purposeOfServices(String purposeOfServices) {
    
    this.purposeOfServices = purposeOfServices;
    return this;
  }

   /**
   * Purpose of Services.
   * @return purposeOfServices
  **/
  @javax.annotation.Nullable
  public String getPurposeOfServices() {
    return purposeOfServices;
  }


  public void setPurposeOfServices(String purposeOfServices) {
    this.purposeOfServices = purposeOfServices;
  }


  public AccountOnboarding expReceiverCountries(String expReceiverCountries) {
    
    this.expReceiverCountries = expReceiverCountries;
    return this;
  }

   /**
   * Receiver Countries.
   * @return expReceiverCountries
  **/
  @javax.annotation.Nullable
  public String getExpReceiverCountries() {
    return expReceiverCountries;
  }


  public void setExpReceiverCountries(String expReceiverCountries) {
    this.expReceiverCountries = expReceiverCountries;
  }


  public AccountOnboarding expSenderCountries(String expSenderCountries) {
    
    this.expSenderCountries = expSenderCountries;
    return this;
  }

   /**
   * Sender Countries.
   * @return expSenderCountries
  **/
  @javax.annotation.Nullable
  public String getExpSenderCountries() {
    return expSenderCountries;
  }


  public void setExpSenderCountries(String expSenderCountries) {
    this.expSenderCountries = expSenderCountries;
  }


  public AccountOnboarding txnFrequencyRange(String txnFrequencyRange) {
    
    this.txnFrequencyRange = txnFrequencyRange;
    return this;
  }

   /**
   * Transaction Frequency Rangs.
   * @return txnFrequencyRange
  **/
  @javax.annotation.Nullable
  public String getTxnFrequencyRange() {
    return txnFrequencyRange;
  }


  public void setTxnFrequencyRange(String txnFrequencyRange) {
    this.txnFrequencyRange = txnFrequencyRange;
  }


  public AccountOnboarding profileReviewAttestation(String profileReviewAttestation) {
    
    this.profileReviewAttestation = profileReviewAttestation;
    return this;
  }

   /**
   * Profile Review Attestation.
   * @return profileReviewAttestation
  **/
  @javax.annotation.Nullable
  public String getProfileReviewAttestation() {
    return profileReviewAttestation;
  }


  public void setProfileReviewAttestation(String profileReviewAttestation) {
    this.profileReviewAttestation = profileReviewAttestation;
  }


  public AccountOnboarding profileReviewAttestationDate(OffsetDateTime profileReviewAttestationDate) {
    
    this.profileReviewAttestationDate = profileReviewAttestationDate;
    return this;
  }

   /**
   * Timestamp when the Profile Review Attestation was added/updated.
   * @return profileReviewAttestationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getProfileReviewAttestationDate() {
    return profileReviewAttestationDate;
  }


  public void setProfileReviewAttestationDate(OffsetDateTime profileReviewAttestationDate) {
    this.profileReviewAttestationDate = profileReviewAttestationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountOnboarding accountOnboarding = (AccountOnboarding) o;
    return Objects.equals(this.accountTypeId, accountOnboarding.accountTypeId) &&
        Objects.equals(this.onboardingAttestations, accountOnboarding.onboardingAttestations) &&
        Objects.equals(this.onboardingAttestationsVersion, accountOnboarding.onboardingAttestationsVersion) &&
        Objects.equals(this.onboardingAttestationsDate, accountOnboarding.onboardingAttestationsDate) &&
        Objects.equals(this.purposeOfServices, accountOnboarding.purposeOfServices) &&
        Objects.equals(this.expReceiverCountries, accountOnboarding.expReceiverCountries) &&
        Objects.equals(this.expSenderCountries, accountOnboarding.expSenderCountries) &&
        Objects.equals(this.txnFrequencyRange, accountOnboarding.txnFrequencyRange) &&
        Objects.equals(this.profileReviewAttestation, accountOnboarding.profileReviewAttestation) &&
        Objects.equals(this.profileReviewAttestationDate, accountOnboarding.profileReviewAttestationDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountTypeId, onboardingAttestations, onboardingAttestationsVersion, onboardingAttestationsDate, purposeOfServices, expReceiverCountries, expSenderCountries, txnFrequencyRange, profileReviewAttestation, profileReviewAttestationDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountOnboarding {\n");
    sb.append("    accountTypeId: ").append(toIndentedString(accountTypeId)).append("\n");
    sb.append("    onboardingAttestations: ").append(toIndentedString(onboardingAttestations)).append("\n");
    sb.append("    onboardingAttestationsVersion: ").append(toIndentedString(onboardingAttestationsVersion)).append("\n");
    sb.append("    onboardingAttestationsDate: ").append(toIndentedString(onboardingAttestationsDate)).append("\n");
    sb.append("    purposeOfServices: ").append(toIndentedString(purposeOfServices)).append("\n");
    sb.append("    expReceiverCountries: ").append(toIndentedString(expReceiverCountries)).append("\n");
    sb.append("    expSenderCountries: ").append(toIndentedString(expSenderCountries)).append("\n");
    sb.append("    txnFrequencyRange: ").append(toIndentedString(txnFrequencyRange)).append("\n");
    sb.append("    profileReviewAttestation: ").append(toIndentedString(profileReviewAttestation)).append("\n");
    sb.append("    profileReviewAttestationDate: ").append(toIndentedString(profileReviewAttestationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountTypeId");
    openapiFields.add("onboardingAttestations");
    openapiFields.add("onboardingAttestationsVersion");
    openapiFields.add("onboardingAttestationsDate");
    openapiFields.add("purposeOfServices");
    openapiFields.add("expReceiverCountries");
    openapiFields.add("expSenderCountries");
    openapiFields.add("txnFrequencyRange");
    openapiFields.add("profileReviewAttestation");
    openapiFields.add("profileReviewAttestationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountTypeId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccountOnboarding
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AccountOnboarding.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountOnboarding is not found in the empty JSON string", AccountOnboarding.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AccountOnboarding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountOnboarding` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountOnboarding.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("onboardingAttestations") != null && !jsonObj.get("onboardingAttestations").isJsonNull()) && !jsonObj.get("onboardingAttestations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onboardingAttestations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onboardingAttestations").toString()));
      }
      if ((jsonObj.get("onboardingAttestationsVersion") != null && !jsonObj.get("onboardingAttestationsVersion").isJsonNull()) && !jsonObj.get("onboardingAttestationsVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onboardingAttestationsVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onboardingAttestationsVersion").toString()));
      }
      if ((jsonObj.get("purposeOfServices") != null && !jsonObj.get("purposeOfServices").isJsonNull()) && !jsonObj.get("purposeOfServices").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purposeOfServices` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purposeOfServices").toString()));
      }
      if ((jsonObj.get("expReceiverCountries") != null && !jsonObj.get("expReceiverCountries").isJsonNull()) && !jsonObj.get("expReceiverCountries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expReceiverCountries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expReceiverCountries").toString()));
      }
      if ((jsonObj.get("expSenderCountries") != null && !jsonObj.get("expSenderCountries").isJsonNull()) && !jsonObj.get("expSenderCountries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expSenderCountries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expSenderCountries").toString()));
      }
      if ((jsonObj.get("txnFrequencyRange") != null && !jsonObj.get("txnFrequencyRange").isJsonNull()) && !jsonObj.get("txnFrequencyRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txnFrequencyRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txnFrequencyRange").toString()));
      }
      if ((jsonObj.get("profileReviewAttestation") != null && !jsonObj.get("profileReviewAttestation").isJsonNull()) && !jsonObj.get("profileReviewAttestation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileReviewAttestation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileReviewAttestation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountOnboarding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountOnboarding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountOnboarding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountOnboarding.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountOnboarding>() {
           @Override
           public void write(JsonWriter out, AccountOnboarding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountOnboarding read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountOnboarding given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountOnboarding
  * @throws IOException if the JSON string is invalid with respect to AccountOnboarding
  */
  public static AccountOnboarding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountOnboarding.class);
  }

 /**
  * Convert an instance of AccountOnboarding to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

