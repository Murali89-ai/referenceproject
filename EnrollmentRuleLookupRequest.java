/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * This is the request model for EnrollmentRuleLookup service. This is to search for a level code &amp; card class by supplying elements (such as EnrollmentType, Email, Name).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class EnrollmentRuleLookupRequest {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Header header;

  /**
   * Enrollment Type - Explicit (E)/Convenience (C). If this field is not passed it will be treated as Implicit.
   */
  @JsonAdapter(EnrollmentTypeEnum.Adapter.class)
  public enum EnrollmentTypeEnum {
    E("E"),
    
    C("C");

    private String value;

    EnrollmentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnrollmentTypeEnum fromValue(String value) {
      for (EnrollmentTypeEnum b : EnrollmentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnrollmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnrollmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnrollmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnrollmentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENROLLMENT_TYPE = "enrollmentType";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_TYPE)
  private EnrollmentTypeEnum enrollmentType;

  public static final String SERIALIZED_NAME_CPC_COUNTRY_CODE = "cpcCountryCode";
  @SerializedName(SERIALIZED_NAME_CPC_COUNTRY_CODE)
  private String cpcCountryCode;

  public static final String SERIALIZED_NAME_ENROLLING_AGENT_NUMBER = "enrollingAgentNumber";
  @SerializedName(SERIALIZED_NAME_ENROLLING_AGENT_NUMBER)
  private String enrollingAgentNumber;

  public static final String SERIALIZED_NAME_RECEIVER_TYPE_ID = "receiverTypeId";
  @SerializedName(SERIALIZED_NAME_RECEIVER_TYPE_ID)
  private String receiverTypeId;

  public static final String SERIALIZED_NAME_NETWORK_ID = "networkId";
  @SerializedName(SERIALIZED_NAME_NETWORK_ID)
  private String networkId;

  public static final String SERIALIZED_NAME_TRANS_TYPE = "transType";
  @SerializedName(SERIALIZED_NAME_TRANS_TYPE)
  private String transType;

  public static final String SERIALIZED_NAME_MO_CITY = "moCity";
  @SerializedName(SERIALIZED_NAME_MO_CITY)
  private String moCity;

  public static final String SERIALIZED_NAME_REQUEST_INITIATED_BY = "requestInitiatedBy";
  @SerializedName(SERIALIZED_NAME_REQUEST_INITIATED_BY)
  private String requestInitiatedBy;

  public EnrollmentRuleLookupRequest() {
  }

  public EnrollmentRuleLookupRequest header(Header header) {
    
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @javax.annotation.Nonnull
  public Header getHeader() {
    return header;
  }


  public void setHeader(Header header) {
    this.header = header;
  }


  public EnrollmentRuleLookupRequest enrollmentType(EnrollmentTypeEnum enrollmentType) {
    
    this.enrollmentType = enrollmentType;
    return this;
  }

   /**
   * Enrollment Type - Explicit (E)/Convenience (C). If this field is not passed it will be treated as Implicit.
   * @return enrollmentType
  **/
  @javax.annotation.Nullable
  public EnrollmentTypeEnum getEnrollmentType() {
    return enrollmentType;
  }


  public void setEnrollmentType(EnrollmentTypeEnum enrollmentType) {
    this.enrollmentType = enrollmentType;
  }


  public EnrollmentRuleLookupRequest cpcCountryCode(String cpcCountryCode) {
    
    this.cpcCountryCode = cpcCountryCode;
    return this;
  }

   /**
   * CPC Country Code
   * @return cpcCountryCode
  **/
  @javax.annotation.Nullable
  public String getCpcCountryCode() {
    return cpcCountryCode;
  }


  public void setCpcCountryCode(String cpcCountryCode) {
    this.cpcCountryCode = cpcCountryCode;
  }


  public EnrollmentRuleLookupRequest enrollingAgentNumber(String enrollingAgentNumber) {
    
    this.enrollingAgentNumber = enrollingAgentNumber;
    return this;
  }

   /**
   * Enrolling Agent ID.
   * @return enrollingAgentNumber
  **/
  @javax.annotation.Nullable
  public String getEnrollingAgentNumber() {
    return enrollingAgentNumber;
  }


  public void setEnrollingAgentNumber(String enrollingAgentNumber) {
    this.enrollingAgentNumber = enrollingAgentNumber;
  }


  public EnrollmentRuleLookupRequest receiverTypeId(String receiverTypeId) {
    
    this.receiverTypeId = receiverTypeId;
    return this;
  }

   /**
   * There are different types of associate records.   S and Q for commercial records.    Others are for people based on their name type (D-Domestic, M-Mexican, Other-ReceiverTypeIDOther).   The values allowed are Q,S,X,P,B,D,M,G,L,I,Other. Earlier these were defined as enumeration but it is deleted as the Prod data has different values for ReceiverTypeID. With Enumeration, CustLookup will blow up for the junk data that is there in DB.
   * @return receiverTypeId
  **/
  @javax.annotation.Nullable
  public String getReceiverTypeId() {
    return receiverTypeId;
  }


  public void setReceiverTypeId(String receiverTypeId) {
    this.receiverTypeId = receiverTypeId;
  }


  public EnrollmentRuleLookupRequest networkId(String networkId) {
    
    this.networkId = networkId;
    return this;
  }

   /**
   * Network Id
   * @return networkId
  **/
  @javax.annotation.Nullable
  public String getNetworkId() {
    return networkId;
  }


  public void setNetworkId(String networkId) {
    this.networkId = networkId;
  }


  public EnrollmentRuleLookupRequest transType(String transType) {
    
    this.transType = transType;
    return this;
  }

   /**
   * Transaction Type
   * @return transType
  **/
  @javax.annotation.Nullable
  public String getTransType() {
    return transType;
  }


  public void setTransType(String transType) {
    this.transType = transType;
  }


  public EnrollmentRuleLookupRequest moCity(String moCity) {
    
    this.moCity = moCity;
    return this;
  }

   /**
   * Quick Collect Codes
   * @return moCity
  **/
  @javax.annotation.Nullable
  public String getMoCity() {
    return moCity;
  }


  public void setMoCity(String moCity) {
    this.moCity = moCity;
  }


  public EnrollmentRuleLookupRequest requestInitiatedBy(String requestInitiatedBy) {
    
    this.requestInitiatedBy = requestInitiatedBy;
    return this;
  }

   /**
   * To identify who has initiated the request.
   * @return requestInitiatedBy
  **/
  @javax.annotation.Nonnull
  public String getRequestInitiatedBy() {
    return requestInitiatedBy;
  }


  public void setRequestInitiatedBy(String requestInitiatedBy) {
    this.requestInitiatedBy = requestInitiatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnrollmentRuleLookupRequest enrollmentRuleLookupRequest = (EnrollmentRuleLookupRequest) o;
    return Objects.equals(this.header, enrollmentRuleLookupRequest.header) &&
        Objects.equals(this.enrollmentType, enrollmentRuleLookupRequest.enrollmentType) &&
        Objects.equals(this.cpcCountryCode, enrollmentRuleLookupRequest.cpcCountryCode) &&
        Objects.equals(this.enrollingAgentNumber, enrollmentRuleLookupRequest.enrollingAgentNumber) &&
        Objects.equals(this.receiverTypeId, enrollmentRuleLookupRequest.receiverTypeId) &&
        Objects.equals(this.networkId, enrollmentRuleLookupRequest.networkId) &&
        Objects.equals(this.transType, enrollmentRuleLookupRequest.transType) &&
        Objects.equals(this.moCity, enrollmentRuleLookupRequest.moCity) &&
        Objects.equals(this.requestInitiatedBy, enrollmentRuleLookupRequest.requestInitiatedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, enrollmentType, cpcCountryCode, enrollingAgentNumber, receiverTypeId, networkId, transType, moCity, requestInitiatedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnrollmentRuleLookupRequest {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    enrollmentType: ").append(toIndentedString(enrollmentType)).append("\n");
    sb.append("    cpcCountryCode: ").append(toIndentedString(cpcCountryCode)).append("\n");
    sb.append("    enrollingAgentNumber: ").append(toIndentedString(enrollingAgentNumber)).append("\n");
    sb.append("    receiverTypeId: ").append(toIndentedString(receiverTypeId)).append("\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    transType: ").append(toIndentedString(transType)).append("\n");
    sb.append("    moCity: ").append(toIndentedString(moCity)).append("\n");
    sb.append("    requestInitiatedBy: ").append(toIndentedString(requestInitiatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("enrollmentType");
    openapiFields.add("cpcCountryCode");
    openapiFields.add("enrollingAgentNumber");
    openapiFields.add("receiverTypeId");
    openapiFields.add("networkId");
    openapiFields.add("transType");
    openapiFields.add("moCity");
    openapiFields.add("requestInitiatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("header");
    openapiRequiredFields.add("requestInitiatedBy");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EnrollmentRuleLookupRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EnrollmentRuleLookupRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnrollmentRuleLookupRequest is not found in the empty JSON string", EnrollmentRuleLookupRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EnrollmentRuleLookupRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnrollmentRuleLookupRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnrollmentRuleLookupRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `header`
      Header.validateJsonObject(jsonObj.getAsJsonObject("header"));
      if ((jsonObj.get("enrollmentType") != null && !jsonObj.get("enrollmentType").isJsonNull()) && !jsonObj.get("enrollmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentType").toString()));
      }
      if ((jsonObj.get("cpcCountryCode") != null && !jsonObj.get("cpcCountryCode").isJsonNull()) && !jsonObj.get("cpcCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpcCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpcCountryCode").toString()));
      }
      if ((jsonObj.get("enrollingAgentNumber") != null && !jsonObj.get("enrollingAgentNumber").isJsonNull()) && !jsonObj.get("enrollingAgentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollingAgentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollingAgentNumber").toString()));
      }
      if ((jsonObj.get("receiverTypeId") != null && !jsonObj.get("receiverTypeId").isJsonNull()) && !jsonObj.get("receiverTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverTypeId").toString()));
      }
      if ((jsonObj.get("networkId") != null && !jsonObj.get("networkId").isJsonNull()) && !jsonObj.get("networkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkId").toString()));
      }
      if ((jsonObj.get("transType") != null && !jsonObj.get("transType").isJsonNull()) && !jsonObj.get("transType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transType").toString()));
      }
      if ((jsonObj.get("moCity") != null && !jsonObj.get("moCity").isJsonNull()) && !jsonObj.get("moCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moCity").toString()));
      }
      if (!jsonObj.get("requestInitiatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestInitiatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestInitiatedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnrollmentRuleLookupRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnrollmentRuleLookupRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnrollmentRuleLookupRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnrollmentRuleLookupRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EnrollmentRuleLookupRequest>() {
           @Override
           public void write(JsonWriter out, EnrollmentRuleLookupRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnrollmentRuleLookupRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EnrollmentRuleLookupRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EnrollmentRuleLookupRequest
  * @throws IOException if the JSON string is invalid with respect to EnrollmentRuleLookupRequest
  */
  public static EnrollmentRuleLookupRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnrollmentRuleLookupRequest.class);
  }

 /**
  * Convert an instance of EnrollmentRuleLookupRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

