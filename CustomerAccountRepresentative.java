/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * CustomerAccountRepresentative
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class CustomerAccountRepresentative {
  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_REP_NO = "customerAccountRepNo";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_REP_NO)
  private Long customerAccountRepNo;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE_ID = "accountTypeId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE_ID)
  private Integer accountTypeId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_LAST_NAME_MATERNAL = "lastNameMaternal";
  @SerializedName(SERIALIZED_NAME_LAST_NAME_MATERNAL)
  private String lastNameMaternal;

  public static final String SERIALIZED_NAME_LAST_NAME_PATERNAL = "lastNamePaternal";
  @SerializedName(SERIALIZED_NAME_LAST_NAME_PATERNAL)
  private String lastNamePaternal;

  /**
   * Name type IDs * C - Company  * D - Domestic(US) * M - Mexican * Other - OtherNameTypeID 
   */
  @JsonAdapter(NameTypeIdEnum.Adapter.class)
  public enum NameTypeIdEnum {
    D("D"),
    
    M("M"),
    
    C("C"),
    
    OTHER("Other");

    private String value;

    NameTypeIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameTypeIdEnum fromValue(String value) {
      for (NameTypeIdEnum b : NameTypeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameTypeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameTypeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameTypeIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameTypeIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NAME_TYPE_ID = "nameTypeId";
  @SerializedName(SERIALIZED_NAME_NAME_TYPE_ID)
  private NameTypeIdEnum nameTypeId;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private LocalDate dob;

  public static final String SERIALIZED_NAME_STREET_ADDRESS1 = "streetAddress1";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS1)
  private String streetAddress1;

  public static final String SERIALIZED_NAME_STREET_ADDRESS2 = "streetAddress2";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS2)
  private String streetAddress2;

  public static final String SERIALIZED_NAME_STREET_ADDRESS3 = "streetAddress3";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS3)
  private String streetAddress3;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE_PROVINCE = "stateProvince";
  @SerializedName(SERIALIZED_NAME_STATE_PROVINCE)
  private String stateProvince;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_ZIP_POSTAL_CODE = "zipPostalCode";
  @SerializedName(SERIALIZED_NAME_ZIP_POSTAL_CODE)
  private String zipPostalCode;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  /**
   * Controlling Person Type. * V - Authorized to represent * Z - Authorized signatory * M - Trustee * S - Administrator * E - Parents for (minor) children * H - Trustee * G - Trustor * W - Beneficial owner 
   */
  @JsonAdapter(ControllingPersonTypeEnum.Adapter.class)
  public enum ControllingPersonTypeEnum {
    V("V"),
    
    Z("Z"),
    
    M("M"),
    
    S("S"),
    
    E("E"),
    
    H("H"),
    
    G("G"),
    
    W("W");

    private String value;

    ControllingPersonTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ControllingPersonTypeEnum fromValue(String value) {
      for (ControllingPersonTypeEnum b : ControllingPersonTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ControllingPersonTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ControllingPersonTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ControllingPersonTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ControllingPersonTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTROLLING_PERSON_TYPE = "controllingPersonType";
  @SerializedName(SERIALIZED_NAME_CONTROLLING_PERSON_TYPE)
  private ControllingPersonTypeEnum controllingPersonType;

  public static final String SERIALIZED_NAME_CONTROLLING_PERSON_START_DATE = "controllingPersonStartDate";
  @SerializedName(SERIALIZED_NAME_CONTROLLING_PERSON_START_DATE)
  private String controllingPersonStartDate;

  public static final String SERIALIZED_NAME_CONTROLLING_PERSON_END_DATE = "controllingPersonEndDate";
  @SerializedName(SERIALIZED_NAME_CONTROLLING_PERSON_END_DATE)
  private String controllingPersonEndDate;

  public static final String SERIALIZED_NAME_CONTROLLING_PERSON_COUNTRY_OF_BIRTH = "controllingPersonCountryOfBirth";
  @SerializedName(SERIALIZED_NAME_CONTROLLING_PERSON_COUNTRY_OF_BIRTH)
  private String controllingPersonCountryOfBirth;

  public static final String SERIALIZED_NAME_CONTROLLING_PERSON_CITY_OF_BIRTH = "controllingPersonCityOfBirth";
  @SerializedName(SERIALIZED_NAME_CONTROLLING_PERSON_CITY_OF_BIRTH)
  private String controllingPersonCityOfBirth;

  public static final String SERIALIZED_NAME_CONTROLLING_PERSON_NATIONALITY = "controllingPersonNationality";
  @SerializedName(SERIALIZED_NAME_CONTROLLING_PERSON_NATIONALITY)
  private String controllingPersonNationality;

  public CustomerAccountRepresentative() {
  }

  public CustomerAccountRepresentative customerAccountRepNo(Long customerAccountRepNo) {
    
    this.customerAccountRepNo = customerAccountRepNo;
    return this;
  }

   /**
   * Sequence Number within customer_id, Front end should send it, update should come based on this sequence.
   * @return customerAccountRepNo
  **/
  @javax.annotation.Nullable
  public Long getCustomerAccountRepNo() {
    return customerAccountRepNo;
  }


  public void setCustomerAccountRepNo(Long customerAccountRepNo) {
    this.customerAccountRepNo = customerAccountRepNo;
  }


  public CustomerAccountRepresentative accountTypeId(Integer accountTypeId) {
    
    this.accountTypeId = accountTypeId;
    return this;
  }

   /**
   * Account Type ID values  * 0 - WU COM INTL R3 Nordic * 1 - WUCOM R3 Nordic * 2 - WUGOLD  * 3 - Loyalty  * 4 - TMT  * 5 - Prepaid Cardholder I2C  * 6 - Prepaid Cardholder FIS * 7 - Prepaid Purchaser  * 8 - MTX  * 9 - WUBS  * 10 - R2/R3/R4 SmartPhone  * 11 - R2/R3/R4 Web  * 12 - Banking * 13 - Guest US * 14 - Wallet * 15 - Correction Pay * 16 - Crypto * 17 - Guest EU * 18 - Business Relationship * 99 - OtherAccountTypeID 
   * @return accountTypeId
  **/
  @javax.annotation.Nullable
  public Integer getAccountTypeId() {
    return accountTypeId;
  }


  public void setAccountTypeId(Integer accountTypeId) {
    this.accountTypeId = accountTypeId;
  }


  public CustomerAccountRepresentative firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First Name for Name Type D and M
   * @return firstName
  **/
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public CustomerAccountRepresentative lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last Name for Name Type D
   * @return lastName
  **/
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public CustomerAccountRepresentative middleName(String middleName) {
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Middle Name for Name Type D
   * @return middleName
  **/
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public CustomerAccountRepresentative lastNameMaternal(String lastNameMaternal) {
    
    this.lastNameMaternal = lastNameMaternal;
    return this;
  }

   /**
   * Maternal Last Name for Name Type M
   * @return lastNameMaternal
  **/
  @javax.annotation.Nullable
  public String getLastNameMaternal() {
    return lastNameMaternal;
  }


  public void setLastNameMaternal(String lastNameMaternal) {
    this.lastNameMaternal = lastNameMaternal;
  }


  public CustomerAccountRepresentative lastNamePaternal(String lastNamePaternal) {
    
    this.lastNamePaternal = lastNamePaternal;
    return this;
  }

   /**
   * Paternal Last Name for Name Type M
   * @return lastNamePaternal
  **/
  @javax.annotation.Nullable
  public String getLastNamePaternal() {
    return lastNamePaternal;
  }


  public void setLastNamePaternal(String lastNamePaternal) {
    this.lastNamePaternal = lastNamePaternal;
  }


  public CustomerAccountRepresentative nameTypeId(NameTypeIdEnum nameTypeId) {
    
    this.nameTypeId = nameTypeId;
    return this;
  }

   /**
   * Name type IDs * C - Company  * D - Domestic(US) * M - Mexican * Other - OtherNameTypeID 
   * @return nameTypeId
  **/
  @javax.annotation.Nullable
  public NameTypeIdEnum getNameTypeId() {
    return nameTypeId;
  }


  public void setNameTypeId(NameTypeIdEnum nameTypeId) {
    this.nameTypeId = nameTypeId;
  }


  public CustomerAccountRepresentative dob(LocalDate dob) {
    
    this.dob = dob;
    return this;
  }

   /**
   * Date of Birth.
   * @return dob
  **/
  @javax.annotation.Nullable
  public LocalDate getDob() {
    return dob;
  }


  public void setDob(LocalDate dob) {
    this.dob = dob;
  }


  public CustomerAccountRepresentative streetAddress1(String streetAddress1) {
    
    this.streetAddress1 = streetAddress1;
    return this;
  }

   /**
   * Street Address Line 1
   * @return streetAddress1
  **/
  @javax.annotation.Nullable
  public String getStreetAddress1() {
    return streetAddress1;
  }


  public void setStreetAddress1(String streetAddress1) {
    this.streetAddress1 = streetAddress1;
  }


  public CustomerAccountRepresentative streetAddress2(String streetAddress2) {
    
    this.streetAddress2 = streetAddress2;
    return this;
  }

   /**
   * Street Address Line 2
   * @return streetAddress2
  **/
  @javax.annotation.Nullable
  public String getStreetAddress2() {
    return streetAddress2;
  }


  public void setStreetAddress2(String streetAddress2) {
    this.streetAddress2 = streetAddress2;
  }


  public CustomerAccountRepresentative streetAddress3(String streetAddress3) {
    
    this.streetAddress3 = streetAddress3;
    return this;
  }

   /**
   * Street Address Line 3
   * @return streetAddress3
  **/
  @javax.annotation.Nullable
  public String getStreetAddress3() {
    return streetAddress3;
  }


  public void setStreetAddress3(String streetAddress3) {
    this.streetAddress3 = streetAddress3;
  }


  public CustomerAccountRepresentative city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * City
   * @return city
  **/
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    this.city = city;
  }


  public CustomerAccountRepresentative stateProvince(String stateProvince) {
    
    this.stateProvince = stateProvince;
    return this;
  }

   /**
   * State Province Description.
   * @return stateProvince
  **/
  @javax.annotation.Nullable
  public String getStateProvince() {
    return stateProvince;
  }


  public void setStateProvince(String stateProvince) {
    this.stateProvince = stateProvince;
  }


  public CustomerAccountRepresentative countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Country Code in ISO2 format. e.g. AT,IN,US
   * @return countryCode
  **/
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public CustomerAccountRepresentative zipPostalCode(String zipPostalCode) {
    
    this.zipPostalCode = zipPostalCode;
    return this;
  }

   /**
   * Zip Postal Code
   * @return zipPostalCode
  **/
  @javax.annotation.Nullable
  public String getZipPostalCode() {
    return zipPostalCode;
  }


  public void setZipPostalCode(String zipPostalCode) {
    this.zipPostalCode = zipPostalCode;
  }


  public CustomerAccountRepresentative taxId(String taxId) {
    
    this.taxId = taxId;
    return this;
  }

   /**
   * Tax Id
   * @return taxId
  **/
  @javax.annotation.Nullable
  public String getTaxId() {
    return taxId;
  }


  public void setTaxId(String taxId) {
    this.taxId = taxId;
  }


  public CustomerAccountRepresentative controllingPersonType(ControllingPersonTypeEnum controllingPersonType) {
    
    this.controllingPersonType = controllingPersonType;
    return this;
  }

   /**
   * Controlling Person Type. * V - Authorized to represent * Z - Authorized signatory * M - Trustee * S - Administrator * E - Parents for (minor) children * H - Trustee * G - Trustor * W - Beneficial owner 
   * @return controllingPersonType
  **/
  @javax.annotation.Nullable
  public ControllingPersonTypeEnum getControllingPersonType() {
    return controllingPersonType;
  }


  public void setControllingPersonType(ControllingPersonTypeEnum controllingPersonType) {
    this.controllingPersonType = controllingPersonType;
  }


  public CustomerAccountRepresentative controllingPersonStartDate(String controllingPersonStartDate) {
    
    this.controllingPersonStartDate = controllingPersonStartDate;
    return this;
  }

   /**
   * Start Timestamp for the Controlling Person.
   * @return controllingPersonStartDate
  **/
  @javax.annotation.Nullable
  public String getControllingPersonStartDate() {
    return controllingPersonStartDate;
  }


  public void setControllingPersonStartDate(String controllingPersonStartDate) {
    this.controllingPersonStartDate = controllingPersonStartDate;
  }


  public CustomerAccountRepresentative controllingPersonEndDate(String controllingPersonEndDate) {
    
    this.controllingPersonEndDate = controllingPersonEndDate;
    return this;
  }

   /**
   * End Timestamp for the Controlling Person.
   * @return controllingPersonEndDate
  **/
  @javax.annotation.Nullable
  public String getControllingPersonEndDate() {
    return controllingPersonEndDate;
  }


  public void setControllingPersonEndDate(String controllingPersonEndDate) {
    this.controllingPersonEndDate = controllingPersonEndDate;
  }


  public CustomerAccountRepresentative controllingPersonCountryOfBirth(String controllingPersonCountryOfBirth) {
    
    this.controllingPersonCountryOfBirth = controllingPersonCountryOfBirth;
    return this;
  }

   /**
   * Controlling Person&#39;s Country Of Birth in ISO2 format. e.g. AT,IN,US
   * @return controllingPersonCountryOfBirth
  **/
  @javax.annotation.Nullable
  public String getControllingPersonCountryOfBirth() {
    return controllingPersonCountryOfBirth;
  }


  public void setControllingPersonCountryOfBirth(String controllingPersonCountryOfBirth) {
    this.controllingPersonCountryOfBirth = controllingPersonCountryOfBirth;
  }


  public CustomerAccountRepresentative controllingPersonCityOfBirth(String controllingPersonCityOfBirth) {
    
    this.controllingPersonCityOfBirth = controllingPersonCityOfBirth;
    return this;
  }

   /**
   * Controlling Person&#39;s City Of Birth.
   * @return controllingPersonCityOfBirth
  **/
  @javax.annotation.Nullable
  public String getControllingPersonCityOfBirth() {
    return controllingPersonCityOfBirth;
  }


  public void setControllingPersonCityOfBirth(String controllingPersonCityOfBirth) {
    this.controllingPersonCityOfBirth = controllingPersonCityOfBirth;
  }


  public CustomerAccountRepresentative controllingPersonNationality(String controllingPersonNationality) {
    
    this.controllingPersonNationality = controllingPersonNationality;
    return this;
  }

   /**
   * Controlling Person&#39;s nationality in ISO2 format. e.g. AT,IN,US.
   * @return controllingPersonNationality
  **/
  @javax.annotation.Nullable
  public String getControllingPersonNationality() {
    return controllingPersonNationality;
  }


  public void setControllingPersonNationality(String controllingPersonNationality) {
    this.controllingPersonNationality = controllingPersonNationality;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerAccountRepresentative customerAccountRepresentative = (CustomerAccountRepresentative) o;
    return Objects.equals(this.customerAccountRepNo, customerAccountRepresentative.customerAccountRepNo) &&
        Objects.equals(this.accountTypeId, customerAccountRepresentative.accountTypeId) &&
        Objects.equals(this.firstName, customerAccountRepresentative.firstName) &&
        Objects.equals(this.lastName, customerAccountRepresentative.lastName) &&
        Objects.equals(this.middleName, customerAccountRepresentative.middleName) &&
        Objects.equals(this.lastNameMaternal, customerAccountRepresentative.lastNameMaternal) &&
        Objects.equals(this.lastNamePaternal, customerAccountRepresentative.lastNamePaternal) &&
        Objects.equals(this.nameTypeId, customerAccountRepresentative.nameTypeId) &&
        Objects.equals(this.dob, customerAccountRepresentative.dob) &&
        Objects.equals(this.streetAddress1, customerAccountRepresentative.streetAddress1) &&
        Objects.equals(this.streetAddress2, customerAccountRepresentative.streetAddress2) &&
        Objects.equals(this.streetAddress3, customerAccountRepresentative.streetAddress3) &&
        Objects.equals(this.city, customerAccountRepresentative.city) &&
        Objects.equals(this.stateProvince, customerAccountRepresentative.stateProvince) &&
        Objects.equals(this.countryCode, customerAccountRepresentative.countryCode) &&
        Objects.equals(this.zipPostalCode, customerAccountRepresentative.zipPostalCode) &&
        Objects.equals(this.taxId, customerAccountRepresentative.taxId) &&
        Objects.equals(this.controllingPersonType, customerAccountRepresentative.controllingPersonType) &&
        Objects.equals(this.controllingPersonStartDate, customerAccountRepresentative.controllingPersonStartDate) &&
        Objects.equals(this.controllingPersonEndDate, customerAccountRepresentative.controllingPersonEndDate) &&
        Objects.equals(this.controllingPersonCountryOfBirth, customerAccountRepresentative.controllingPersonCountryOfBirth) &&
        Objects.equals(this.controllingPersonCityOfBirth, customerAccountRepresentative.controllingPersonCityOfBirth) &&
        Objects.equals(this.controllingPersonNationality, customerAccountRepresentative.controllingPersonNationality);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerAccountRepNo, accountTypeId, firstName, lastName, middleName, lastNameMaternal, lastNamePaternal, nameTypeId, dob, streetAddress1, streetAddress2, streetAddress3, city, stateProvince, countryCode, zipPostalCode, taxId, controllingPersonType, controllingPersonStartDate, controllingPersonEndDate, controllingPersonCountryOfBirth, controllingPersonCityOfBirth, controllingPersonNationality);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerAccountRepresentative {\n");
    sb.append("    customerAccountRepNo: ").append(toIndentedString(customerAccountRepNo)).append("\n");
    sb.append("    accountTypeId: ").append(toIndentedString(accountTypeId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastNameMaternal: ").append(toIndentedString(lastNameMaternal)).append("\n");
    sb.append("    lastNamePaternal: ").append(toIndentedString(lastNamePaternal)).append("\n");
    sb.append("    nameTypeId: ").append(toIndentedString(nameTypeId)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    streetAddress1: ").append(toIndentedString(streetAddress1)).append("\n");
    sb.append("    streetAddress2: ").append(toIndentedString(streetAddress2)).append("\n");
    sb.append("    streetAddress3: ").append(toIndentedString(streetAddress3)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    stateProvince: ").append(toIndentedString(stateProvince)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    zipPostalCode: ").append(toIndentedString(zipPostalCode)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    controllingPersonType: ").append(toIndentedString(controllingPersonType)).append("\n");
    sb.append("    controllingPersonStartDate: ").append(toIndentedString(controllingPersonStartDate)).append("\n");
    sb.append("    controllingPersonEndDate: ").append(toIndentedString(controllingPersonEndDate)).append("\n");
    sb.append("    controllingPersonCountryOfBirth: ").append(toIndentedString(controllingPersonCountryOfBirth)).append("\n");
    sb.append("    controllingPersonCityOfBirth: ").append(toIndentedString(controllingPersonCityOfBirth)).append("\n");
    sb.append("    controllingPersonNationality: ").append(toIndentedString(controllingPersonNationality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerAccountRepNo");
    openapiFields.add("accountTypeId");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("middleName");
    openapiFields.add("lastNameMaternal");
    openapiFields.add("lastNamePaternal");
    openapiFields.add("nameTypeId");
    openapiFields.add("dob");
    openapiFields.add("streetAddress1");
    openapiFields.add("streetAddress2");
    openapiFields.add("streetAddress3");
    openapiFields.add("city");
    openapiFields.add("stateProvince");
    openapiFields.add("countryCode");
    openapiFields.add("zipPostalCode");
    openapiFields.add("taxId");
    openapiFields.add("controllingPersonType");
    openapiFields.add("controllingPersonStartDate");
    openapiFields.add("controllingPersonEndDate");
    openapiFields.add("controllingPersonCountryOfBirth");
    openapiFields.add("controllingPersonCityOfBirth");
    openapiFields.add("controllingPersonNationality");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerAccountRepresentative
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerAccountRepresentative.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerAccountRepresentative is not found in the empty JSON string", CustomerAccountRepresentative.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerAccountRepresentative.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerAccountRepresentative` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("middleName") != null && !jsonObj.get("middleName").isJsonNull()) && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if ((jsonObj.get("lastNameMaternal") != null && !jsonObj.get("lastNameMaternal").isJsonNull()) && !jsonObj.get("lastNameMaternal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastNameMaternal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastNameMaternal").toString()));
      }
      if ((jsonObj.get("lastNamePaternal") != null && !jsonObj.get("lastNamePaternal").isJsonNull()) && !jsonObj.get("lastNamePaternal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastNamePaternal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastNamePaternal").toString()));
      }
      if ((jsonObj.get("nameTypeId") != null && !jsonObj.get("nameTypeId").isJsonNull()) && !jsonObj.get("nameTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameTypeId").toString()));
      }
      if ((jsonObj.get("streetAddress1") != null && !jsonObj.get("streetAddress1").isJsonNull()) && !jsonObj.get("streetAddress1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress1").toString()));
      }
      if ((jsonObj.get("streetAddress2") != null && !jsonObj.get("streetAddress2").isJsonNull()) && !jsonObj.get("streetAddress2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress2").toString()));
      }
      if ((jsonObj.get("streetAddress3") != null && !jsonObj.get("streetAddress3").isJsonNull()) && !jsonObj.get("streetAddress3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress3").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("stateProvince") != null && !jsonObj.get("stateProvince").isJsonNull()) && !jsonObj.get("stateProvince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateProvince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateProvince").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("zipPostalCode") != null && !jsonObj.get("zipPostalCode").isJsonNull()) && !jsonObj.get("zipPostalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipPostalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipPostalCode").toString()));
      }
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      if ((jsonObj.get("controllingPersonType") != null && !jsonObj.get("controllingPersonType").isJsonNull()) && !jsonObj.get("controllingPersonType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controllingPersonType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controllingPersonType").toString()));
      }
      if ((jsonObj.get("controllingPersonCountryOfBirth") != null && !jsonObj.get("controllingPersonCountryOfBirth").isJsonNull()) && !jsonObj.get("controllingPersonCountryOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controllingPersonCountryOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controllingPersonCountryOfBirth").toString()));
      }
      if ((jsonObj.get("controllingPersonCityOfBirth") != null && !jsonObj.get("controllingPersonCityOfBirth").isJsonNull()) && !jsonObj.get("controllingPersonCityOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controllingPersonCityOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controllingPersonCityOfBirth").toString()));
      }
      if ((jsonObj.get("controllingPersonNationality") != null && !jsonObj.get("controllingPersonNationality").isJsonNull()) && !jsonObj.get("controllingPersonNationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controllingPersonNationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controllingPersonNationality").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerAccountRepresentative.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerAccountRepresentative' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerAccountRepresentative> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerAccountRepresentative.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerAccountRepresentative>() {
           @Override
           public void write(JsonWriter out, CustomerAccountRepresentative value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerAccountRepresentative read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerAccountRepresentative given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerAccountRepresentative
  * @throws IOException if the JSON string is invalid with respect to CustomerAccountRepresentative
  */
  public static CustomerAccountRepresentative fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerAccountRepresentative.class);
  }

 /**
  * Convert an instance of CustomerAccountRepresentative to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

