/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

/**
 * Receiver Model Schema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class CustomerReceiverInfo {
  public static final String SERIALIZED_NAME_RECEIVER_SEQ = "receiverSeq";
  @SerializedName(SERIALIZED_NAME_RECEIVER_SEQ)
  private Long receiverSeq;

  public static final String SERIALIZED_NAME_RECEIVER_NO = "receiverNo";
  @SerializedName(SERIALIZED_NAME_RECEIVER_NO)
  private Integer receiverNo;

  public static final String SERIALIZED_NAME_RECEIVER_TYPE_ID = "receiverTypeId";
  @SerializedName(SERIALIZED_NAME_RECEIVER_TYPE_ID)
  private String receiverTypeId;

  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "addressType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private String addressType;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<Address> address;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_MOBILE_ISD_CODE = "mobileIsdCode";
  @SerializedName(SERIALIZED_NAME_MOBILE_ISD_CODE)
  private String mobileIsdCode;

  public static final String SERIALIZED_NAME_MOBILE_PHONE_ISO2_CODE = "mobilePhoneIso2Code";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_ISO2_CODE)
  private String mobilePhoneIso2Code;

  public static final String SERIALIZED_NAME_MOBILE_PHONE_ISO3_CODE = "mobilePhoneIso3Code";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_ISO3_CODE)
  private String mobilePhoneIso3Code;

  public static final String SERIALIZED_NAME_MOBILE_PHONE = "mobilePhone";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE)
  private String mobilePhone;

  /**
   * Mobile Phone Number Verification Status * L – Fixed line (Verified as Landline) * M – Mobile (Verified as Mobile) * N – Invalid (Not a valid Phone or Mobile number) * P – Unknown * T – Tollfree  * R – Premium Rate * S – Shared Cost * V – VOIP  * A – Personal Number * B – Pager  * U – Universal Access Number * C – Voicemail  * D – Fixed line or Mobile (Null) 
   */
  @JsonAdapter(MobilePhoneVvStatusEnum.Adapter.class)
  public enum MobilePhoneVvStatusEnum {
    L("L"),
    
    M("M"),
    
    N("N"),
    
    P("P"),
    
    T("T"),
    
    R("R"),
    
    S("S"),
    
    V("V"),
    
    A("A"),
    
    B("B"),
    
    U("U"),
    
    C("C"),
    
    D("D");

    private String value;

    MobilePhoneVvStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MobilePhoneVvStatusEnum fromValue(String value) {
      for (MobilePhoneVvStatusEnum b : MobilePhoneVvStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MobilePhoneVvStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MobilePhoneVvStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MobilePhoneVvStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MobilePhoneVvStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MOBILE_PHONE_VV_STATUS = "mobilePhoneVvStatus";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_VV_STATUS)
  private MobilePhoneVvStatusEnum mobilePhoneVvStatus;

  public static final String SERIALIZED_NAME_MOBILE_PHONE_VV_STATUS_BY = "mobilePhoneVvStatusBy";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_VV_STATUS_BY)
  private String mobilePhoneVvStatusBy;

  public static final String SERIALIZED_NAME_MOBILE_PHONE_VV_DATE = "mobilePhoneVvDate";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_VV_DATE)
  private OffsetDateTime mobilePhoneVvDate;

  public static final String SERIALIZED_NAME_MOBILE_PHONE_CARRIER = "mobilePhoneCarrier";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_CARRIER)
  private String mobilePhoneCarrier;

  public static final String SERIALIZED_NAME_MOBILE_PHONE_REGION = "mobilePhoneRegion";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE_REGION)
  private String mobilePhoneRegion;

  public static final String SERIALIZED_NAME_UAB = "uab";
  @SerializedName(SERIALIZED_NAME_UAB)
  private String uab;

  public static final String SERIALIZED_NAME_UAB_IN = "uabIn";
  @SerializedName(SERIALIZED_NAME_UAB_IN)
  private String uabIn;

  public static final String SERIALIZED_NAME_ATTRIBUTE = "attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  private String attribute;

  public static final String SERIALIZED_NAME_RATE_MOD_ID = "rateModId";
  @SerializedName(SERIALIZED_NAME_RATE_MOD_ID)
  private String rateModId;

  public static final String SERIALIZED_NAME_DELETED_CODE = "deletedCode";
  @SerializedName(SERIALIZED_NAME_DELETED_CODE)
  private String deletedCode;

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private Preferences preferences;

  public static final String SERIALIZED_NAME_ID_PROVIDED = "idProvided";
  @SerializedName(SERIALIZED_NAME_ID_PROVIDED)
  private String idProvided;

  public static final String SERIALIZED_NAME_NO_CHANGES = "noChanges";
  @SerializedName(SERIALIZED_NAME_NO_CHANGES)
  private Integer noChanges;

  public static final String SERIALIZED_NAME_COMMERCIAL_PAYEE_ID = "commercialPayeeId";
  @SerializedName(SERIALIZED_NAME_COMMERCIAL_PAYEE_ID)
  private String commercialPayeeId;

  public static final String SERIALIZED_NAME_DEBIT_ACCNT_NO = "debitAccntNo";
  @SerializedName(SERIALIZED_NAME_DEBIT_ACCNT_NO)
  private String debitAccntNo;

  public static final String SERIALIZED_NAME_RECEIVER_PIN = "receiverPin";
  @SerializedName(SERIALIZED_NAME_RECEIVER_PIN)
  private String receiverPin;

  public static final String SERIALIZED_NAME_REF_NUM = "refNum";
  @SerializedName(SERIALIZED_NAME_REF_NUM)
  private String refNum;

  public static final String SERIALIZED_NAME_ENROLLING_AGENT_IDC = "enrollingAgentIdc";
  @SerializedName(SERIALIZED_NAME_ENROLLING_AGENT_IDC)
  private String enrollingAgentIdc;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private String locked;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private OffsetDateTime expiryDate;

  public static final String SERIALIZED_NAME_ALT_CURRENCY_CODE = "altCurrencyCode";
  @SerializedName(SERIALIZED_NAME_ALT_CURRENCY_CODE)
  private String altCurrencyCode;

  public static final String SERIALIZED_NAME_ENROLL_FEE_AMOUNT = "enrollFeeAmount";
  @SerializedName(SERIALIZED_NAME_ENROLL_FEE_AMOUNT)
  private String enrollFeeAmount;

  public static final String SERIALIZED_NAME_FIRST_SEND_DATE = "firstSendDate";
  @SerializedName(SERIALIZED_NAME_FIRST_SEND_DATE)
  private OffsetDateTime firstSendDate;

  public static final String SERIALIZED_NAME_LAST_SEND_DATE = "lastSendDate";
  @SerializedName(SERIALIZED_NAME_LAST_SEND_DATE)
  private OffsetDateTime lastSendDate;

  public static final String SERIALIZED_NAME_EBLOB = "eblob";
  @SerializedName(SERIALIZED_NAME_EBLOB)
  private String eblob;

  public static final String SERIALIZED_NAME_CBLOB = "cblob";
  @SerializedName(SERIALIZED_NAME_CBLOB)
  private String cblob;

  public static final String SERIALIZED_NAME_SPECIAL_DATES = "specialDates";
  @SerializedName(SERIALIZED_NAME_SPECIAL_DATES)
  private List<SpecialDateAndAudit> specialDates;

  public static final String SERIALIZED_NAME_RELATIONSHIP_TYPE = "relationshipType";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_TYPE)
  private Integer relationshipType;

  public static final String SERIALIZED_NAME_QQC_SENDER_ACCT = "qqcSenderAcct";
  @SerializedName(SERIALIZED_NAME_QQC_SENDER_ACCT)
  private String qqcSenderAcct;

  public static final String SERIALIZED_NAME_D2B_ACCT_NUM = "d2bAcctNum";
  @SerializedName(SERIALIZED_NAME_D2B_ACCT_NUM)
  private String d2bAcctNum;

  public static final String SERIALIZED_NAME_MASKED_QQC_SENDER_ACCT = "maskedQqcSenderAcct";
  @SerializedName(SERIALIZED_NAME_MASKED_QQC_SENDER_ACCT)
  private String maskedQqcSenderAcct;

  public static final String SERIALIZED_NAME_CPC_COUNTRY_CODE = "cpcCountryCode";
  @SerializedName(SERIALIZED_NAME_CPC_COUNTRY_CODE)
  private String cpcCountryCode;

  public static final String SERIALIZED_NAME_ACTIVE_FLAG = "activeFlag";
  @SerializedName(SERIALIZED_NAME_ACTIVE_FLAG)
  private String activeFlag;

  public static final String SERIALIZED_NAME_REFERENCE_FOR_RECEIVER_TYPE_ID_OTHER = "referenceForReceiverTypeIdOther";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FOR_RECEIVER_TYPE_ID_OTHER)
  private String referenceForReceiverTypeIdOther;

  public static final String SERIALIZED_NAME_REFERENCE_FOR_NAME_TYPE_ID_OTHER = "referenceForNameTypeIdOther";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FOR_NAME_TYPE_ID_OTHER)
  private String referenceForNameTypeIdOther;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private String flags;

  public static final String SERIALIZED_NAME_FIRST_MTCN = "firstMtcn";
  @SerializedName(SERIALIZED_NAME_FIRST_MTCN)
  private String firstMtcn;

  public static final String SERIALIZED_NAME_LAST_MTCN = "lastMtcn";
  @SerializedName(SERIALIZED_NAME_LAST_MTCN)
  private String lastMtcn;

  public static final String SERIALIZED_NAME_RECEIVER_PCP = "receiverPcp";
  @SerializedName(SERIALIZED_NAME_RECEIVER_PCP)
  private String receiverPcp;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_RECEIVER_ID_NUMBER = "receiverIdNumber";
  @SerializedName(SERIALIZED_NAME_RECEIVER_ID_NUMBER)
  private String receiverIdNumber;

  public static final String SERIALIZED_NAME_COUNTRY_OF_BIRTH = "countryOfBirth";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OF_BIRTH)
  private String countryOfBirth;

  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_NAME = "accountHolderName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_NAME)
  private String accountHolderName;

  public static final String SERIALIZED_NAME_BANK_NAME = "bankName";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private String bankName;

  public static final String SERIALIZED_NAME_BANK_BRANCH_CODE = "bankBranchCode";
  @SerializedName(SERIALIZED_NAME_BANK_BRANCH_CODE)
  private String bankBranchCode;

  public static final String SERIALIZED_NAME_INSTITUTION_CODE = "institutionCode";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_CODE)
  private String institutionCode;

  public static final String SERIALIZED_NAME_CITY_BANK = "cityBank";
  @SerializedName(SERIALIZED_NAME_CITY_BANK)
  private String cityBank;

  public static final String SERIALIZED_NAME_COUNTRY_BANK = "countryBank";
  @SerializedName(SERIALIZED_NAME_COUNTRY_BANK)
  private String countryBank;

  public static final String SERIALIZED_NAME_PI_TYPE = "piType";
  @SerializedName(SERIALIZED_NAME_PI_TYPE)
  private Integer piType;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private String isActive;

  public static final String SERIALIZED_NAME_IS_MULTI_CURRENCY = "isMultiCurrency";
  @SerializedName(SERIALIZED_NAME_IS_MULTI_CURRENCY)
  private String isMultiCurrency;

  public static final String SERIALIZED_NAME_IS_CREDIT_ALLOWED = "isCreditAllowed";
  @SerializedName(SERIALIZED_NAME_IS_CREDIT_ALLOWED)
  private String isCreditAllowed;

  public static final String SERIALIZED_NAME_IS_DEBIT_ALLOWED = "isDebitAllowed";
  @SerializedName(SERIALIZED_NAME_IS_DEBIT_ALLOWED)
  private String isDebitAllowed;

  public static final String SERIALIZED_NAME_ENTITY_STATUS = "entityStatus";
  @SerializedName(SERIALIZED_NAME_ENTITY_STATUS)
  private Integer entityStatus;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_SWIFT_CODE = "swiftCode";
  @SerializedName(SERIALIZED_NAME_SWIFT_CODE)
  private String swiftCode;

  public static final String SERIALIZED_NAME_SORT_CODE = "sortCode";
  @SerializedName(SERIALIZED_NAME_SORT_CODE)
  private String sortCode;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routingNumber";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_PREFIX = "accountPrefix";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PREFIX)
  private String accountPrefix;

  public static final String SERIALIZED_NAME_ACCOUNT_SUFFIX = "accountSuffix";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SUFFIX)
  private String accountSuffix;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private String industry;

  public static final String SERIALIZED_NAME_RECEIVER_FINANCIAL_ID = "receiverFinancialId";
  @SerializedName(SERIALIZED_NAME_RECEIVER_FINANCIAL_ID)
  private String receiverFinancialId;

  public static final String SERIALIZED_NAME_BANK_LOCATION = "bankLocation";
  @SerializedName(SERIALIZED_NAME_BANK_LOCATION)
  private String bankLocation;

  public static final String SERIALIZED_NAME_ACCOUNT_SELECTED_TYPE = "accountSelectedType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SELECTED_TYPE)
  private String accountSelectedType;

  public static final String SERIALIZED_NAME_IS_CARD_TYPE_IDENTIFIED = "isCardTypeIdentified";
  @SerializedName(SERIALIZED_NAME_IS_CARD_TYPE_IDENTIFIED)
  private String isCardTypeIdentified;

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_CODE = "serviceProviderCode";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_CODE)
  private String serviceProviderCode;

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_NAME = "serviceProviderName";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_NAME)
  private String serviceProviderName;

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_PHONE = "serviceProviderPhone";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_PHONE)
  private String serviceProviderPhone;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_PROFILE_IMAGE_REF_NUMBER = "profileImageRefNumber";
  @SerializedName(SERIALIZED_NAME_PROFILE_IMAGE_REF_NUMBER)
  private String profileImageRefNumber;

  public static final String SERIALIZED_NAME_PAYOUT_METHOD = "payoutMethod";
  @SerializedName(SERIALIZED_NAME_PAYOUT_METHOD)
  private String payoutMethod;

  public static final String SERIALIZED_NAME_ID_CLEARING_MODE = "idClearingMode";
  @SerializedName(SERIALIZED_NAME_ID_CLEARING_MODE)
  private String idClearingMode;

  public static final String SERIALIZED_NAME_IS_RESIDENT = "isResident";
  @SerializedName(SERIALIZED_NAME_IS_RESIDENT)
  private String isResident;

  public static final String SERIALIZED_NAME_AUTO_TRANSFER_CONSENT = "autoTransferConsent";
  @SerializedName(SERIALIZED_NAME_AUTO_TRANSFER_CONSENT)
  private String autoTransferConsent;

  public static final String SERIALIZED_NAME_AUTO_TRANSFER_CONSENT_DATE = "autoTransferConsentDate";
  @SerializedName(SERIALIZED_NAME_AUTO_TRANSFER_CONSENT_DATE)
  private OffsetDateTime autoTransferConsentDate;

  public static final String SERIALIZED_NAME_CARD_TYPE = "cardType";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE)
  private String cardType;

  public CustomerReceiverInfo() {
  }

  public CustomerReceiverInfo receiverSeq(Long receiverSeq) {
    
    this.receiverSeq = receiverSeq;
    return this;
  }

   /**
   * This field indicates to return the customer&#39;s details and the receiver details for the given receiverSeq.
   * @return receiverSeq
  **/
  @javax.annotation.Nullable
  public Long getReceiverSeq() {
    return receiverSeq;
  }


  public void setReceiverSeq(Long receiverSeq) {
    this.receiverSeq = receiverSeq;
  }


  public CustomerReceiverInfo receiverNo(Integer receiverNo) {
    
    this.receiverNo = receiverNo;
    return this;
  }

   /**
   * Serial number of the Receiver.
   * @return receiverNo
  **/
  @javax.annotation.Nullable
  public Integer getReceiverNo() {
    return receiverNo;
  }


  public void setReceiverNo(Integer receiverNo) {
    this.receiverNo = receiverNo;
  }


  public CustomerReceiverInfo receiverTypeId(String receiverTypeId) {
    
    this.receiverTypeId = receiverTypeId;
    return this;
  }

   /**
   * Different types of Receivers * B - D2B Receivers (Bank Account Number of Receiver should be stored in d2bAcctNum) * C - D2C Receivers (Debit Card Number/Debit Card Token should be stored in d2bAcctNum) * D - Domestic Receivers (destination CPC code &#x3D; “USA”) * G - Mexican Receivers (destination CPC code &#x3D; “MEX”) * I - International Receivers (everything else) * L - Local Receiver (where Source and Destination CPC code is the same) * M - Mexican Receivers (destination CPC code &#x3D; “MXP”) * P - Prepaid Receiver (new value for UCD) * Q - Quick Collect Receivers * S - Swiftpay Receivers (currently includes Prepaid and Buy Phone Time also) * U - UPI Receiver (UPI ID should be stored in d2bAcctNum) * W - Wallet Receiver (Wallet Account Number should be stored in d2bAcctNum) * X - Buy Phone Time Receiver (new value for UCD) 
   * @return receiverTypeId
  **/
  @javax.annotation.Nullable
  public String getReceiverTypeId() {
    return receiverTypeId;
  }


  public void setReceiverTypeId(String receiverTypeId) {
    this.receiverTypeId = receiverTypeId;
  }


  public CustomerReceiverInfo addressType(String addressType) {
    
    this.addressType = addressType;
    return this;
  }

   /**
   * Type of Receiverr&#39;s Address (i.e. Primary Address or Secondary Address). * 1 - Primary * 2 - Secondary 
   * @return addressType
  **/
  @javax.annotation.Nullable
  public String getAddressType() {
    return addressType;
  }


  public void setAddressType(String addressType) {
    this.addressType = addressType;
  }


  public CustomerReceiverInfo address(List<Address> address) {
    
    this.address = address;
    return this;
  }

  public CustomerReceiverInfo addAddressItem(Address addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * Receiver&#39;s Address.
   * @return address
  **/
  @javax.annotation.Nullable
  public List<Address> getAddress() {
    return address;
  }


  public void setAddress(List<Address> address) {
    this.address = address;
  }


  public CustomerReceiverInfo email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Receivers&#39;s Email ID.
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public CustomerReceiverInfo mobileIsdCode(String mobileIsdCode) {
    
    this.mobileIsdCode = mobileIsdCode;
    return this;
  }

   /**
   * Receivers&#39;s International Dialing Code for Mobile. e.g. 1 for USA, 44 for UK, 91 for India, etc.
   * @return mobileIsdCode
  **/
  @javax.annotation.Nullable
  public String getMobileIsdCode() {
    return mobileIsdCode;
  }


  public void setMobileIsdCode(String mobileIsdCode) {
    this.mobileIsdCode = mobileIsdCode;
  }


  public CustomerReceiverInfo mobilePhoneIso2Code(String mobilePhoneIso2Code) {
    
    this.mobilePhoneIso2Code = mobilePhoneIso2Code;
    return this;
  }

   /**
   * Receiver&#39;s Mobile Phone Country Code in ISO2 format. e.g. AT,IN,US
   * @return mobilePhoneIso2Code
  **/
  @javax.annotation.Nullable
  public String getMobilePhoneIso2Code() {
    return mobilePhoneIso2Code;
  }


  public void setMobilePhoneIso2Code(String mobilePhoneIso2Code) {
    this.mobilePhoneIso2Code = mobilePhoneIso2Code;
  }


  public CustomerReceiverInfo mobilePhoneIso3Code(String mobilePhoneIso3Code) {
    
    this.mobilePhoneIso3Code = mobilePhoneIso3Code;
    return this;
  }

   /**
   * Receiver&#39;s Mobile Phone Country Code in ISO3 format. e.g. AUT,IND,USA
   * @return mobilePhoneIso3Code
  **/
  @javax.annotation.Nullable
  public String getMobilePhoneIso3Code() {
    return mobilePhoneIso3Code;
  }


  public void setMobilePhoneIso3Code(String mobilePhoneIso3Code) {
    this.mobilePhoneIso3Code = mobilePhoneIso3Code;
  }


  public CustomerReceiverInfo mobilePhone(String mobilePhone) {
    
    this.mobilePhone = mobilePhone;
    return this;
  }

   /**
   * Receivers&#39;s Mobile Number.
   * @return mobilePhone
  **/
  @javax.annotation.Nullable
  public String getMobilePhone() {
    return mobilePhone;
  }


  public void setMobilePhone(String mobilePhone) {
    this.mobilePhone = mobilePhone;
  }


  public CustomerReceiverInfo mobilePhoneVvStatus(MobilePhoneVvStatusEnum mobilePhoneVvStatus) {
    
    this.mobilePhoneVvStatus = mobilePhoneVvStatus;
    return this;
  }

   /**
   * Mobile Phone Number Verification Status * L – Fixed line (Verified as Landline) * M – Mobile (Verified as Mobile) * N – Invalid (Not a valid Phone or Mobile number) * P – Unknown * T – Tollfree  * R – Premium Rate * S – Shared Cost * V – VOIP  * A – Personal Number * B – Pager  * U – Universal Access Number * C – Voicemail  * D – Fixed line or Mobile (Null) 
   * @return mobilePhoneVvStatus
  **/
  @javax.annotation.Nullable
  public MobilePhoneVvStatusEnum getMobilePhoneVvStatus() {
    return mobilePhoneVvStatus;
  }


  public void setMobilePhoneVvStatus(MobilePhoneVvStatusEnum mobilePhoneVvStatus) {
    this.mobilePhoneVvStatus = mobilePhoneVvStatus;
  }


  public CustomerReceiverInfo mobilePhoneVvStatusBy(String mobilePhoneVvStatusBy) {
    
    this.mobilePhoneVvStatusBy = mobilePhoneVvStatusBy;
    return this;
  }

   /**
   * Application/System/End User which added/updated the MobilePhoneVVStatus.
   * @return mobilePhoneVvStatusBy
  **/
  @javax.annotation.Nullable
  public String getMobilePhoneVvStatusBy() {
    return mobilePhoneVvStatusBy;
  }


  public void setMobilePhoneVvStatusBy(String mobilePhoneVvStatusBy) {
    this.mobilePhoneVvStatusBy = mobilePhoneVvStatusBy;
  }


  public CustomerReceiverInfo mobilePhoneVvDate(OffsetDateTime mobilePhoneVvDate) {
    
    this.mobilePhoneVvDate = mobilePhoneVvDate;
    return this;
  }

   /**
   * Timestamp when the MobilePhoneVVStatus was added/updated.
   * @return mobilePhoneVvDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getMobilePhoneVvDate() {
    return mobilePhoneVvDate;
  }


  public void setMobilePhoneVvDate(OffsetDateTime mobilePhoneVvDate) {
    this.mobilePhoneVvDate = mobilePhoneVvDate;
  }


  public CustomerReceiverInfo mobilePhoneCarrier(String mobilePhoneCarrier) {
    
    this.mobilePhoneCarrier = mobilePhoneCarrier;
    return this;
  }

   /**
   * Carrier of the Receiver&#39;s Mobile Phone Number
   * @return mobilePhoneCarrier
  **/
  @javax.annotation.Nullable
  public String getMobilePhoneCarrier() {
    return mobilePhoneCarrier;
  }


  public void setMobilePhoneCarrier(String mobilePhoneCarrier) {
    this.mobilePhoneCarrier = mobilePhoneCarrier;
  }


  public CustomerReceiverInfo mobilePhoneRegion(String mobilePhoneRegion) {
    
    this.mobilePhoneRegion = mobilePhoneRegion;
    return this;
  }

   /**
   * Region of the Receiver&#39;s MObile Phone Number
   * @return mobilePhoneRegion
  **/
  @javax.annotation.Nullable
  public String getMobilePhoneRegion() {
    return mobilePhoneRegion;
  }


  public void setMobilePhoneRegion(String mobilePhoneRegion) {
    this.mobilePhoneRegion = mobilePhoneRegion;
  }


  public CustomerReceiverInfo uab(String uab) {
    
    this.uab = uab;
    return this;
  }

   /**
   * UAB (Universal Address Buffer) format of Address data which contains all the data found in the individual fields plus extra data.
   * @return uab
  **/
  @javax.annotation.Nullable
  public String getUab() {
    return uab;
  }


  public void setUab(String uab) {
    this.uab = uab;
  }


  public CustomerReceiverInfo uabIn(String uabIn) {
    
    this.uabIn = uabIn;
    return this;
  }

   /**
   * UAB (Universal Address Buffer) format of Address data for instant notification purposes.
   * @return uabIn
  **/
  @javax.annotation.Nullable
  public String getUabIn() {
    return uabIn;
  }


  public void setUabIn(String uabIn) {
    this.uabIn = uabIn;
  }


  public CustomerReceiverInfo attribute(String attribute) {
    
    this.attribute = attribute;
    return this;
  }

   /**
   * This field could contain Delivery Service Code and is ONLY for Mexican Receivers. Tandem sends this field value to POS.
   * @return attribute
  **/
  @javax.annotation.Nullable
  public String getAttribute() {
    return attribute;
  }


  public void setAttribute(String attribute) {
    this.attribute = attribute;
  }


  public CustomerReceiverInfo rateModId(String rateModId) {
    
    this.rateModId = rateModId;
    return this;
  }

   /**
   * This field could be used to provide discount on commercial transactions.
   * @return rateModId
  **/
  @javax.annotation.Nullable
  public String getRateModId() {
    return rateModId;
  }


  public void setRateModId(String rateModId) {
    this.rateModId = rateModId;
  }


  public CustomerReceiverInfo deletedCode(String deletedCode) {
    
    this.deletedCode = deletedCode;
    return this;
  }

   /**
   * Deletion Code indicating the reason if a Receiver has been logically deleted. * D – Direct Mail Correspondence Returned. * W – Do not wish to be a loyalty card member Or blank. * F -  * X - Reason that a Receiver has been logically deleted. 
   * @return deletedCode
  **/
  @javax.annotation.Nullable
  public String getDeletedCode() {
    return deletedCode;
  }


  public void setDeletedCode(String deletedCode) {
    this.deletedCode = deletedCode;
  }


  public CustomerReceiverInfo preferences(Preferences preferences) {
    
    this.preferences = preferences;
    return this;
  }

   /**
   * Get preferences
   * @return preferences
  **/
  @javax.annotation.Nullable
  public Preferences getPreferences() {
    return preferences;
  }


  public void setPreferences(Preferences preferences) {
    this.preferences = preferences;
  }


  public CustomerReceiverInfo idProvided(String idProvided) {
    
    this.idProvided = idProvided;
    return this;
  }

   /**
   * This is an Enrollment question - Y / N.
   * @return idProvided
  **/
  @javax.annotation.Nullable
  public String getIdProvided() {
    return idProvided;
  }


  public void setIdProvided(String idProvided) {
    this.idProvided = idProvided;
  }


  public CustomerReceiverInfo noChanges(Integer noChanges) {
    
    this.noChanges = noChanges;
    return this;
  }

   /**
   * This field indicates the number of updates to the Receiver&#39;s Address and used to prevent display of Receiver(s) at POS.
   * @return noChanges
  **/
  @javax.annotation.Nullable
  public Integer getNoChanges() {
    return noChanges;
  }


  public void setNoChanges(Integer noChanges) {
    this.noChanges = noChanges;
  }


  public CustomerReceiverInfo commercialPayeeId(String commercialPayeeId) {
    
    this.commercialPayeeId = commercialPayeeId;
    return this;
  }

   /**
   * This field indicates Payee Identification Number and would be present for Commercial Receivers only.
   * @return commercialPayeeId
  **/
  @javax.annotation.Nullable
  public String getCommercialPayeeId() {
    return commercialPayeeId;
  }


  public void setCommercialPayeeId(String commercialPayeeId) {
    this.commercialPayeeId = commercialPayeeId;
  }


  public CustomerReceiverInfo debitAccntNo(String debitAccntNo) {
    
    this.debitAccntNo = debitAccntNo;
    return this;
  }

   /**
   * Customer&#39;s Debit Account Number and would be present for Commercial Receivers only.
   * @return debitAccntNo
  **/
  @javax.annotation.Nullable
  public String getDebitAccntNo() {
    return debitAccntNo;
  }


  public void setDebitAccntNo(String debitAccntNo) {
    this.debitAccntNo = debitAccntNo;
  }


  public CustomerReceiverInfo receiverPin(String receiverPin) {
    
    this.receiverPin = receiverPin;
    return this;
  }

   /**
   * Receiver&#39;s PIN and would be present for Commercial Receivers only.
   * @return receiverPin
  **/
  @javax.annotation.Nullable
  public String getReceiverPin() {
    return receiverPin;
  }


  public void setReceiverPin(String receiverPin) {
    this.receiverPin = receiverPin;
  }


  public CustomerReceiverInfo refNum(String refNum) {
    
    this.refNum = refNum;
    return this;
  }

   /**
   * Receiver&#39;s Reference Number and would be present for Commercial Receivers only.
   * @return refNum
  **/
  @javax.annotation.Nullable
  public String getRefNum() {
    return refNum;
  }


  public void setRefNum(String refNum) {
    this.refNum = refNum;
  }


  public CustomerReceiverInfo enrollingAgentIdc(String enrollingAgentIdc) {
    
    this.enrollingAgentIdc = enrollingAgentIdc;
    return this;
  }

   /**
   * Agent ID where the Receiver was added.
   * @return enrollingAgentIdc
  **/
  @javax.annotation.Nullable
  public String getEnrollingAgentIdc() {
    return enrollingAgentIdc;
  }


  public void setEnrollingAgentIdc(String enrollingAgentIdc) {
    this.enrollingAgentIdc = enrollingAgentIdc;
  }


  public CustomerReceiverInfo locked(String locked) {
    
    this.locked = locked;
    return this;
  }

   /**
   * This field indicates locked records to prevent from being changed at POS. If locked, records can only be modified at CSC.
   * @return locked
  **/
  @javax.annotation.Nullable
  public String getLocked() {
    return locked;
  }


  public void setLocked(String locked) {
    this.locked = locked;
  }


  public CustomerReceiverInfo expiryDate(OffsetDateTime expiryDate) {
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Expiry date of the Card.
   * @return expiryDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(OffsetDateTime expiryDate) {
    this.expiryDate = expiryDate;
  }


  public CustomerReceiverInfo altCurrencyCode(String altCurrencyCode) {
    
    this.altCurrencyCode = altCurrencyCode;
    return this;
  }

   /**
   * Western Union CPC code. (Alternate CPC Country Code)
   * @return altCurrencyCode
  **/
  @javax.annotation.Nullable
  public String getAltCurrencyCode() {
    return altCurrencyCode;
  }


  public void setAltCurrencyCode(String altCurrencyCode) {
    this.altCurrencyCode = altCurrencyCode;
  }


  public CustomerReceiverInfo enrollFeeAmount(String enrollFeeAmount) {
    
    this.enrollFeeAmount = enrollFeeAmount;
    return this;
  }

   /**
   * Fee charged by the agent for Enrollment.
   * @return enrollFeeAmount
  **/
  @javax.annotation.Nullable
  public String getEnrollFeeAmount() {
    return enrollFeeAmount;
  }


  public void setEnrollFeeAmount(String enrollFeeAmount) {
    this.enrollFeeAmount = enrollFeeAmount;
  }


  public CustomerReceiverInfo firstSendDate(OffsetDateTime firstSendDate) {
    
    this.firstSendDate = firstSendDate;
    return this;
  }

   /**
   * Timestamp when First Money Transfer was done.
   * @return firstSendDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getFirstSendDate() {
    return firstSendDate;
  }


  public void setFirstSendDate(OffsetDateTime firstSendDate) {
    this.firstSendDate = firstSendDate;
  }


  public CustomerReceiverInfo lastSendDate(OffsetDateTime lastSendDate) {
    
    this.lastSendDate = lastSendDate;
    return this;
  }

   /**
   * Timestamp when Last Money Transfer was done.
   * @return lastSendDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastSendDate() {
    return lastSendDate;
  }


  public void setLastSendDate(OffsetDateTime lastSendDate) {
    this.lastSendDate = lastSendDate;
  }


  public CustomerReceiverInfo eblob(String eblob) {
    
    this.eblob = eblob;
    return this;
  }

   /**
   * EBLOB is an universal-style buffer containing multiple data elements. e.g. TAX_ID, SNDR_ACCT_NUM_C, D2B_ACCT_NUM_C, ALTERNATE_SEARCH_ID etc.
   * @return eblob
  **/
  @javax.annotation.Nullable
  public String getEblob() {
    return eblob;
  }


  public void setEblob(String eblob) {
    this.eblob = eblob;
  }


  public CustomerReceiverInfo cblob(String cblob) {
    
    this.cblob = cblob;
    return this;
  }

   /**
   * CBLOB is an universal-style buffer containing multiple data elements. e.g. REF_NUM_C, LAST_SEND_AMOUNT, DELIVERY_SERVICE_CODE, DESTINATION_CPC_CODE, SENDER_ACCOUNT_NUMBER etc.
   * @return cblob
  **/
  @javax.annotation.Nullable
  public String getCblob() {
    return cblob;
  }


  public void setCblob(String cblob) {
    this.cblob = cblob;
  }


  public CustomerReceiverInfo specialDates(List<SpecialDateAndAudit> specialDates) {
    
    this.specialDates = specialDates;
    return this;
  }

  public CustomerReceiverInfo addSpecialDatesItem(SpecialDateAndAudit specialDatesItem) {
    if (this.specialDates == null) {
      this.specialDates = new ArrayList<>();
    }
    this.specialDates.add(specialDatesItem);
    return this;
  }

   /**
   * Special Dates for Receiver information. It could be a notable date.
   * @return specialDates
  **/
  @javax.annotation.Nullable
  public List<SpecialDateAndAudit> getSpecialDates() {
    return specialDates;
  }


  public void setSpecialDates(List<SpecialDateAndAudit> specialDates) {
    this.specialDates = specialDates;
  }


  public CustomerReceiverInfo relationshipType(Integer relationshipType) {
    
    this.relationshipType = relationshipType;
    return this;
  }

   /**
   * Receiver&#39;s Relationship with the Customer. * 1-FATHER * 2-MOTHER * 3-SISTER * 4-BROTHER * 5-AUNT * 6-UNCLE * 7-COUSIN * 8-NIECE * 9-NEPHEW * 10-GRANDFATHER * 11-GRANDMOTHER * 12-SON * 13-DAUGHTER * 14-GRANDSON * 15-GRANDDAUGHTER * 16-FRIEND * 17-PROFESSIONAL * 18-SPOUSE * 19-FAMILY * 20-TRADE/BUSINESSPARTNER * 21-EMPLOYEE/EMPLOYER * 22-DONOR/RECEIVER OF CH * 23-PURCHASER/SELLER * 24-NO RELATIONSHIP 
   * @return relationshipType
  **/
  @javax.annotation.Nullable
  public Integer getRelationshipType() {
    return relationshipType;
  }


  public void setRelationshipType(Integer relationshipType) {
    this.relationshipType = relationshipType;
  }


  public CustomerReceiverInfo qqcSenderAcct(String qqcSenderAcct) {
    
    this.qqcSenderAcct = qqcSenderAcct;
    return this;
  }

   /**
   * Quick Collect Account Number of Customer if the receiver type is Q.
   * @return qqcSenderAcct
  **/
  @javax.annotation.Nullable
  public String getQqcSenderAcct() {
    return qqcSenderAcct;
  }


  public void setQqcSenderAcct(String qqcSenderAcct) {
    this.qqcSenderAcct = qqcSenderAcct;
  }


  public CustomerReceiverInfo d2bAcctNum(String d2bAcctNum) {
    
    this.d2bAcctNum = d2bAcctNum;
    return this;
  }

   /**
   * Direct to Bank Account Number if the receiver type is B.
   * @return d2bAcctNum
  **/
  @javax.annotation.Nullable
  public String getD2bAcctNum() {
    return d2bAcctNum;
  }


  public void setD2bAcctNum(String d2bAcctNum) {
    this.d2bAcctNum = d2bAcctNum;
  }


  public CustomerReceiverInfo maskedQqcSenderAcct(String maskedQqcSenderAcct) {
    
    this.maskedQqcSenderAcct = maskedQqcSenderAcct;
    return this;
  }

   /**
   * Masked Data for Quick Collect Account Number from the Client Systems.
   * @return maskedQqcSenderAcct
  **/
  @javax.annotation.Nullable
  public String getMaskedQqcSenderAcct() {
    return maskedQqcSenderAcct;
  }


  public void setMaskedQqcSenderAcct(String maskedQqcSenderAcct) {
    this.maskedQqcSenderAcct = maskedQqcSenderAcct;
  }


  public CustomerReceiverInfo cpcCountryCode(String cpcCountryCode) {
    
    this.cpcCountryCode = cpcCountryCode;
    return this;
  }

   /**
   * Receiver&#39;s CPC Country Code in ISO3 format.
   * @return cpcCountryCode
  **/
  @javax.annotation.Nullable
  public String getCpcCountryCode() {
    return cpcCountryCode;
  }


  public void setCpcCountryCode(String cpcCountryCode) {
    this.cpcCountryCode = cpcCountryCode;
  }


  public CustomerReceiverInfo activeFlag(String activeFlag) {
    
    this.activeFlag = activeFlag;
    return this;
  }

   /**
   * This field indicates if the Receiver is active or not - Y / N.
   * @return activeFlag
  **/
  @javax.annotation.Nullable
  public String getActiveFlag() {
    return activeFlag;
  }


  public void setActiveFlag(String activeFlag) {
    this.activeFlag = activeFlag;
  }


  public CustomerReceiverInfo referenceForReceiverTypeIdOther(String referenceForReceiverTypeIdOther) {
    
    this.referenceForReceiverTypeIdOther = referenceForReceiverTypeIdOther;
    return this;
  }

   /**
   * When the ReceiverTypeID (Other) is selected, Client needs to send the reference/actual ReceiverTypeID value in this element.
   * @return referenceForReceiverTypeIdOther
  **/
  @javax.annotation.Nullable
  public String getReferenceForReceiverTypeIdOther() {
    return referenceForReceiverTypeIdOther;
  }


  public void setReferenceForReceiverTypeIdOther(String referenceForReceiverTypeIdOther) {
    this.referenceForReceiverTypeIdOther = referenceForReceiverTypeIdOther;
  }


  public CustomerReceiverInfo referenceForNameTypeIdOther(String referenceForNameTypeIdOther) {
    
    this.referenceForNameTypeIdOther = referenceForNameTypeIdOther;
    return this;
  }

   /**
   * When the Receiver&#39;s NameTypeID (Other) is selected, Client needs to send the reference/actual NameTypeID value in this element.
   * @return referenceForNameTypeIdOther
  **/
  @javax.annotation.Nullable
  public String getReferenceForNameTypeIdOther() {
    return referenceForNameTypeIdOther;
  }


  public void setReferenceForNameTypeIdOther(String referenceForNameTypeIdOther) {
    this.referenceForNameTypeIdOther = referenceForNameTypeIdOther;
  }


  public CustomerReceiverInfo flags(String flags) {
    
    this.flags = flags;
    return this;
  }

   /**
   * This field contains 8, 1-byte flags. Support Preferences for Convenience.
   * @return flags
  **/
  @javax.annotation.Nullable
  public String getFlags() {
    return flags;
  }


  public void setFlags(String flags) {
    this.flags = flags;
  }


  public CustomerReceiverInfo firstMtcn(String firstMtcn) {
    
    this.firstMtcn = firstMtcn;
    return this;
  }

   /**
   * First MTCN.
   * @return firstMtcn
  **/
  @javax.annotation.Nullable
  public String getFirstMtcn() {
    return firstMtcn;
  }


  public void setFirstMtcn(String firstMtcn) {
    this.firstMtcn = firstMtcn;
  }


  public CustomerReceiverInfo lastMtcn(String lastMtcn) {
    
    this.lastMtcn = lastMtcn;
    return this;
  }

   /**
   * Last MTCN.
   * @return lastMtcn
  **/
  @javax.annotation.Nullable
  public String getLastMtcn() {
    return lastMtcn;
  }


  public void setLastMtcn(String lastMtcn) {
    this.lastMtcn = lastMtcn;
  }


  public CustomerReceiverInfo receiverPcp(String receiverPcp) {
    
    this.receiverPcp = receiverPcp;
    return this;
  }

   /**
   * Receiver&#39;s PCP.
   * @return receiverPcp
  **/
  @javax.annotation.Nullable
  public String getReceiverPcp() {
    return receiverPcp;
  }


  public void setReceiverPcp(String receiverPcp) {
    this.receiverPcp = receiverPcp;
  }


  public CustomerReceiverInfo nationality(String nationality) {
    
    this.nationality = nationality;
    return this;
  }

   /**
   * Receiver&#39;s nationality in ISO2 format. e.g. AT,IN,US.
   * @return nationality
  **/
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }


  public void setNationality(String nationality) {
    this.nationality = nationality;
  }


  public CustomerReceiverInfo receiverIdNumber(String receiverIdNumber) {
    
    this.receiverIdNumber = receiverIdNumber;
    return this;
  }

   /**
   * Receiver&#39;s Id Number.
   * @return receiverIdNumber
  **/
  @javax.annotation.Nullable
  public String getReceiverIdNumber() {
    return receiverIdNumber;
  }


  public void setReceiverIdNumber(String receiverIdNumber) {
    this.receiverIdNumber = receiverIdNumber;
  }


  public CustomerReceiverInfo countryOfBirth(String countryOfBirth) {
    
    this.countryOfBirth = countryOfBirth;
    return this;
  }

   /**
   * Receiver&#39;s Country Of Birth in ISO2 format. e.g. AT,IN,US
   * @return countryOfBirth
  **/
  @javax.annotation.Nullable
  public String getCountryOfBirth() {
    return countryOfBirth;
  }


  public void setCountryOfBirth(String countryOfBirth) {
    this.countryOfBirth = countryOfBirth;
  }


  public CustomerReceiverInfo accountHolderName(String accountHolderName) {
    
    this.accountHolderName = accountHolderName;
    return this;
  }

   /**
   * Bank Account Holder Name of the Receiver&#39;s Bank Account.
   * @return accountHolderName
  **/
  @javax.annotation.Nullable
  public String getAccountHolderName() {
    return accountHolderName;
  }


  public void setAccountHolderName(String accountHolderName) {
    this.accountHolderName = accountHolderName;
  }


  public CustomerReceiverInfo bankName(String bankName) {
    
    this.bankName = bankName;
    return this;
  }

   /**
   * Bank Name of the Receiver&#39;s Bank Account.
   * @return bankName
  **/
  @javax.annotation.Nullable
  public String getBankName() {
    return bankName;
  }


  public void setBankName(String bankName) {
    this.bankName = bankName;
  }


  public CustomerReceiverInfo bankBranchCode(String bankBranchCode) {
    
    this.bankBranchCode = bankBranchCode;
    return this;
  }

   /**
   * Bank Branch Code of the Receiver&#39;s Bank Account.
   * @return bankBranchCode
  **/
  @javax.annotation.Nullable
  public String getBankBranchCode() {
    return bankBranchCode;
  }


  public void setBankBranchCode(String bankBranchCode) {
    this.bankBranchCode = bankBranchCode;
  }


  public CustomerReceiverInfo institutionCode(String institutionCode) {
    
    this.institutionCode = institutionCode;
    return this;
  }

   /**
   * Institution/Sort Code of the Receiver&#39;s Bank Account or SWIFT code in case of IBAN.
   * @return institutionCode
  **/
  @javax.annotation.Nullable
  public String getInstitutionCode() {
    return institutionCode;
  }


  public void setInstitutionCode(String institutionCode) {
    this.institutionCode = institutionCode;
  }


  public CustomerReceiverInfo cityBank(String cityBank) {
    
    this.cityBank = cityBank;
    return this;
  }

   /**
   * City of the Receiver&#39;s Bank Account.
   * @return cityBank
  **/
  @javax.annotation.Nullable
  public String getCityBank() {
    return cityBank;
  }


  public void setCityBank(String cityBank) {
    this.cityBank = cityBank;
  }


  public CustomerReceiverInfo countryBank(String countryBank) {
    
    this.countryBank = countryBank;
    return this;
  }

   /**
   * Country Code of the Receiver&#39;s Bank Account in ISO2 format. e.g. AT,IN,US
   * @return countryBank
  **/
  @javax.annotation.Nullable
  public String getCountryBank() {
    return countryBank;
  }


  public void setCountryBank(String countryBank) {
    this.countryBank = countryBank;
  }


  public CustomerReceiverInfo piType(Integer piType) {
    
    this.piType = piType;
    return this;
  }

   /**
   * Receiver&#39;s PI (Payment Instrument) Type.
   * @return piType
  **/
  @javax.annotation.Nullable
  public Integer getPiType() {
    return piType;
  }


  public void setPiType(Integer piType) {
    this.piType = piType;
  }


  public CustomerReceiverInfo isActive(String isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * This field indicates whether the PI is/not active - Y / N.
   * @return isActive
  **/
  @javax.annotation.Nullable
  public String getIsActive() {
    return isActive;
  }


  public void setIsActive(String isActive) {
    this.isActive = isActive;
  }


  public CustomerReceiverInfo isMultiCurrency(String isMultiCurrency) {
    
    this.isMultiCurrency = isMultiCurrency;
    return this;
  }

   /**
   * This field indicates whether the PI supports/not Multi Currency - Y / N.
   * @return isMultiCurrency
  **/
  @javax.annotation.Nullable
  public String getIsMultiCurrency() {
    return isMultiCurrency;
  }


  public void setIsMultiCurrency(String isMultiCurrency) {
    this.isMultiCurrency = isMultiCurrency;
  }


  public CustomerReceiverInfo isCreditAllowed(String isCreditAllowed) {
    
    this.isCreditAllowed = isCreditAllowed;
    return this;
  }

   /**
   * This field indicates whether the Credit to the PI is allowed/not - Y / N.
   * @return isCreditAllowed
  **/
  @javax.annotation.Nullable
  public String getIsCreditAllowed() {
    return isCreditAllowed;
  }


  public void setIsCreditAllowed(String isCreditAllowed) {
    this.isCreditAllowed = isCreditAllowed;
  }


  public CustomerReceiverInfo isDebitAllowed(String isDebitAllowed) {
    
    this.isDebitAllowed = isDebitAllowed;
    return this;
  }

   /**
   * This field indicates whether the Debit to the PI is allowed/not allowed - Y / N.
   * @return isDebitAllowed
  **/
  @javax.annotation.Nullable
  public String getIsDebitAllowed() {
    return isDebitAllowed;
  }


  public void setIsDebitAllowed(String isDebitAllowed) {
    this.isDebitAllowed = isDebitAllowed;
  }


  public CustomerReceiverInfo entityStatus(Integer entityStatus) {
    
    this.entityStatus = entityStatus;
    return this;
  }

   /**
   * Current Status of the PI.
   * @return entityStatus
  **/
  @javax.annotation.Nullable
  public Integer getEntityStatus() {
    return entityStatus;
  }


  public void setEntityStatus(Integer entityStatus) {
    this.entityStatus = entityStatus;
  }


  public CustomerReceiverInfo reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * Receiver&#39;s Additional Bank Details Reason.
   * @return reason
  **/
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public CustomerReceiverInfo swiftCode(String swiftCode) {
    
    this.swiftCode = swiftCode;
    return this;
  }

   /**
   * Receiver&#39;s Additional Bank Details Swift Code.
   * @return swiftCode
  **/
  @javax.annotation.Nullable
  public String getSwiftCode() {
    return swiftCode;
  }


  public void setSwiftCode(String swiftCode) {
    this.swiftCode = swiftCode;
  }


  public CustomerReceiverInfo sortCode(String sortCode) {
    
    this.sortCode = sortCode;
    return this;
  }

   /**
   * Receiver&#39;s Additional Bank Details Sort Code.
   * @return sortCode
  **/
  @javax.annotation.Nullable
  public String getSortCode() {
    return sortCode;
  }


  public void setSortCode(String sortCode) {
    this.sortCode = sortCode;
  }


  public CustomerReceiverInfo routingNumber(String routingNumber) {
    
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * Receiver&#39;s Additional Bank Details Routing Number.
   * @return routingNumber
  **/
  @javax.annotation.Nullable
  public String getRoutingNumber() {
    return routingNumber;
  }


  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }


  public CustomerReceiverInfo accountPrefix(String accountPrefix) {
    
    this.accountPrefix = accountPrefix;
    return this;
  }

   /**
   * Receiver&#39;s Additional Bank Details Account Prefix.
   * @return accountPrefix
  **/
  @javax.annotation.Nullable
  public String getAccountPrefix() {
    return accountPrefix;
  }


  public void setAccountPrefix(String accountPrefix) {
    this.accountPrefix = accountPrefix;
  }


  public CustomerReceiverInfo accountSuffix(String accountSuffix) {
    
    this.accountSuffix = accountSuffix;
    return this;
  }

   /**
   * Receiver&#39;s Additional Bank Details Account Suffix.
   * @return accountSuffix
  **/
  @javax.annotation.Nullable
  public String getAccountSuffix() {
    return accountSuffix;
  }


  public void setAccountSuffix(String accountSuffix) {
    this.accountSuffix = accountSuffix;
  }


  public CustomerReceiverInfo accountType(String accountType) {
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Receiver&#39;s Additional Bank Details Account Type.
   * @return accountType
  **/
  @javax.annotation.Nullable
  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public CustomerReceiverInfo industry(String industry) {
    
    this.industry = industry;
    return this;
  }

   /**
   * Receiver&#39;s Industry Type.
   * @return industry
  **/
  @javax.annotation.Nullable
  public String getIndustry() {
    return industry;
  }


  public void setIndustry(String industry) {
    this.industry = industry;
  }


  public CustomerReceiverInfo receiverFinancialId(String receiverFinancialId) {
    
    this.receiverFinancialId = receiverFinancialId;
    return this;
  }

   /**
   * Receiver&#39;s Bank Account in other country.
   * @return receiverFinancialId
  **/
  @javax.annotation.Nullable
  public String getReceiverFinancialId() {
    return receiverFinancialId;
  }


  public void setReceiverFinancialId(String receiverFinancialId) {
    this.receiverFinancialId = receiverFinancialId;
  }


  public CustomerReceiverInfo bankLocation(String bankLocation) {
    
    this.bankLocation = bankLocation;
    return this;
  }

   /**
   * Receiver&#39;s Bank Location.
   * @return bankLocation
  **/
  @javax.annotation.Nullable
  public String getBankLocation() {
    return bankLocation;
  }


  public void setBankLocation(String bankLocation) {
    this.bankLocation = bankLocation;
  }


  public CustomerReceiverInfo accountSelectedType(String accountSelectedType) {
    
    this.accountSelectedType = accountSelectedType;
    return this;
  }

   /**
   * Selected Account Type.
   * @return accountSelectedType
  **/
  @javax.annotation.Nullable
  public String getAccountSelectedType() {
    return accountSelectedType;
  }


  public void setAccountSelectedType(String accountSelectedType) {
    this.accountSelectedType = accountSelectedType;
  }


  public CustomerReceiverInfo isCardTypeIdentified(String isCardTypeIdentified) {
    
    this.isCardTypeIdentified = isCardTypeIdentified;
    return this;
  }

   /**
   * This field indicates if the Receiver&#39;s Card Type is/is not identified.
   * @return isCardTypeIdentified
  **/
  @javax.annotation.Nullable
  public String getIsCardTypeIdentified() {
    return isCardTypeIdentified;
  }


  public void setIsCardTypeIdentified(String isCardTypeIdentified) {
    this.isCardTypeIdentified = isCardTypeIdentified;
  }


  public CustomerReceiverInfo serviceProviderCode(String serviceProviderCode) {
    
    this.serviceProviderCode = serviceProviderCode;
    return this;
  }

   /**
   * Service Provider Code.
   * @return serviceProviderCode
  **/
  @javax.annotation.Nullable
  public String getServiceProviderCode() {
    return serviceProviderCode;
  }


  public void setServiceProviderCode(String serviceProviderCode) {
    this.serviceProviderCode = serviceProviderCode;
  }


  public CustomerReceiverInfo serviceProviderName(String serviceProviderName) {
    
    this.serviceProviderName = serviceProviderName;
    return this;
  }

   /**
   * Service Provider Name.
   * @return serviceProviderName
  **/
  @javax.annotation.Nullable
  public String getServiceProviderName() {
    return serviceProviderName;
  }


  public void setServiceProviderName(String serviceProviderName) {
    this.serviceProviderName = serviceProviderName;
  }


  public CustomerReceiverInfo serviceProviderPhone(String serviceProviderPhone) {
    
    this.serviceProviderPhone = serviceProviderPhone;
    return this;
  }

   /**
   * Service Provider Phone Number.
   * @return serviceProviderPhone
  **/
  @javax.annotation.Nullable
  public String getServiceProviderPhone() {
    return serviceProviderPhone;
  }


  public void setServiceProviderPhone(String serviceProviderPhone) {
    this.serviceProviderPhone = serviceProviderPhone;
  }


  public CustomerReceiverInfo network(String network) {
    
    this.network = network;
    return this;
  }

   /**
   * Receiver&#39;s Card Type. eg. Visa, Master Card etc.
   * @return network
  **/
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }


  public void setNetwork(String network) {
    this.network = network;
  }


  public CustomerReceiverInfo profileImageRefNumber(String profileImageRefNumber) {
    
    this.profileImageRefNumber = profileImageRefNumber;
    return this;
  }

   /**
   * DMS Reference Number of Receiver&#39;s Profile Image.
   * @return profileImageRefNumber
  **/
  @javax.annotation.Nullable
  public String getProfileImageRefNumber() {
    return profileImageRefNumber;
  }


  public void setProfileImageRefNumber(String profileImageRefNumber) {
    this.profileImageRefNumber = profileImageRefNumber;
  }


  public CustomerReceiverInfo payoutMethod(String payoutMethod) {
    
    this.payoutMethod = payoutMethod;
    return this;
  }

   /**
   * Payout Methods for SEPA, ABMT, WU+ etc.
   * @return payoutMethod
  **/
  @javax.annotation.Nullable
  public String getPayoutMethod() {
    return payoutMethod;
  }


  public void setPayoutMethod(String payoutMethod) {
    this.payoutMethod = payoutMethod;
  }


  public CustomerReceiverInfo idClearingMode(String idClearingMode) {
    
    this.idClearingMode = idClearingMode;
    return this;
  }

   /**
   * Clearing Mode for Payment Instruments.
   * @return idClearingMode
  **/
  @javax.annotation.Nullable
  public String getIdClearingMode() {
    return idClearingMode;
  }


  public void setIdClearingMode(String idClearingMode) {
    this.idClearingMode = idClearingMode;
  }


  public CustomerReceiverInfo isResident(String isResident) {
    
    this.isResident = isResident;
    return this;
  }

   /**
   * This field indicates if Receiver is/not a Resident of the Address Country.
   * @return isResident
  **/
  @javax.annotation.Nullable
  public String getIsResident() {
    return isResident;
  }


  public void setIsResident(String isResident) {
    this.isResident = isResident;
  }


  public CustomerReceiverInfo autoTransferConsent(String autoTransferConsent) {
    
    this.autoTransferConsent = autoTransferConsent;
    return this;
  }

   /**
   * Customer&#39;s Consent for Automatic (Recurring transfer) to receiver.
   * @return autoTransferConsent
  **/
  @javax.annotation.Nullable
  public String getAutoTransferConsent() {
    return autoTransferConsent;
  }


  public void setAutoTransferConsent(String autoTransferConsent) {
    this.autoTransferConsent = autoTransferConsent;
  }


  public CustomerReceiverInfo autoTransferConsentDate(OffsetDateTime autoTransferConsentDate) {
    
    this.autoTransferConsentDate = autoTransferConsentDate;
    return this;
  }

   /**
   * Timestamp when Customer&#39;s Consent for Automatic (Recurring transfer) to receiver was added/updated.
   * @return autoTransferConsentDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAutoTransferConsentDate() {
    return autoTransferConsentDate;
  }


  public void setAutoTransferConsentDate(OffsetDateTime autoTransferConsentDate) {
    this.autoTransferConsentDate = autoTransferConsentDate;
  }


  public CustomerReceiverInfo cardType(String cardType) {
    
    this.cardType = cardType;
    return this;
  }

   /**
   * Card Type
   * @return cardType
  **/
  @javax.annotation.Nullable
  public String getCardType() {
    return cardType;
  }


  public void setCardType(String cardType) {
    this.cardType = cardType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerReceiverInfo customerReceiverInfo = (CustomerReceiverInfo) o;
    return Objects.equals(this.receiverSeq, customerReceiverInfo.receiverSeq) &&
        Objects.equals(this.receiverNo, customerReceiverInfo.receiverNo) &&
        Objects.equals(this.receiverTypeId, customerReceiverInfo.receiverTypeId) &&
        Objects.equals(this.addressType, customerReceiverInfo.addressType) &&
        Objects.equals(this.address, customerReceiverInfo.address) &&
        Objects.equals(this.email, customerReceiverInfo.email) &&
        Objects.equals(this.mobileIsdCode, customerReceiverInfo.mobileIsdCode) &&
        Objects.equals(this.mobilePhoneIso2Code, customerReceiverInfo.mobilePhoneIso2Code) &&
        Objects.equals(this.mobilePhoneIso3Code, customerReceiverInfo.mobilePhoneIso3Code) &&
        Objects.equals(this.mobilePhone, customerReceiverInfo.mobilePhone) &&
        Objects.equals(this.mobilePhoneVvStatus, customerReceiverInfo.mobilePhoneVvStatus) &&
        Objects.equals(this.mobilePhoneVvStatusBy, customerReceiverInfo.mobilePhoneVvStatusBy) &&
        Objects.equals(this.mobilePhoneVvDate, customerReceiverInfo.mobilePhoneVvDate) &&
        Objects.equals(this.mobilePhoneCarrier, customerReceiverInfo.mobilePhoneCarrier) &&
        Objects.equals(this.mobilePhoneRegion, customerReceiverInfo.mobilePhoneRegion) &&
        Objects.equals(this.uab, customerReceiverInfo.uab) &&
        Objects.equals(this.uabIn, customerReceiverInfo.uabIn) &&
        Objects.equals(this.attribute, customerReceiverInfo.attribute) &&
        Objects.equals(this.rateModId, customerReceiverInfo.rateModId) &&
        Objects.equals(this.deletedCode, customerReceiverInfo.deletedCode) &&
        Objects.equals(this.preferences, customerReceiverInfo.preferences) &&
        Objects.equals(this.idProvided, customerReceiverInfo.idProvided) &&
        Objects.equals(this.noChanges, customerReceiverInfo.noChanges) &&
        Objects.equals(this.commercialPayeeId, customerReceiverInfo.commercialPayeeId) &&
        Objects.equals(this.debitAccntNo, customerReceiverInfo.debitAccntNo) &&
        Objects.equals(this.receiverPin, customerReceiverInfo.receiverPin) &&
        Objects.equals(this.refNum, customerReceiverInfo.refNum) &&
        Objects.equals(this.enrollingAgentIdc, customerReceiverInfo.enrollingAgentIdc) &&
        Objects.equals(this.locked, customerReceiverInfo.locked) &&
        Objects.equals(this.expiryDate, customerReceiverInfo.expiryDate) &&
        Objects.equals(this.altCurrencyCode, customerReceiverInfo.altCurrencyCode) &&
        Objects.equals(this.enrollFeeAmount, customerReceiverInfo.enrollFeeAmount) &&
        Objects.equals(this.firstSendDate, customerReceiverInfo.firstSendDate) &&
        Objects.equals(this.lastSendDate, customerReceiverInfo.lastSendDate) &&
        Objects.equals(this.eblob, customerReceiverInfo.eblob) &&
        Objects.equals(this.cblob, customerReceiverInfo.cblob) &&
        Objects.equals(this.specialDates, customerReceiverInfo.specialDates) &&
        Objects.equals(this.relationshipType, customerReceiverInfo.relationshipType) &&
        Objects.equals(this.qqcSenderAcct, customerReceiverInfo.qqcSenderAcct) &&
        Objects.equals(this.d2bAcctNum, customerReceiverInfo.d2bAcctNum) &&
        Objects.equals(this.maskedQqcSenderAcct, customerReceiverInfo.maskedQqcSenderAcct) &&
        Objects.equals(this.cpcCountryCode, customerReceiverInfo.cpcCountryCode) &&
        Objects.equals(this.activeFlag, customerReceiverInfo.activeFlag) &&
        Objects.equals(this.referenceForReceiverTypeIdOther, customerReceiverInfo.referenceForReceiverTypeIdOther) &&
        Objects.equals(this.referenceForNameTypeIdOther, customerReceiverInfo.referenceForNameTypeIdOther) &&
        Objects.equals(this.flags, customerReceiverInfo.flags) &&
        Objects.equals(this.firstMtcn, customerReceiverInfo.firstMtcn) &&
        Objects.equals(this.lastMtcn, customerReceiverInfo.lastMtcn) &&
        Objects.equals(this.receiverPcp, customerReceiverInfo.receiverPcp) &&
        Objects.equals(this.nationality, customerReceiverInfo.nationality) &&
        Objects.equals(this.receiverIdNumber, customerReceiverInfo.receiverIdNumber) &&
        Objects.equals(this.countryOfBirth, customerReceiverInfo.countryOfBirth) &&
        Objects.equals(this.accountHolderName, customerReceiverInfo.accountHolderName) &&
        Objects.equals(this.bankName, customerReceiverInfo.bankName) &&
        Objects.equals(this.bankBranchCode, customerReceiverInfo.bankBranchCode) &&
        Objects.equals(this.institutionCode, customerReceiverInfo.institutionCode) &&
        Objects.equals(this.cityBank, customerReceiverInfo.cityBank) &&
        Objects.equals(this.countryBank, customerReceiverInfo.countryBank) &&
        Objects.equals(this.piType, customerReceiverInfo.piType) &&
        Objects.equals(this.isActive, customerReceiverInfo.isActive) &&
        Objects.equals(this.isMultiCurrency, customerReceiverInfo.isMultiCurrency) &&
        Objects.equals(this.isCreditAllowed, customerReceiverInfo.isCreditAllowed) &&
        Objects.equals(this.isDebitAllowed, customerReceiverInfo.isDebitAllowed) &&
        Objects.equals(this.entityStatus, customerReceiverInfo.entityStatus) &&
        Objects.equals(this.reason, customerReceiverInfo.reason) &&
        Objects.equals(this.swiftCode, customerReceiverInfo.swiftCode) &&
        Objects.equals(this.sortCode, customerReceiverInfo.sortCode) &&
        Objects.equals(this.routingNumber, customerReceiverInfo.routingNumber) &&
        Objects.equals(this.accountPrefix, customerReceiverInfo.accountPrefix) &&
        Objects.equals(this.accountSuffix, customerReceiverInfo.accountSuffix) &&
        Objects.equals(this.accountType, customerReceiverInfo.accountType) &&
        Objects.equals(this.industry, customerReceiverInfo.industry) &&
        Objects.equals(this.receiverFinancialId, customerReceiverInfo.receiverFinancialId) &&
        Objects.equals(this.bankLocation, customerReceiverInfo.bankLocation) &&
        Objects.equals(this.accountSelectedType, customerReceiverInfo.accountSelectedType) &&
        Objects.equals(this.isCardTypeIdentified, customerReceiverInfo.isCardTypeIdentified) &&
        Objects.equals(this.serviceProviderCode, customerReceiverInfo.serviceProviderCode) &&
        Objects.equals(this.serviceProviderName, customerReceiverInfo.serviceProviderName) &&
        Objects.equals(this.serviceProviderPhone, customerReceiverInfo.serviceProviderPhone) &&
        Objects.equals(this.network, customerReceiverInfo.network) &&
        Objects.equals(this.profileImageRefNumber, customerReceiverInfo.profileImageRefNumber) &&
        Objects.equals(this.payoutMethod, customerReceiverInfo.payoutMethod) &&
        Objects.equals(this.idClearingMode, customerReceiverInfo.idClearingMode) &&
        Objects.equals(this.isResident, customerReceiverInfo.isResident) &&
        Objects.equals(this.autoTransferConsent, customerReceiverInfo.autoTransferConsent) &&
        Objects.equals(this.autoTransferConsentDate, customerReceiverInfo.autoTransferConsentDate) &&
        Objects.equals(this.cardType, customerReceiverInfo.cardType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(receiverSeq, receiverNo, receiverTypeId, addressType, address, email, mobileIsdCode, mobilePhoneIso2Code, mobilePhoneIso3Code, mobilePhone, mobilePhoneVvStatus, mobilePhoneVvStatusBy, mobilePhoneVvDate, mobilePhoneCarrier, mobilePhoneRegion, uab, uabIn, attribute, rateModId, deletedCode, preferences, idProvided, noChanges, commercialPayeeId, debitAccntNo, receiverPin, refNum, enrollingAgentIdc, locked, expiryDate, altCurrencyCode, enrollFeeAmount, firstSendDate, lastSendDate, eblob, cblob, specialDates, relationshipType, qqcSenderAcct, d2bAcctNum, maskedQqcSenderAcct, cpcCountryCode, activeFlag, referenceForReceiverTypeIdOther, referenceForNameTypeIdOther, flags, firstMtcn, lastMtcn, receiverPcp, nationality, receiverIdNumber, countryOfBirth, accountHolderName, bankName, bankBranchCode, institutionCode, cityBank, countryBank, piType, isActive, isMultiCurrency, isCreditAllowed, isDebitAllowed, entityStatus, reason, swiftCode, sortCode, routingNumber, accountPrefix, accountSuffix, accountType, industry, receiverFinancialId, bankLocation, accountSelectedType, isCardTypeIdentified, serviceProviderCode, serviceProviderName, serviceProviderPhone, network, profileImageRefNumber, payoutMethod, idClearingMode, isResident, autoTransferConsent, autoTransferConsentDate, cardType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerReceiverInfo {\n");
    sb.append("    receiverSeq: ").append(toIndentedString(receiverSeq)).append("\n");
    sb.append("    receiverNo: ").append(toIndentedString(receiverNo)).append("\n");
    sb.append("    receiverTypeId: ").append(toIndentedString(receiverTypeId)).append("\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    mobileIsdCode: ").append(toIndentedString(mobileIsdCode)).append("\n");
    sb.append("    mobilePhoneIso2Code: ").append(toIndentedString(mobilePhoneIso2Code)).append("\n");
    sb.append("    mobilePhoneIso3Code: ").append(toIndentedString(mobilePhoneIso3Code)).append("\n");
    sb.append("    mobilePhone: ").append(toIndentedString(mobilePhone)).append("\n");
    sb.append("    mobilePhoneVvStatus: ").append(toIndentedString(mobilePhoneVvStatus)).append("\n");
    sb.append("    mobilePhoneVvStatusBy: ").append(toIndentedString(mobilePhoneVvStatusBy)).append("\n");
    sb.append("    mobilePhoneVvDate: ").append(toIndentedString(mobilePhoneVvDate)).append("\n");
    sb.append("    mobilePhoneCarrier: ").append(toIndentedString(mobilePhoneCarrier)).append("\n");
    sb.append("    mobilePhoneRegion: ").append(toIndentedString(mobilePhoneRegion)).append("\n");
    sb.append("    uab: ").append(toIndentedString(uab)).append("\n");
    sb.append("    uabIn: ").append(toIndentedString(uabIn)).append("\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    rateModId: ").append(toIndentedString(rateModId)).append("\n");
    sb.append("    deletedCode: ").append(toIndentedString(deletedCode)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("    idProvided: ").append(toIndentedString(idProvided)).append("\n");
    sb.append("    noChanges: ").append(toIndentedString(noChanges)).append("\n");
    sb.append("    commercialPayeeId: ").append(toIndentedString(commercialPayeeId)).append("\n");
    sb.append("    debitAccntNo: ").append(toIndentedString(debitAccntNo)).append("\n");
    sb.append("    receiverPin: ").append(toIndentedString(receiverPin)).append("\n");
    sb.append("    refNum: ").append(toIndentedString(refNum)).append("\n");
    sb.append("    enrollingAgentIdc: ").append(toIndentedString(enrollingAgentIdc)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    altCurrencyCode: ").append(toIndentedString(altCurrencyCode)).append("\n");
    sb.append("    enrollFeeAmount: ").append(toIndentedString(enrollFeeAmount)).append("\n");
    sb.append("    firstSendDate: ").append(toIndentedString(firstSendDate)).append("\n");
    sb.append("    lastSendDate: ").append(toIndentedString(lastSendDate)).append("\n");
    sb.append("    eblob: ").append(toIndentedString(eblob)).append("\n");
    sb.append("    cblob: ").append(toIndentedString(cblob)).append("\n");
    sb.append("    specialDates: ").append(toIndentedString(specialDates)).append("\n");
    sb.append("    relationshipType: ").append(toIndentedString(relationshipType)).append("\n");
    sb.append("    qqcSenderAcct: ").append(toIndentedString(qqcSenderAcct)).append("\n");
    sb.append("    d2bAcctNum: ").append(toIndentedString(d2bAcctNum)).append("\n");
    sb.append("    maskedQqcSenderAcct: ").append(toIndentedString(maskedQqcSenderAcct)).append("\n");
    sb.append("    cpcCountryCode: ").append(toIndentedString(cpcCountryCode)).append("\n");
    sb.append("    activeFlag: ").append(toIndentedString(activeFlag)).append("\n");
    sb.append("    referenceForReceiverTypeIdOther: ").append(toIndentedString(referenceForReceiverTypeIdOther)).append("\n");
    sb.append("    referenceForNameTypeIdOther: ").append(toIndentedString(referenceForNameTypeIdOther)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    firstMtcn: ").append(toIndentedString(firstMtcn)).append("\n");
    sb.append("    lastMtcn: ").append(toIndentedString(lastMtcn)).append("\n");
    sb.append("    receiverPcp: ").append(toIndentedString(receiverPcp)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    receiverIdNumber: ").append(toIndentedString(receiverIdNumber)).append("\n");
    sb.append("    countryOfBirth: ").append(toIndentedString(countryOfBirth)).append("\n");
    sb.append("    accountHolderName: ").append(toIndentedString(accountHolderName)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    bankBranchCode: ").append(toIndentedString(bankBranchCode)).append("\n");
    sb.append("    institutionCode: ").append(toIndentedString(institutionCode)).append("\n");
    sb.append("    cityBank: ").append(toIndentedString(cityBank)).append("\n");
    sb.append("    countryBank: ").append(toIndentedString(countryBank)).append("\n");
    sb.append("    piType: ").append(toIndentedString(piType)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isMultiCurrency: ").append(toIndentedString(isMultiCurrency)).append("\n");
    sb.append("    isCreditAllowed: ").append(toIndentedString(isCreditAllowed)).append("\n");
    sb.append("    isDebitAllowed: ").append(toIndentedString(isDebitAllowed)).append("\n");
    sb.append("    entityStatus: ").append(toIndentedString(entityStatus)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    swiftCode: ").append(toIndentedString(swiftCode)).append("\n");
    sb.append("    sortCode: ").append(toIndentedString(sortCode)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    accountPrefix: ").append(toIndentedString(accountPrefix)).append("\n");
    sb.append("    accountSuffix: ").append(toIndentedString(accountSuffix)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    receiverFinancialId: ").append(toIndentedString(receiverFinancialId)).append("\n");
    sb.append("    bankLocation: ").append(toIndentedString(bankLocation)).append("\n");
    sb.append("    accountSelectedType: ").append(toIndentedString(accountSelectedType)).append("\n");
    sb.append("    isCardTypeIdentified: ").append(toIndentedString(isCardTypeIdentified)).append("\n");
    sb.append("    serviceProviderCode: ").append(toIndentedString(serviceProviderCode)).append("\n");
    sb.append("    serviceProviderName: ").append(toIndentedString(serviceProviderName)).append("\n");
    sb.append("    serviceProviderPhone: ").append(toIndentedString(serviceProviderPhone)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    profileImageRefNumber: ").append(toIndentedString(profileImageRefNumber)).append("\n");
    sb.append("    payoutMethod: ").append(toIndentedString(payoutMethod)).append("\n");
    sb.append("    idClearingMode: ").append(toIndentedString(idClearingMode)).append("\n");
    sb.append("    isResident: ").append(toIndentedString(isResident)).append("\n");
    sb.append("    autoTransferConsent: ").append(toIndentedString(autoTransferConsent)).append("\n");
    sb.append("    autoTransferConsentDate: ").append(toIndentedString(autoTransferConsentDate)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("receiverSeq");
    openapiFields.add("receiverNo");
    openapiFields.add("receiverTypeId");
    openapiFields.add("addressType");
    openapiFields.add("address");
    openapiFields.add("email");
    openapiFields.add("mobileIsdCode");
    openapiFields.add("mobilePhoneIso2Code");
    openapiFields.add("mobilePhoneIso3Code");
    openapiFields.add("mobilePhone");
    openapiFields.add("mobilePhoneVvStatus");
    openapiFields.add("mobilePhoneVvStatusBy");
    openapiFields.add("mobilePhoneVvDate");
    openapiFields.add("mobilePhoneCarrier");
    openapiFields.add("mobilePhoneRegion");
    openapiFields.add("uab");
    openapiFields.add("uabIn");
    openapiFields.add("attribute");
    openapiFields.add("rateModId");
    openapiFields.add("deletedCode");
    openapiFields.add("preferences");
    openapiFields.add("idProvided");
    openapiFields.add("noChanges");
    openapiFields.add("commercialPayeeId");
    openapiFields.add("debitAccntNo");
    openapiFields.add("receiverPin");
    openapiFields.add("refNum");
    openapiFields.add("enrollingAgentIdc");
    openapiFields.add("locked");
    openapiFields.add("expiryDate");
    openapiFields.add("altCurrencyCode");
    openapiFields.add("enrollFeeAmount");
    openapiFields.add("firstSendDate");
    openapiFields.add("lastSendDate");
    openapiFields.add("eblob");
    openapiFields.add("cblob");
    openapiFields.add("specialDates");
    openapiFields.add("relationshipType");
    openapiFields.add("qqcSenderAcct");
    openapiFields.add("d2bAcctNum");
    openapiFields.add("maskedQqcSenderAcct");
    openapiFields.add("cpcCountryCode");
    openapiFields.add("activeFlag");
    openapiFields.add("referenceForReceiverTypeIdOther");
    openapiFields.add("referenceForNameTypeIdOther");
    openapiFields.add("flags");
    openapiFields.add("firstMtcn");
    openapiFields.add("lastMtcn");
    openapiFields.add("receiverPcp");
    openapiFields.add("nationality");
    openapiFields.add("receiverIdNumber");
    openapiFields.add("countryOfBirth");
    openapiFields.add("accountHolderName");
    openapiFields.add("bankName");
    openapiFields.add("bankBranchCode");
    openapiFields.add("institutionCode");
    openapiFields.add("cityBank");
    openapiFields.add("countryBank");
    openapiFields.add("piType");
    openapiFields.add("isActive");
    openapiFields.add("isMultiCurrency");
    openapiFields.add("isCreditAllowed");
    openapiFields.add("isDebitAllowed");
    openapiFields.add("entityStatus");
    openapiFields.add("reason");
    openapiFields.add("swiftCode");
    openapiFields.add("sortCode");
    openapiFields.add("routingNumber");
    openapiFields.add("accountPrefix");
    openapiFields.add("accountSuffix");
    openapiFields.add("accountType");
    openapiFields.add("industry");
    openapiFields.add("receiverFinancialId");
    openapiFields.add("bankLocation");
    openapiFields.add("accountSelectedType");
    openapiFields.add("isCardTypeIdentified");
    openapiFields.add("serviceProviderCode");
    openapiFields.add("serviceProviderName");
    openapiFields.add("serviceProviderPhone");
    openapiFields.add("network");
    openapiFields.add("profileImageRefNumber");
    openapiFields.add("payoutMethod");
    openapiFields.add("idClearingMode");
    openapiFields.add("isResident");
    openapiFields.add("autoTransferConsent");
    openapiFields.add("autoTransferConsentDate");
    openapiFields.add("cardType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerReceiverInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerReceiverInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerReceiverInfo is not found in the empty JSON string", CustomerReceiverInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerReceiverInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerReceiverInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("receiverTypeId") != null && !jsonObj.get("receiverTypeId").isJsonNull()) && !jsonObj.get("receiverTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverTypeId").toString()));
      }
      if ((jsonObj.get("addressType") != null && !jsonObj.get("addressType").isJsonNull()) && !jsonObj.get("addressType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressType").toString()));
      }
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
          }

          // validate the optional field `address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            Address.validateJsonObject(jsonArrayaddress.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("mobileIsdCode") != null && !jsonObj.get("mobileIsdCode").isJsonNull()) && !jsonObj.get("mobileIsdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileIsdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileIsdCode").toString()));
      }
      if ((jsonObj.get("mobilePhoneIso2Code") != null && !jsonObj.get("mobilePhoneIso2Code").isJsonNull()) && !jsonObj.get("mobilePhoneIso2Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhoneIso2Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhoneIso2Code").toString()));
      }
      if ((jsonObj.get("mobilePhoneIso3Code") != null && !jsonObj.get("mobilePhoneIso3Code").isJsonNull()) && !jsonObj.get("mobilePhoneIso3Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhoneIso3Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhoneIso3Code").toString()));
      }
      if ((jsonObj.get("mobilePhone") != null && !jsonObj.get("mobilePhone").isJsonNull()) && !jsonObj.get("mobilePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhone").toString()));
      }
      if ((jsonObj.get("mobilePhoneVvStatus") != null && !jsonObj.get("mobilePhoneVvStatus").isJsonNull()) && !jsonObj.get("mobilePhoneVvStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhoneVvStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhoneVvStatus").toString()));
      }
      if ((jsonObj.get("mobilePhoneVvStatusBy") != null && !jsonObj.get("mobilePhoneVvStatusBy").isJsonNull()) && !jsonObj.get("mobilePhoneVvStatusBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhoneVvStatusBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhoneVvStatusBy").toString()));
      }
      if ((jsonObj.get("mobilePhoneCarrier") != null && !jsonObj.get("mobilePhoneCarrier").isJsonNull()) && !jsonObj.get("mobilePhoneCarrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhoneCarrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhoneCarrier").toString()));
      }
      if ((jsonObj.get("mobilePhoneRegion") != null && !jsonObj.get("mobilePhoneRegion").isJsonNull()) && !jsonObj.get("mobilePhoneRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhoneRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhoneRegion").toString()));
      }
      if ((jsonObj.get("uab") != null && !jsonObj.get("uab").isJsonNull()) && !jsonObj.get("uab").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uab` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uab").toString()));
      }
      if ((jsonObj.get("uabIn") != null && !jsonObj.get("uabIn").isJsonNull()) && !jsonObj.get("uabIn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uabIn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uabIn").toString()));
      }
      if ((jsonObj.get("attribute") != null && !jsonObj.get("attribute").isJsonNull()) && !jsonObj.get("attribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute").toString()));
      }
      if ((jsonObj.get("rateModId") != null && !jsonObj.get("rateModId").isJsonNull()) && !jsonObj.get("rateModId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateModId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateModId").toString()));
      }
      if ((jsonObj.get("deletedCode") != null && !jsonObj.get("deletedCode").isJsonNull()) && !jsonObj.get("deletedCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deletedCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deletedCode").toString()));
      }
      // validate the optional field `preferences`
      if (jsonObj.get("preferences") != null && !jsonObj.get("preferences").isJsonNull()) {
        Preferences.validateJsonObject(jsonObj.getAsJsonObject("preferences"));
      }
      if ((jsonObj.get("idProvided") != null && !jsonObj.get("idProvided").isJsonNull()) && !jsonObj.get("idProvided").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idProvided` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idProvided").toString()));
      }
      if ((jsonObj.get("commercialPayeeId") != null && !jsonObj.get("commercialPayeeId").isJsonNull()) && !jsonObj.get("commercialPayeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commercialPayeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commercialPayeeId").toString()));
      }
      if ((jsonObj.get("debitAccntNo") != null && !jsonObj.get("debitAccntNo").isJsonNull()) && !jsonObj.get("debitAccntNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debitAccntNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debitAccntNo").toString()));
      }
      if ((jsonObj.get("receiverPin") != null && !jsonObj.get("receiverPin").isJsonNull()) && !jsonObj.get("receiverPin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverPin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverPin").toString()));
      }
      if ((jsonObj.get("refNum") != null && !jsonObj.get("refNum").isJsonNull()) && !jsonObj.get("refNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refNum").toString()));
      }
      if ((jsonObj.get("enrollingAgentIdc") != null && !jsonObj.get("enrollingAgentIdc").isJsonNull()) && !jsonObj.get("enrollingAgentIdc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollingAgentIdc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollingAgentIdc").toString()));
      }
      if ((jsonObj.get("locked") != null && !jsonObj.get("locked").isJsonNull()) && !jsonObj.get("locked").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locked` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locked").toString()));
      }
      if ((jsonObj.get("altCurrencyCode") != null && !jsonObj.get("altCurrencyCode").isJsonNull()) && !jsonObj.get("altCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `altCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("altCurrencyCode").toString()));
      }
      if ((jsonObj.get("enrollFeeAmount") != null && !jsonObj.get("enrollFeeAmount").isJsonNull()) && !jsonObj.get("enrollFeeAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollFeeAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollFeeAmount").toString()));
      }
      if ((jsonObj.get("eblob") != null && !jsonObj.get("eblob").isJsonNull()) && !jsonObj.get("eblob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eblob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eblob").toString()));
      }
      if ((jsonObj.get("cblob") != null && !jsonObj.get("cblob").isJsonNull()) && !jsonObj.get("cblob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cblob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cblob").toString()));
      }
      if (jsonObj.get("specialDates") != null && !jsonObj.get("specialDates").isJsonNull()) {
        JsonArray jsonArrayspecialDates = jsonObj.getAsJsonArray("specialDates");
        if (jsonArrayspecialDates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("specialDates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `specialDates` to be an array in the JSON string but got `%s`", jsonObj.get("specialDates").toString()));
          }

          // validate the optional field `specialDates` (array)
          for (int i = 0; i < jsonArrayspecialDates.size(); i++) {
            SpecialDateAndAudit.validateJsonObject(jsonArrayspecialDates.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("qqcSenderAcct") != null && !jsonObj.get("qqcSenderAcct").isJsonNull()) && !jsonObj.get("qqcSenderAcct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qqcSenderAcct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qqcSenderAcct").toString()));
      }
      if ((jsonObj.get("d2bAcctNum") != null && !jsonObj.get("d2bAcctNum").isJsonNull()) && !jsonObj.get("d2bAcctNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `d2bAcctNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("d2bAcctNum").toString()));
      }
      if ((jsonObj.get("maskedQqcSenderAcct") != null && !jsonObj.get("maskedQqcSenderAcct").isJsonNull()) && !jsonObj.get("maskedQqcSenderAcct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedQqcSenderAcct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedQqcSenderAcct").toString()));
      }
      if ((jsonObj.get("cpcCountryCode") != null && !jsonObj.get("cpcCountryCode").isJsonNull()) && !jsonObj.get("cpcCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpcCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpcCountryCode").toString()));
      }
      if ((jsonObj.get("activeFlag") != null && !jsonObj.get("activeFlag").isJsonNull()) && !jsonObj.get("activeFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeFlag").toString()));
      }
      if ((jsonObj.get("referenceForReceiverTypeIdOther") != null && !jsonObj.get("referenceForReceiverTypeIdOther").isJsonNull()) && !jsonObj.get("referenceForReceiverTypeIdOther").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceForReceiverTypeIdOther` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceForReceiverTypeIdOther").toString()));
      }
      if ((jsonObj.get("referenceForNameTypeIdOther") != null && !jsonObj.get("referenceForNameTypeIdOther").isJsonNull()) && !jsonObj.get("referenceForNameTypeIdOther").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceForNameTypeIdOther` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceForNameTypeIdOther").toString()));
      }
      if ((jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull()) && !jsonObj.get("flags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if ((jsonObj.get("firstMtcn") != null && !jsonObj.get("firstMtcn").isJsonNull()) && !jsonObj.get("firstMtcn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstMtcn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstMtcn").toString()));
      }
      if ((jsonObj.get("lastMtcn") != null && !jsonObj.get("lastMtcn").isJsonNull()) && !jsonObj.get("lastMtcn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastMtcn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastMtcn").toString()));
      }
      if ((jsonObj.get("receiverPcp") != null && !jsonObj.get("receiverPcp").isJsonNull()) && !jsonObj.get("receiverPcp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverPcp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverPcp").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if ((jsonObj.get("receiverIdNumber") != null && !jsonObj.get("receiverIdNumber").isJsonNull()) && !jsonObj.get("receiverIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverIdNumber").toString()));
      }
      if ((jsonObj.get("countryOfBirth") != null && !jsonObj.get("countryOfBirth").isJsonNull()) && !jsonObj.get("countryOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryOfBirth").toString()));
      }
      if ((jsonObj.get("accountHolderName") != null && !jsonObj.get("accountHolderName").isJsonNull()) && !jsonObj.get("accountHolderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderName").toString()));
      }
      if ((jsonObj.get("bankName") != null && !jsonObj.get("bankName").isJsonNull()) && !jsonObj.get("bankName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankName").toString()));
      }
      if ((jsonObj.get("bankBranchCode") != null && !jsonObj.get("bankBranchCode").isJsonNull()) && !jsonObj.get("bankBranchCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankBranchCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankBranchCode").toString()));
      }
      if ((jsonObj.get("institutionCode") != null && !jsonObj.get("institutionCode").isJsonNull()) && !jsonObj.get("institutionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institutionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institutionCode").toString()));
      }
      if ((jsonObj.get("cityBank") != null && !jsonObj.get("cityBank").isJsonNull()) && !jsonObj.get("cityBank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cityBank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cityBank").toString()));
      }
      if ((jsonObj.get("countryBank") != null && !jsonObj.get("countryBank").isJsonNull()) && !jsonObj.get("countryBank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryBank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryBank").toString()));
      }
      if ((jsonObj.get("isActive") != null && !jsonObj.get("isActive").isJsonNull()) && !jsonObj.get("isActive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isActive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isActive").toString()));
      }
      if ((jsonObj.get("isMultiCurrency") != null && !jsonObj.get("isMultiCurrency").isJsonNull()) && !jsonObj.get("isMultiCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isMultiCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isMultiCurrency").toString()));
      }
      if ((jsonObj.get("isCreditAllowed") != null && !jsonObj.get("isCreditAllowed").isJsonNull()) && !jsonObj.get("isCreditAllowed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isCreditAllowed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isCreditAllowed").toString()));
      }
      if ((jsonObj.get("isDebitAllowed") != null && !jsonObj.get("isDebitAllowed").isJsonNull()) && !jsonObj.get("isDebitAllowed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isDebitAllowed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isDebitAllowed").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("swiftCode") != null && !jsonObj.get("swiftCode").isJsonNull()) && !jsonObj.get("swiftCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `swiftCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("swiftCode").toString()));
      }
      if ((jsonObj.get("sortCode") != null && !jsonObj.get("sortCode").isJsonNull()) && !jsonObj.get("sortCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortCode").toString()));
      }
      if ((jsonObj.get("routingNumber") != null && !jsonObj.get("routingNumber").isJsonNull()) && !jsonObj.get("routingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingNumber").toString()));
      }
      if ((jsonObj.get("accountPrefix") != null && !jsonObj.get("accountPrefix").isJsonNull()) && !jsonObj.get("accountPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountPrefix").toString()));
      }
      if ((jsonObj.get("accountSuffix") != null && !jsonObj.get("accountSuffix").isJsonNull()) && !jsonObj.get("accountSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountSuffix").toString()));
      }
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      if ((jsonObj.get("receiverFinancialId") != null && !jsonObj.get("receiverFinancialId").isJsonNull()) && !jsonObj.get("receiverFinancialId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverFinancialId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverFinancialId").toString()));
      }
      if ((jsonObj.get("bankLocation") != null && !jsonObj.get("bankLocation").isJsonNull()) && !jsonObj.get("bankLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankLocation").toString()));
      }
      if ((jsonObj.get("accountSelectedType") != null && !jsonObj.get("accountSelectedType").isJsonNull()) && !jsonObj.get("accountSelectedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountSelectedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountSelectedType").toString()));
      }
      if ((jsonObj.get("isCardTypeIdentified") != null && !jsonObj.get("isCardTypeIdentified").isJsonNull()) && !jsonObj.get("isCardTypeIdentified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isCardTypeIdentified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isCardTypeIdentified").toString()));
      }
      if ((jsonObj.get("serviceProviderCode") != null && !jsonObj.get("serviceProviderCode").isJsonNull()) && !jsonObj.get("serviceProviderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderCode").toString()));
      }
      if ((jsonObj.get("serviceProviderName") != null && !jsonObj.get("serviceProviderName").isJsonNull()) && !jsonObj.get("serviceProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderName").toString()));
      }
      if ((jsonObj.get("serviceProviderPhone") != null && !jsonObj.get("serviceProviderPhone").isJsonNull()) && !jsonObj.get("serviceProviderPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderPhone").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("profileImageRefNumber") != null && !jsonObj.get("profileImageRefNumber").isJsonNull()) && !jsonObj.get("profileImageRefNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileImageRefNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileImageRefNumber").toString()));
      }
      if ((jsonObj.get("payoutMethod") != null && !jsonObj.get("payoutMethod").isJsonNull()) && !jsonObj.get("payoutMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutMethod").toString()));
      }
      if ((jsonObj.get("idClearingMode") != null && !jsonObj.get("idClearingMode").isJsonNull()) && !jsonObj.get("idClearingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idClearingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idClearingMode").toString()));
      }
      if ((jsonObj.get("isResident") != null && !jsonObj.get("isResident").isJsonNull()) && !jsonObj.get("isResident").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isResident` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isResident").toString()));
      }
      if ((jsonObj.get("autoTransferConsent") != null && !jsonObj.get("autoTransferConsent").isJsonNull()) && !jsonObj.get("autoTransferConsent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoTransferConsent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoTransferConsent").toString()));
      }
      if ((jsonObj.get("cardType") != null && !jsonObj.get("cardType").isJsonNull()) && !jsonObj.get("cardType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerReceiverInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerReceiverInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerReceiverInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerReceiverInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerReceiverInfo>() {
           @Override
           public void write(JsonWriter out, CustomerReceiverInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerReceiverInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerReceiverInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerReceiverInfo
  * @throws IOException if the JSON string is invalid with respect to CustomerReceiverInfo
  */
  public static CustomerReceiverInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerReceiverInfo.class);
  }

 /**
  * Convert an instance of CustomerReceiverInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

