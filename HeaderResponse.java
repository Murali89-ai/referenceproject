/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Header
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class HeaderResponse {
  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_IP = "sourceIp";
  @SerializedName(SERIALIZED_NAME_SOURCE_IP)
  private String sourceIp;

  public static final String SERIALIZED_NAME_APP_NAME = "appName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_APP_VERSION = "appVersion";
  @SerializedName(SERIALIZED_NAME_APP_VERSION)
  private String appVersion;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_HOST_IP = "hostIp";
  @SerializedName(SERIALIZED_NAME_HOST_IP)
  private String hostIp;

  public static final String SERIALIZED_NAME_TIME_STAMP = "timeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private String timeStamp;

  public static final String SERIALIZED_NAME_TRASACTION_ID = "trasactionId";
  @SerializedName(SERIALIZED_NAME_TRASACTION_ID)
  private String trasactionId;

  public HeaderResponse() {
  }

  public HeaderResponse source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * Name of the Application/System from where the request is initiated.
   * @return source
  **/
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public HeaderResponse sourceIp(String sourceIp) {
    
    this.sourceIp = sourceIp;
    return this;
  }

   /**
   * IP Address of the Application/System from where the request is initiated.
   * @return sourceIp
  **/
  @javax.annotation.Nullable
  public String getSourceIp() {
    return sourceIp;
  }


  public void setSourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
  }


  public HeaderResponse appName(String appName) {
    
    this.appName = appName;
    return this;
  }

   /**
   * Name of the immediate Application/System invoking the UCD API.
   * @return appName
  **/
  @javax.annotation.Nullable
  public String getAppName() {
    return appName;
  }


  public void setAppName(String appName) {
    this.appName = appName;
  }


  public HeaderResponse appVersion(String appVersion) {
    
    this.appVersion = appVersion;
    return this;
  }

   /**
   * App Version of the immediate Application/System invoking the UCD API.
   * @return appVersion
  **/
  @javax.annotation.Nullable
  public String getAppVersion() {
    return appVersion;
  }


  public void setAppVersion(String appVersion) {
    this.appVersion = appVersion;
  }


  public HeaderResponse hostName(String hostName) {
    
    this.hostName = hostName;
    return this;
  }

   /**
   * Hostname of the immediate Application/System invoking the UCD API.
   * @return hostName
  **/
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }


  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public HeaderResponse hostIp(String hostIp) {
    
    this.hostIp = hostIp;
    return this;
  }

   /**
   * Host IP of the immediate Application/System invoking the UCD API.
   * @return hostIp
  **/
  @javax.annotation.Nullable
  public String getHostIp() {
    return hostIp;
  }


  public void setHostIp(String hostIp) {
    this.hostIp = hostIp;
  }


  public HeaderResponse timeStamp(String timeStamp) {
    
    this.timeStamp = timeStamp;
    return this;
  }

   /**
   * Timestamp from the Application/System from where the request is initiated.
   * @return timeStamp
  **/
  @javax.annotation.Nullable
  public String getTimeStamp() {
    return timeStamp;
  }


  public void setTimeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
  }


  public HeaderResponse trasactionId(String trasactionId) {
    
    this.trasactionId = trasactionId;
    return this;
  }

   /**
   * Unique Identifer from the Application/System from where the request is initiated to identify the request end to end.
   * @return trasactionId
  **/
  @javax.annotation.Nullable
  public String getTrasactionId() {
    return trasactionId;
  }


  public void setTrasactionId(String trasactionId) {
    this.trasactionId = trasactionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HeaderResponse header = (HeaderResponse) o;
    return Objects.equals(this.source, header.source) &&
        Objects.equals(this.sourceIp, header.sourceIp) &&
        Objects.equals(this.appName, header.appName) &&
        Objects.equals(this.appVersion, header.appVersion) &&
        Objects.equals(this.hostName, header.hostName) &&
        Objects.equals(this.hostIp, header.hostIp) &&
        Objects.equals(this.timeStamp, header.timeStamp) &&
        Objects.equals(this.trasactionId, header.trasactionId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(source, sourceIp, appName, appVersion, hostName, hostIp, timeStamp, trasactionId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Header {\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceIp: ").append(toIndentedString(sourceIp)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    hostIp: ").append(toIndentedString(hostIp)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    trasactionId: ").append(toIndentedString(trasactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("source");
    openapiFields.add("sourceIp");
    openapiFields.add("appName");
    openapiFields.add("appVersion");
    openapiFields.add("hostName");
    openapiFields.add("hostIp");
    openapiFields.add("timeStamp");
    openapiFields.add("trasactionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Header
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HeaderResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Header is not found in the empty JSON string", HeaderResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!HeaderResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Header` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("sourceIp") != null && !jsonObj.get("sourceIp").isJsonNull()) && !jsonObj.get("sourceIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceIp").toString()));
      }
      if ((jsonObj.get("appName") != null && !jsonObj.get("appName").isJsonNull()) && !jsonObj.get("appName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appName").toString()));
      }
      if ((jsonObj.get("appVersion") != null && !jsonObj.get("appVersion").isJsonNull()) && !jsonObj.get("appVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appVersion").toString()));
      }
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("hostIp") != null && !jsonObj.get("hostIp").isJsonNull()) && !jsonObj.get("hostIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostIp").toString()));
      }
      if ((jsonObj.get("trasactionId") != null && !jsonObj.get("trasactionId").isJsonNull()) && !jsonObj.get("trasactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trasactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trasactionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HeaderResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Header' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HeaderResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HeaderResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<HeaderResponse>() {
           @Override
           public void write(JsonWriter out, HeaderResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HeaderResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Header given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Header
  * @throws IOException if the JSON string is invalid with respect to Header
  */
  public static HeaderResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HeaderResponse.class);
  }

 /**
  * Convert an instance of Header to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

