/*
 * ucd_cregn_v1_api
 * Swagger documentation for UCD Customer Registration Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerregistration;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:58:59.701576900+05:30[Asia/Calcutta]")
public class Account {
  public static final String SERIALIZED_NAME_ACCOUNT_TYPE_ID = "accountTypeId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE_ID)
  private Integer accountTypeId;

  public static final String SERIALIZED_NAME_PCP_NUMBER = "pcpNumber";
  @SerializedName(SERIALIZED_NAME_PCP_NUMBER)
  private String pcpNumber;

  public static final String SERIALIZED_NAME_LEVEL_CODE = "levelCode";
  @SerializedName(SERIALIZED_NAME_LEVEL_CODE)
  private String levelCode;

  public static final String SERIALIZED_NAME_ACCOUNT_KEY = "accountKey";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_KEY)
  private String accountKey;

  public static final String SERIALIZED_NAME_NEW_ACCOUNT_KEY = "newAccountKey";
  @SerializedName(SERIALIZED_NAME_NEW_ACCOUNT_KEY)
  private String newAccountKey;

  public static final String SERIALIZED_NAME_LAST_ACCESSED_DATE = "lastAccessedDate";
  @SerializedName(SERIALIZED_NAME_LAST_ACCESSED_DATE)
  private OffsetDateTime lastAccessedDate;

  public static final String SERIALIZED_NAME_ACCOUNT_ACTIVE_FLAG = "accountActiveFlag";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ACTIVE_FLAG)
  private String accountActiveFlag;

  public static final String SERIALIZED_NAME_ACCOUNT_LOCKED = "accountLocked";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_LOCKED)
  private String accountLocked;

  public static final String SERIALIZED_NAME_ACCOUNT_LOCKED_DATE = "accountLockedDate";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_LOCKED_DATE)
  private OffsetDateTime accountLockedDate;

  public static final String SERIALIZED_NAME_ACCOUNT_EXPIRY_DATE = "accountExpiryDate";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_EXPIRY_DATE)
  private OffsetDateTime accountExpiryDate;

  public static final String SERIALIZED_NAME_REASON_FOR_DELETION = "reasonForDeletion";
  @SerializedName(SERIALIZED_NAME_REASON_FOR_DELETION)
  private String reasonForDeletion;

  public static final String SERIALIZED_NAME_APPROVAL_DATE = "approvalDate";
  @SerializedName(SERIALIZED_NAME_APPROVAL_DATE)
  private OffsetDateTime approvalDate;

  public static final String SERIALIZED_NAME_ACCOUNT_CLOSURE_REASON = "accountClosureReason";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CLOSURE_REASON)
  private String accountClosureReason;

  public static final String SERIALIZED_NAME_ACCOUNT_CLOSURE_BY = "accountClosureBy";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CLOSURE_BY)
  private String accountClosureBy;

  public static final String SERIALIZED_NAME_ACCOUNT_CLOSURE_DATE = "accountClosureDate";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CLOSURE_DATE)
  private OffsetDateTime accountClosureDate;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT_ID = "providerAccountId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT_ID)
  private String providerAccountId;

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT_NUMBER = "providerAccountNumber";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT_NUMBER)
  private String providerAccountNumber;

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT_HOLDER_ID = "providerAccountHolderId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT_HOLDER_ID)
  private String providerAccountHolderId;

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT_EXT_IDENTIFIER = "providerAccountExtIdentifier";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT_EXT_IDENTIFIER)
  private String providerAccountExtIdentifier;

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT_STATUS = "providerAccountStatus";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT_STATUS)
  private String providerAccountStatus;

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT_STATUS_DATE = "providerAccountStatusDate";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT_STATUS_DATE)
  private OffsetDateTime providerAccountStatusDate;

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT_REJ_REASON = "providerAccountRejReason";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT_REJ_REASON)
  private String providerAccountRejReason;

  public static final String SERIALIZED_NAME_PROVIDER_ACCOUNT_REJ_REASON_CODE = "providerAccountRejReasonCode";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ACCOUNT_REJ_REASON_CODE)
  private String providerAccountRejReasonCode;

  public static final String SERIALIZED_NAME_PROVIDER_TC_FLAG = "providerTcFlag";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TC_FLAG)
  private String providerTcFlag;

  public static final String SERIALIZED_NAME_PROVIDER_TC_FLAG_DATE = "providerTcFlagDate";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TC_FLAG_DATE)
  private OffsetDateTime providerTcFlagDate;

  public Account() {
  }

  public Account accountTypeId(Integer accountTypeId) {
    
    this.accountTypeId = accountTypeId;
    return this;
  }

   /**
   * Account Type ID values  * 0 - WU COM INTL R3 Nordic * 1 - WUCOM R3 Nordic * 2 - WUGOLD  * 3 - Loyalty  * 4 - TMT  * 5 - Prepaid Cardholder I2C  * 6 - Prepaid Cardholder FIS * 7 - Prepaid Purchaser  * 8 - MTX  * 9 - WUBS  * 10 - R2/R3/R4 SmartPhone  * 11 - R2/R3/R4 Web  * 12 - Banking * 13 - Guest US * 14 - Wallet * 15 - Correction Pay * 16 - Crypto * 17 - Guest EU * 18 - Business Relationship * 99 - OtherAccountTypeID 
   * @return accountTypeId
  **/
  @javax.annotation.Nonnull
  public Integer getAccountTypeId() {
    return accountTypeId;
  }


  public void setAccountTypeId(Integer accountTypeId) {
    this.accountTypeId = accountTypeId;
  }


  public Account pcpNumber(String pcpNumber) {
    
    this.pcpNumber = pcpNumber;
    return this;
  }

   /**
   * PCP Number is the Loyalty card number. This is to uniquely identify the Customer&#39;s account profiles. It is populated in most of the systems (except Prepaid FIS). PCP Number and Account Key should be same for PCUST/Loyalty request.
   * @return pcpNumber
  **/
  @javax.annotation.Nullable
  public String getPcpNumber() {
    return pcpNumber;
  }


  public void setPcpNumber(String pcpNumber) {
    this.pcpNumber = pcpNumber;
  }


  public Account levelCode(String levelCode) {
    
    this.levelCode = levelCode;
    return this;
  }

   /**
   * Loyalty level code to represent benefits at Customer Level. e.g. XXC, YYC, WU6, WU7 etc. Level code determines the reward benefits for the customers. WU7 or WU6 or XXC doesn&#39;t earn benefits. ZZ0, ZZ1 denotes - Convenience. SWP denotes - Swift Pay.
   * @return levelCode
  **/
  @javax.annotation.Nullable
  public String getLevelCode() {
    return levelCode;
  }


  public void setLevelCode(String levelCode) {
    this.levelCode = levelCode;
  }


  public Account accountKey(String accountKey) {
    
    this.accountKey = accountKey;
    return this;
  }

   /**
   * AccountTypeID and AccountKey combination is unique in database. This is a primary key at Account levels - WULogin ID - WUCOM, Gold Card - Loyalty, Unisys Customer ID - TMT, Prepaid Card Reference Number - Prepaid.
   * @return accountKey
  **/
  @javax.annotation.Nullable
  public String getAccountKey() {
    return accountKey;
  }


  public void setAccountKey(String accountKey) {
    this.accountKey = accountKey;
  }


  public Account newAccountKey(String newAccountKey) {
    
    this.newAccountKey = newAccountKey;
    return this;
  }

   /**
   * To update an Account Key in UCD, existing account key should be passed in accountKey field and new account key should be passed in this field.
   * @return newAccountKey
  **/
  @javax.annotation.Nullable
  public String getNewAccountKey() {
    return newAccountKey;
  }


  public void setNewAccountKey(String newAccountKey) {
    this.newAccountKey = newAccountKey;
  }


  public Account lastAccessedDate(OffsetDateTime lastAccessedDate) {
    
    this.lastAccessedDate = lastAccessedDate;
    return this;
  }

   /**
   * Timestamp when Customer&#39;s Account was accessed.
   * @return lastAccessedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastAccessedDate() {
    return lastAccessedDate;
  }


  public void setLastAccessedDate(OffsetDateTime lastAccessedDate) {
    this.lastAccessedDate = lastAccessedDate;
  }


  public Account accountActiveFlag(String accountActiveFlag) {
    
    this.accountActiveFlag = accountActiveFlag;
    return this;
  }

   /**
   * Flag that represents Customer Account status. For Customer Registration, default value will be Y * Y - Active * N - Inactive * P - Pending 
   * @return accountActiveFlag
  **/
  @javax.annotation.Nullable
  public String getAccountActiveFlag() {
    return accountActiveFlag;
  }


  public void setAccountActiveFlag(String accountActiveFlag) {
    this.accountActiveFlag = accountActiveFlag;
  }


  public Account accountLocked(String accountLocked) {
    
    this.accountLocked = accountLocked;
    return this;
  }

   /**
   * This field indicates whether the Customer&#39;s Account is/not locked.
   * @return accountLocked
  **/
  @javax.annotation.Nullable
  public String getAccountLocked() {
    return accountLocked;
  }


  public void setAccountLocked(String accountLocked) {
    this.accountLocked = accountLocked;
  }


  public Account accountLockedDate(OffsetDateTime accountLockedDate) {
    
    this.accountLockedDate = accountLockedDate;
    return this;
  }

   /**
   * Timestamp when the Customer&#39;s Account is/not locked.
   * @return accountLockedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAccountLockedDate() {
    return accountLockedDate;
  }


  public void setAccountLockedDate(OffsetDateTime accountLockedDate) {
    this.accountLockedDate = accountLockedDate;
  }


  public Account accountExpiryDate(OffsetDateTime accountExpiryDate) {
    
    this.accountExpiryDate = accountExpiryDate;
    return this;
  }

   /**
   * Timestamp when the Customer&#39;s Account would expire.
   * @return accountExpiryDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAccountExpiryDate() {
    return accountExpiryDate;
  }


  public void setAccountExpiryDate(OffsetDateTime accountExpiryDate) {
    this.accountExpiryDate = accountExpiryDate;
  }


  public Account reasonForDeletion(String reasonForDeletion) {
    
    this.reasonForDeletion = reasonForDeletion;
    return this;
  }

   /**
   * Reason stating why a customer has been logically deleted/ * D – Direct Mail Correspondence Returned * W – Do not wish to be a loyalty card member Or blank. * F -  * X - 
   * @return reasonForDeletion
  **/
  @javax.annotation.Nullable
  public String getReasonForDeletion() {
    return reasonForDeletion;
  }


  public void setReasonForDeletion(String reasonForDeletion) {
    this.reasonForDeletion = reasonForDeletion;
  }


  public Account approvalDate(OffsetDateTime approvalDate) {
    
    this.approvalDate = approvalDate;
    return this;
  }

   /**
   * Timestamp when the Customer&#39;s Acoount is approved.
   * @return approvalDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getApprovalDate() {
    return approvalDate;
  }


  public void setApprovalDate(OffsetDateTime approvalDate) {
    this.approvalDate = approvalDate;
  }


  public Account accountClosureReason(String accountClosureReason) {
    
    this.accountClosureReason = accountClosureReason;
    return this;
  }

   /**
   * Reason for Closure of Customer&#39;s Account. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return accountClosureReason
  **/
  @javax.annotation.Nullable
  public String getAccountClosureReason() {
    return accountClosureReason;
  }


  public void setAccountClosureReason(String accountClosureReason) {
    this.accountClosureReason = accountClosureReason;
  }


  public Account accountClosureBy(String accountClosureBy) {
    
    this.accountClosureBy = accountClosureBy;
    return this;
  }

   /**
   * Application/System/End User who closed the Customer&#39;s Account. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return accountClosureBy
  **/
  @javax.annotation.Nullable
  public String getAccountClosureBy() {
    return accountClosureBy;
  }


  public void setAccountClosureBy(String accountClosureBy) {
    this.accountClosureBy = accountClosureBy;
  }


  public Account accountClosureDate(OffsetDateTime accountClosureDate) {
    
    this.accountClosureDate = accountClosureDate;
    return this;
  }

   /**
   * Timestamp when the Customer&#39;s Account is closed. This field could be nullified by passing \&quot;1000-01-01T00:00:00.001-05:00\&quot;.
   * @return accountClosureDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAccountClosureDate() {
    return accountClosureDate;
  }


  public void setAccountClosureDate(OffsetDateTime accountClosureDate) {
    this.accountClosureDate = accountClosureDate;
  }


  public Account providerName(String providerName) {
    
    this.providerName = providerName;
    return this;
  }

   /**
   * Name of Provider, i.e., Flagship.
   * @return providerName
  **/
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }


  public void setProviderName(String providerName) {
    this.providerName = providerName;
  }


  public Account providerAccountId(String providerAccountId) {
    
    this.providerAccountId = providerAccountId;
    return this;
  }

   /**
   * Account Id of the Provider.
   * @return providerAccountId
  **/
  @javax.annotation.Nullable
  public String getProviderAccountId() {
    return providerAccountId;
  }


  public void setProviderAccountId(String providerAccountId) {
    this.providerAccountId = providerAccountId;
  }


  public Account providerAccountNumber(String providerAccountNumber) {
    
    this.providerAccountNumber = providerAccountNumber;
    return this;
  }

   /**
   * Account Number of the Provider.
   * @return providerAccountNumber
  **/
  @javax.annotation.Nullable
  public String getProviderAccountNumber() {
    return providerAccountNumber;
  }


  public void setProviderAccountNumber(String providerAccountNumber) {
    this.providerAccountNumber = providerAccountNumber;
  }


  public Account providerAccountHolderId(String providerAccountHolderId) {
    
    this.providerAccountHolderId = providerAccountHolderId;
    return this;
  }

   /**
   * Account Holder Id of the Provider.
   * @return providerAccountHolderId
  **/
  @javax.annotation.Nullable
  public String getProviderAccountHolderId() {
    return providerAccountHolderId;
  }


  public void setProviderAccountHolderId(String providerAccountHolderId) {
    this.providerAccountHolderId = providerAccountHolderId;
  }


  public Account providerAccountExtIdentifier(String providerAccountExtIdentifier) {
    
    this.providerAccountExtIdentifier = providerAccountExtIdentifier;
    return this;
  }

   /**
   * Account External Identifier of the Provider.
   * @return providerAccountExtIdentifier
  **/
  @javax.annotation.Nullable
  public String getProviderAccountExtIdentifier() {
    return providerAccountExtIdentifier;
  }


  public void setProviderAccountExtIdentifier(String providerAccountExtIdentifier) {
    this.providerAccountExtIdentifier = providerAccountExtIdentifier;
  }


  public Account providerAccountStatus(String providerAccountStatus) {
    
    this.providerAccountStatus = providerAccountStatus;
    return this;
  }

   /**
   * Account Status of the Provider. * C - CREATING * R - REGULAR * J - REJECTED * X - INACTIVE 
   * @return providerAccountStatus
  **/
  @javax.annotation.Nullable
  public String getProviderAccountStatus() {
    return providerAccountStatus;
  }


  public void setProviderAccountStatus(String providerAccountStatus) {
    this.providerAccountStatus = providerAccountStatus;
  }


  public Account providerAccountStatusDate(OffsetDateTime providerAccountStatusDate) {
    
    this.providerAccountStatusDate = providerAccountStatusDate;
    return this;
  }

   /**
   * Datetime of the Provider Account Status.
   * @return providerAccountStatusDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getProviderAccountStatusDate() {
    return providerAccountStatusDate;
  }


  public void setProviderAccountStatusDate(OffsetDateTime providerAccountStatusDate) {
    this.providerAccountStatusDate = providerAccountStatusDate;
  }


  public Account providerAccountRejReason(String providerAccountRejReason) {
    
    this.providerAccountRejReason = providerAccountRejReason;
    return this;
  }

   /**
   * Reason of Provider Account Rejection.
   * @return providerAccountRejReason
  **/
  @javax.annotation.Nullable
  public String getProviderAccountRejReason() {
    return providerAccountRejReason;
  }


  public void setProviderAccountRejReason(String providerAccountRejReason) {
    this.providerAccountRejReason = providerAccountRejReason;
  }


  public Account providerAccountRejReasonCode(String providerAccountRejReasonCode) {
    
    this.providerAccountRejReasonCode = providerAccountRejReasonCode;
    return this;
  }

   /**
   * Reason Code of Provider Account Rejection.
   * @return providerAccountRejReasonCode
  **/
  @javax.annotation.Nullable
  public String getProviderAccountRejReasonCode() {
    return providerAccountRejReasonCode;
  }


  public void setProviderAccountRejReasonCode(String providerAccountRejReasonCode) {
    this.providerAccountRejReasonCode = providerAccountRejReasonCode;
  }


  public Account providerTcFlag(String providerTcFlag) {
    
    this.providerTcFlag = providerTcFlag;
    return this;
  }

   /**
   * Provider Terms and Conditions Flag. This field could be nullified by passing \&quot;NUL\&quot;. * Y - Yes. Accepted T&amp;C. * N - No. Not Accepted T&amp;C. * Not Present / Blank. Not Accepted T&amp;C. 
   * @return providerTcFlag
  **/
  @javax.annotation.Nullable
  public String getProviderTcFlag() {
    return providerTcFlag;
  }


  public void setProviderTcFlag(String providerTcFlag) {
    this.providerTcFlag = providerTcFlag;
  }


  public Account providerTcFlagDate(OffsetDateTime providerTcFlagDate) {
    
    this.providerTcFlagDate = providerTcFlagDate;
    return this;
  }

   /**
   * Date of Updating Provider Terms and Condition Flag.
   * @return providerTcFlagDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getProviderTcFlagDate() {
    return providerTcFlagDate;
  }


  public void setProviderTcFlagDate(OffsetDateTime providerTcFlagDate) {
    this.providerTcFlagDate = providerTcFlagDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.accountTypeId, account.accountTypeId) &&
        Objects.equals(this.pcpNumber, account.pcpNumber) &&
        Objects.equals(this.levelCode, account.levelCode) &&
        Objects.equals(this.accountKey, account.accountKey) &&
        Objects.equals(this.newAccountKey, account.newAccountKey) &&
        Objects.equals(this.lastAccessedDate, account.lastAccessedDate) &&
        Objects.equals(this.accountActiveFlag, account.accountActiveFlag) &&
        Objects.equals(this.accountLocked, account.accountLocked) &&
        Objects.equals(this.accountLockedDate, account.accountLockedDate) &&
        Objects.equals(this.accountExpiryDate, account.accountExpiryDate) &&
        Objects.equals(this.reasonForDeletion, account.reasonForDeletion) &&
        Objects.equals(this.approvalDate, account.approvalDate) &&
        Objects.equals(this.accountClosureReason, account.accountClosureReason) &&
        Objects.equals(this.accountClosureBy, account.accountClosureBy) &&
        Objects.equals(this.accountClosureDate, account.accountClosureDate) &&
        Objects.equals(this.providerName, account.providerName) &&
        Objects.equals(this.providerAccountId, account.providerAccountId) &&
        Objects.equals(this.providerAccountNumber, account.providerAccountNumber) &&
        Objects.equals(this.providerAccountHolderId, account.providerAccountHolderId) &&
        Objects.equals(this.providerAccountExtIdentifier, account.providerAccountExtIdentifier) &&
        Objects.equals(this.providerAccountStatus, account.providerAccountStatus) &&
        Objects.equals(this.providerAccountStatusDate, account.providerAccountStatusDate) &&
        Objects.equals(this.providerAccountRejReason, account.providerAccountRejReason) &&
        Objects.equals(this.providerAccountRejReasonCode, account.providerAccountRejReasonCode) &&
        Objects.equals(this.providerTcFlag, account.providerTcFlag) &&
        Objects.equals(this.providerTcFlagDate, account.providerTcFlagDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountTypeId, pcpNumber, levelCode, accountKey, newAccountKey, lastAccessedDate, accountActiveFlag, accountLocked, accountLockedDate, accountExpiryDate, reasonForDeletion, approvalDate, accountClosureReason, accountClosureBy, accountClosureDate, providerName, providerAccountId, providerAccountNumber, providerAccountHolderId, providerAccountExtIdentifier, providerAccountStatus, providerAccountStatusDate, providerAccountRejReason, providerAccountRejReasonCode, providerTcFlag, providerTcFlagDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    accountTypeId: ").append(toIndentedString(accountTypeId)).append("\n");
    sb.append("    pcpNumber: ").append(toIndentedString(pcpNumber)).append("\n");
    sb.append("    levelCode: ").append(toIndentedString(levelCode)).append("\n");
    sb.append("    accountKey: ").append(toIndentedString(accountKey)).append("\n");
    sb.append("    newAccountKey: ").append(toIndentedString(newAccountKey)).append("\n");
    sb.append("    lastAccessedDate: ").append(toIndentedString(lastAccessedDate)).append("\n");
    sb.append("    accountActiveFlag: ").append(toIndentedString(accountActiveFlag)).append("\n");
    sb.append("    accountLocked: ").append(toIndentedString(accountLocked)).append("\n");
    sb.append("    accountLockedDate: ").append(toIndentedString(accountLockedDate)).append("\n");
    sb.append("    accountExpiryDate: ").append(toIndentedString(accountExpiryDate)).append("\n");
    sb.append("    reasonForDeletion: ").append(toIndentedString(reasonForDeletion)).append("\n");
    sb.append("    approvalDate: ").append(toIndentedString(approvalDate)).append("\n");
    sb.append("    accountClosureReason: ").append(toIndentedString(accountClosureReason)).append("\n");
    sb.append("    accountClosureBy: ").append(toIndentedString(accountClosureBy)).append("\n");
    sb.append("    accountClosureDate: ").append(toIndentedString(accountClosureDate)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    providerAccountId: ").append(toIndentedString(providerAccountId)).append("\n");
    sb.append("    providerAccountNumber: ").append(toIndentedString(providerAccountNumber)).append("\n");
    sb.append("    providerAccountHolderId: ").append(toIndentedString(providerAccountHolderId)).append("\n");
    sb.append("    providerAccountExtIdentifier: ").append(toIndentedString(providerAccountExtIdentifier)).append("\n");
    sb.append("    providerAccountStatus: ").append(toIndentedString(providerAccountStatus)).append("\n");
    sb.append("    providerAccountStatusDate: ").append(toIndentedString(providerAccountStatusDate)).append("\n");
    sb.append("    providerAccountRejReason: ").append(toIndentedString(providerAccountRejReason)).append("\n");
    sb.append("    providerAccountRejReasonCode: ").append(toIndentedString(providerAccountRejReasonCode)).append("\n");
    sb.append("    providerTcFlag: ").append(toIndentedString(providerTcFlag)).append("\n");
    sb.append("    providerTcFlagDate: ").append(toIndentedString(providerTcFlagDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountTypeId");
    openapiFields.add("pcpNumber");
    openapiFields.add("levelCode");
    openapiFields.add("accountKey");
    openapiFields.add("newAccountKey");
    openapiFields.add("lastAccessedDate");
    openapiFields.add("accountActiveFlag");
    openapiFields.add("accountLocked");
    openapiFields.add("accountLockedDate");
    openapiFields.add("accountExpiryDate");
    openapiFields.add("reasonForDeletion");
    openapiFields.add("approvalDate");
    openapiFields.add("accountClosureReason");
    openapiFields.add("accountClosureBy");
    openapiFields.add("accountClosureDate");
    openapiFields.add("providerName");
    openapiFields.add("providerAccountId");
    openapiFields.add("providerAccountNumber");
    openapiFields.add("providerAccountHolderId");
    openapiFields.add("providerAccountExtIdentifier");
    openapiFields.add("providerAccountStatus");
    openapiFields.add("providerAccountStatusDate");
    openapiFields.add("providerAccountRejReason");
    openapiFields.add("providerAccountRejReasonCode");
    openapiFields.add("providerTcFlag");
    openapiFields.add("providerTcFlagDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountTypeId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Account
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Account.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("pcpNumber") != null && !jsonObj.get("pcpNumber").isJsonNull()) && !jsonObj.get("pcpNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pcpNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pcpNumber").toString()));
      }
      if ((jsonObj.get("levelCode") != null && !jsonObj.get("levelCode").isJsonNull()) && !jsonObj.get("levelCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `levelCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("levelCode").toString()));
      }
      if ((jsonObj.get("accountKey") != null && !jsonObj.get("accountKey").isJsonNull()) && !jsonObj.get("accountKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountKey").toString()));
      }
      if ((jsonObj.get("newAccountKey") != null && !jsonObj.get("newAccountKey").isJsonNull()) && !jsonObj.get("newAccountKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newAccountKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newAccountKey").toString()));
      }
      if ((jsonObj.get("accountActiveFlag") != null && !jsonObj.get("accountActiveFlag").isJsonNull()) && !jsonObj.get("accountActiveFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountActiveFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountActiveFlag").toString()));
      }
      if ((jsonObj.get("accountLocked") != null && !jsonObj.get("accountLocked").isJsonNull()) && !jsonObj.get("accountLocked").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountLocked` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountLocked").toString()));
      }
      if ((jsonObj.get("reasonForDeletion") != null && !jsonObj.get("reasonForDeletion").isJsonNull()) && !jsonObj.get("reasonForDeletion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonForDeletion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonForDeletion").toString()));
      }
      if ((jsonObj.get("accountClosureReason") != null && !jsonObj.get("accountClosureReason").isJsonNull()) && !jsonObj.get("accountClosureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountClosureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountClosureReason").toString()));
      }
      if ((jsonObj.get("accountClosureBy") != null && !jsonObj.get("accountClosureBy").isJsonNull()) && !jsonObj.get("accountClosureBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountClosureBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountClosureBy").toString()));
      }
      if ((jsonObj.get("providerName") != null && !jsonObj.get("providerName").isJsonNull()) && !jsonObj.get("providerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
      if ((jsonObj.get("providerAccountId") != null && !jsonObj.get("providerAccountId").isJsonNull()) && !jsonObj.get("providerAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerAccountId").toString()));
      }
      if ((jsonObj.get("providerAccountNumber") != null && !jsonObj.get("providerAccountNumber").isJsonNull()) && !jsonObj.get("providerAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerAccountNumber").toString()));
      }
      if ((jsonObj.get("providerAccountHolderId") != null && !jsonObj.get("providerAccountHolderId").isJsonNull()) && !jsonObj.get("providerAccountHolderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerAccountHolderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerAccountHolderId").toString()));
      }
      if ((jsonObj.get("providerAccountExtIdentifier") != null && !jsonObj.get("providerAccountExtIdentifier").isJsonNull()) && !jsonObj.get("providerAccountExtIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerAccountExtIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerAccountExtIdentifier").toString()));
      }
      if ((jsonObj.get("providerAccountStatus") != null && !jsonObj.get("providerAccountStatus").isJsonNull()) && !jsonObj.get("providerAccountStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerAccountStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerAccountStatus").toString()));
      }
      if ((jsonObj.get("providerAccountRejReason") != null && !jsonObj.get("providerAccountRejReason").isJsonNull()) && !jsonObj.get("providerAccountRejReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerAccountRejReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerAccountRejReason").toString()));
      }
      if ((jsonObj.get("providerAccountRejReasonCode") != null && !jsonObj.get("providerAccountRejReasonCode").isJsonNull()) && !jsonObj.get("providerAccountRejReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerAccountRejReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerAccountRejReasonCode").toString()));
      }
      if ((jsonObj.get("providerTcFlag") != null && !jsonObj.get("providerTcFlag").isJsonNull()) && !jsonObj.get("providerTcFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerTcFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerTcFlag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Account given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Account
  * @throws IOException if the JSON string is invalid with respect to Account
  */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

 /**
  * Convert an instance of Account to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

