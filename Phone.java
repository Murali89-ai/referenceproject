/*
 * ucd_clkup_v1_api
 * Swagger documentation for UCD Customer Lookup Service API
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerlookup;

import com.google.gson.*;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.openapitools.jackson.nullable.JsonNullable;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * Phone
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:02:06.369160100+05:30[Asia/Calcutta]")
public class Phone {
  /**
   * Phone Type Values  * 1 Home * 2 Notification Mobile Phone * 3 Work * 4 Alternate Phone * 5 Other Mobile Number * 6 Fax * 99 PhoneTypeOther  **The below table defines the mapping between PhoneType &amp; PhoneSeq** | Phone Type       | Phone Seq   | Remarks                            | | ---------------- | ------------| -----------------------------------| | 1                | 1           | Primary Phone                      | | 2                | 4           | Mobile Phone                       | | 3                | 3           | Work Phone                         | | 4                | 2           | Alternate Phone                    | | 5                | 5           | Other Mobile Phone                 | | 6                | 6           | Fax                                | 
   */
  @JsonAdapter(PhoneTypeEnum.Adapter.class)
  public enum PhoneTypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_99(99);

    private Integer value;

    PhoneTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneTypeEnum fromValue(Integer value) {
      for (PhoneTypeEnum b : PhoneTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PhoneTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PHONE_TYPE = "phoneType";
  @SerializedName(SERIALIZED_NAME_PHONE_TYPE)
  private Integer phoneType;

  public static final String SERIALIZED_NAME_PHONE_SEQ = "phoneSeq";
  @SerializedName(SERIALIZED_NAME_PHONE_SEQ)
  private Integer phoneSeq;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_ISD_CODE = "isdCode";
  @SerializedName(SERIALIZED_NAME_ISD_CODE)
  private String isdCode;

  public static final String SERIALIZED_NAME_ISO2_CODE = "iso2Code";
  @SerializedName(SERIALIZED_NAME_ISO2_CODE)
  private String iso2Code;

  public static final String SERIALIZED_NAME_ISO3_CODE = "iso3Code";
  @SerializedName(SERIALIZED_NAME_ISO3_CODE)
  private String iso3Code;

  public static final String SERIALIZED_NAME_PHONE_EXTN = "phoneExtn";
  @SerializedName(SERIALIZED_NAME_PHONE_EXTN)
  private String phoneExtn;

  public static final String SERIALIZED_NAME_PHONE_PROVIDER = "phoneProvider";
  @SerializedName(SERIALIZED_NAME_PHONE_PROVIDER)
  private String phoneProvider;

  public static final String SERIALIZED_NAME_REFERENCE_FOR_PHONE_TYPE_I_D_OTHER = "referenceForPhoneTypeIDOther";
  @SerializedName(SERIALIZED_NAME_REFERENCE_FOR_PHONE_TYPE_I_D_OTHER)
  private String referenceForPhoneTypeIDOther;

  /**
   * Phone Number Verification Status * L – Fixed line (Verified as Landline) * M – Mobile (Verified as Mobile) * N – Invalid (Not a valid Phone or Mobile number) * P – Unknown * T – Tollfree  * R – Premium Rate * S – Shared Cost * V – VOIP  * A – Personal Number * B – Pager  * U – Universal Access Number * C – Voicemail  * D – Fixed line or Mobile (Null) 
   */
  @JsonAdapter(PhoneVvStatusEnum.Adapter.class)
  public enum PhoneVvStatusEnum {
    L("L"),
    
    M("M"),
    
    N("N"),
    
    P("P"),
    
    T("T"),
    
    R("R"),
    
    S("S"),
    
    V("V"),
    
    A("A"),
    
    B("B"),
    
    U("U"),
    
    C("C"),
    
    D("D");

    private String value;

    PhoneVvStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneVvStatusEnum fromValue(String value) {
      for (PhoneVvStatusEnum b : PhoneVvStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneVvStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneVvStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneVvStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneVvStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PHONE_VV_STATUS = "phoneVvStatus";
  @SerializedName(SERIALIZED_NAME_PHONE_VV_STATUS)
  private PhoneVvStatusEnum phoneVvStatus;

  public static final String SERIALIZED_NAME_PHONE_VV_STATUS_BY = "phoneVvStatusBy";
  @SerializedName(SERIALIZED_NAME_PHONE_VV_STATUS_BY)
  private String phoneVvStatusBy;

  public static final String SERIALIZED_NAME_PHONE_VV_DATE = "phoneVvDate";
  @SerializedName(SERIALIZED_NAME_PHONE_VV_DATE)
  private String phoneVvDate;

  /**
   * This field indicates if the Customer&#39;s Mobile Number is/not verified based on OTP . * Y - Verified * N - Not Verified 
   */
  @JsonAdapter(IsVerifiedEnum.Adapter.class)
  public enum IsVerifiedEnum {
    Y("Y"),
    
    N("N");

    private String value;

    IsVerifiedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsVerifiedEnum fromValue(String value) {
      for (IsVerifiedEnum b : IsVerifiedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsVerifiedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsVerifiedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsVerifiedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IsVerifiedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IS_VERIFIED = "isVerified";
  @SerializedName(SERIALIZED_NAME_IS_VERIFIED)
  private IsVerifiedEnum isVerified;

  public static final String SERIALIZED_NAME_VERIFIED_BY = "verifiedBy";
  @SerializedName(SERIALIZED_NAME_VERIFIED_BY)
  private String verifiedBy;

  public static final String SERIALIZED_NAME_VERIFIED_DATE = "verifiedDate";
  @SerializedName(SERIALIZED_NAME_VERIFIED_DATE)
  private String verifiedDate;

  public static final String SERIALIZED_NAME_CARRIER = "carrier";
  @SerializedName(SERIALIZED_NAME_CARRIER)
  private String carrier;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public Phone() {
  }

  public Phone phoneType(Integer phoneType) {
    
    this.phoneType = phoneType;
    return this;
  }

   /**
   * Phone Type Values  * 1 Home * 2 Notification Mobile Phone * 3 Work * 4 Alternate Phone * 5 Other Mobile Number * 6 Fax * 99 PhoneTypeOther  **The below table defines the mapping between PhoneType &amp; PhoneSeq** | Phone Type       | Phone Seq   | Remarks                            | | ---------------- | ------------| -----------------------------------| | 1                | 1           | Primary Phone                      | | 2                | 4           | Mobile Phone                       | | 3                | 3           | Work Phone                         | | 4                | 2           | Alternate Phone                    | | 5                | 5           | Other Mobile Phone                 | | 6                | 6           | Fax                                | 
   * @return phoneType
  **/
  @javax.annotation.Nonnull
  public Integer getPhoneType() {
    return phoneType;
  }


  public void setPhoneType(Integer phoneType) {
    this.phoneType = phoneType;
  }


  public Phone phoneSeq(Integer phoneSeq) {
    
    this.phoneSeq = phoneSeq;
    return this;
  }

   /**
   * PhoneSequence will be used if there is more than one. Phone number for the same phone type. Valid values for phone sequence are 1,2,3 etc. PhoneSeq for Primary Phone number should be 1  **The below table defines the mapping between PhoneType &amp; PhoneSeq** | Phone Type       | Phone Seq   | Remarks                            | | ---------------- | ------------| -----------------------------------| | 1                | 1           | Primary Phone                      | | 2                | 4           | Mobile Phone                       | | 3                | 3           | Work Phone                         | | 4                | 2           | Alternate Phone                    | | 5                | 5           | Other Mobile Phone                 | | 6                | 6           | Fax                                | 
   * @return phoneSeq
  **/
  @javax.annotation.Nonnull
  public Integer getPhoneSeq() {
    return phoneSeq;
  }


  public void setPhoneSeq(Integer phoneSeq) {
    this.phoneSeq = phoneSeq;
  }


  public Phone phoneNumber(String phoneNumber) {
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Customer&#39;s Phone Number
   * @return phoneNumber
  **/
  @javax.annotation.Nonnull
  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public Phone isdCode(String isdCode) {
    
    this.isdCode = isdCode;
    return this;
  }

   /**
   * Customer&#39;s International Dialing Code. e.g. 1 for USA, 44 for UK, 91 for India, etc
   * @return isdCode
  **/
  @javax.annotation.Nullable
  public String getIsdCode() {
    return isdCode;
  }


  public void setIsdCode(String isdCode) {
    this.isdCode = isdCode;
  }


  public Phone iso2Code(String iso2Code) {
    
    this.iso2Code = iso2Code;
    return this;
  }

   /**
   * Customer&#39;s Phone Country Code in ISO2 format. e.g. AT,IN,US
   * @return iso2Code
  **/
  @javax.annotation.Nullable
  public String getIso2Code() {
    return iso2Code;
  }


  public void setIso2Code(String iso2Code) {
    this.iso2Code = iso2Code;
  }


  public Phone iso3Code(String iso3Code) {
    
    this.iso3Code = iso3Code;
    return this;
  }

   /**
   * Customer&#39;s Phone Country Code in ISO3 format. e.g. AUT,IND,USA
   * @return iso3Code
  **/
  @javax.annotation.Nullable
  public String getIso3Code() {
    return iso3Code;
  }


  public void setIso3Code(String iso3Code) {
    this.iso3Code = iso3Code;
  }


  public Phone phoneExtn(String phoneExtn) {
    
    this.phoneExtn = phoneExtn;
    return this;
  }

   /**
   * Customer&#39;s Phone Number Extension
   * @return phoneExtn
  **/
  @javax.annotation.Nullable
  public String getPhoneExtn() {
    return phoneExtn;
  }


  public void setPhoneExtn(String phoneExtn) {
    this.phoneExtn = phoneExtn;
  }


  public Phone phoneProvider(String phoneProvider) {
    
    this.phoneProvider = phoneProvider;
    return this;
  }

   /**
   * Provider of the Customer&#39;s Phone service or Carrier. e.g. AT&amp;T, T-Mobile, etc
   * @return phoneProvider
  **/
  @javax.annotation.Nullable
  public String getPhoneProvider() {
    return phoneProvider;
  }


  public void setPhoneProvider(String phoneProvider) {
    this.phoneProvider = phoneProvider;
  }


  public Phone referenceForPhoneTypeIDOther(String referenceForPhoneTypeIDOther) {
    
    this.referenceForPhoneTypeIDOther = referenceForPhoneTypeIDOther;
    return this;
  }

   /**
   * When the PhoneType 99 (Other) is selected, Client needs to send the reference/actual PhoneType value in this element
   * @return referenceForPhoneTypeIDOther
  **/
  @javax.annotation.Nullable
  public String getReferenceForPhoneTypeIDOther() {
    return referenceForPhoneTypeIDOther;
  }


  public void setReferenceForPhoneTypeIDOther(String referenceForPhoneTypeIDOther) {
    this.referenceForPhoneTypeIDOther = referenceForPhoneTypeIDOther;
  }


  public Phone phoneVvStatus(PhoneVvStatusEnum phoneVvStatus) {
    
    this.phoneVvStatus = phoneVvStatus;
    return this;
  }

   /**
   * Phone Number Verification Status * L – Fixed line (Verified as Landline) * M – Mobile (Verified as Mobile) * N – Invalid (Not a valid Phone or Mobile number) * P – Unknown * T – Tollfree  * R – Premium Rate * S – Shared Cost * V – VOIP  * A – Personal Number * B – Pager  * U – Universal Access Number * C – Voicemail  * D – Fixed line or Mobile (Null) 
   * @return phoneVvStatus
  **/
  @javax.annotation.Nullable
  public PhoneVvStatusEnum getPhoneVvStatus() {
    return phoneVvStatus;
  }


  public void setPhoneVvStatus(PhoneVvStatusEnum phoneVvStatus) {
    this.phoneVvStatus = phoneVvStatus;
  }


  public Phone phoneVvStatusBy(String phoneVvStatusBy) {
    
    this.phoneVvStatusBy = phoneVvStatusBy;
    return this;
  }

   /**
   * Application/System/End User which added/updated the PhoneVVStatus.
   * @return phoneVvStatusBy
  **/
  @javax.annotation.Nullable
  public String getPhoneVvStatusBy() {
    return phoneVvStatusBy;
  }


  public void setPhoneVvStatusBy(String phoneVvStatusBy) {
    this.phoneVvStatusBy = phoneVvStatusBy;
  }


  public Phone phoneVvDate(String phoneVvDate) {
    
    this.phoneVvDate = phoneVvDate;
    return this;
  }

   /**
   * Timestamp when the PhoneVVStatus was added/updated.
   * @return phoneVvDate
  **/
  @javax.annotation.Nullable
  public String getPhoneVvDate() {
    return phoneVvDate;
  }


  public void setPhoneVvDate(String phoneVvDate) {
    this.phoneVvDate = phoneVvDate;
  }


  public Phone isVerified(IsVerifiedEnum isVerified) {
    
    this.isVerified = isVerified;
    return this;
  }

   /**
   * This field indicates if the Customer&#39;s Mobile Number is/not verified based on OTP . * Y - Verified * N - Not Verified 
   * @return isVerified
  **/
  @javax.annotation.Nullable
  public IsVerifiedEnum getIsVerified() {
    return isVerified;
  }


  public void setIsVerified(IsVerifiedEnum isVerified) {
    this.isVerified = isVerified;
  }


  public Phone verifiedBy(String verifiedBy) {
    
    this.verifiedBy = verifiedBy;
    return this;
  }

   /**
   * Application/System/End User who verified the Customer&#39;s Mobile Number based on OTP.
   * @return verifiedBy
  **/
  @javax.annotation.Nullable
  public String getVerifiedBy() {
    return verifiedBy;
  }


  public void setVerifiedBy(String verifiedBy) {
    this.verifiedBy = verifiedBy;
  }


  public Phone verifiedDate(String verifiedDate) {
    
    this.verifiedDate = verifiedDate;
    return this;
  }

   /**
   * Timestamp when the Customer&#39;s Mobile Number was verified based on OTP was added/updated.
   * @return verifiedDate
  **/
  @javax.annotation.Nullable
  public String getVerifiedDate() {
    return verifiedDate;
  }


  public void setVerifiedDate(String verifiedDate) {
    this.verifiedDate = verifiedDate;
  }


  public Phone carrier(String carrier) {
    
    this.carrier = carrier;
    return this;
  }

   /**
   * Carrier of the Customer&#39;s Phone Number
   * @return carrier
  **/
  @javax.annotation.Nullable
  public String getCarrier() {
    return carrier;
  }


  public void setCarrier(String carrier) {
    this.carrier = carrier;
  }


  public Phone region(String region) {
    
    this.region = region;
    return this;
  }

   /**
   * Region of the Customer&#39;s Phone Number
   * @return region
  **/
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }


  public void setRegion(String region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Phone phone = (Phone) o;
    return Objects.equals(this.phoneType, phone.phoneType) &&
        Objects.equals(this.phoneSeq, phone.phoneSeq) &&
        Objects.equals(this.phoneNumber, phone.phoneNumber) &&
        Objects.equals(this.isdCode, phone.isdCode) &&
        Objects.equals(this.iso2Code, phone.iso2Code) &&
        Objects.equals(this.iso3Code, phone.iso3Code) &&
        Objects.equals(this.phoneExtn, phone.phoneExtn) &&
        Objects.equals(this.phoneProvider, phone.phoneProvider) &&
        Objects.equals(this.referenceForPhoneTypeIDOther, phone.referenceForPhoneTypeIDOther) &&
        Objects.equals(this.phoneVvStatus, phone.phoneVvStatus) &&
        Objects.equals(this.phoneVvStatusBy, phone.phoneVvStatusBy) &&
        Objects.equals(this.phoneVvDate, phone.phoneVvDate) &&
        Objects.equals(this.isVerified, phone.isVerified) &&
        Objects.equals(this.verifiedBy, phone.verifiedBy) &&
        Objects.equals(this.verifiedDate, phone.verifiedDate) &&
        Objects.equals(this.carrier, phone.carrier) &&
        Objects.equals(this.region, phone.region);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneType, phoneSeq, phoneNumber, isdCode, iso2Code, iso3Code, phoneExtn, phoneProvider, referenceForPhoneTypeIDOther, phoneVvStatus, phoneVvStatusBy, phoneVvDate, isVerified, verifiedBy, verifiedDate, carrier, region);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Phone {\n");
    sb.append("    phoneType: ").append(toIndentedString(phoneType)).append("\n");
    sb.append("    phoneSeq: ").append(toIndentedString(phoneSeq)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    isdCode: ").append(toIndentedString(isdCode)).append("\n");
    sb.append("    iso2Code: ").append(toIndentedString(iso2Code)).append("\n");
    sb.append("    iso3Code: ").append(toIndentedString(iso3Code)).append("\n");
    sb.append("    phoneExtn: ").append(toIndentedString(phoneExtn)).append("\n");
    sb.append("    phoneProvider: ").append(toIndentedString(phoneProvider)).append("\n");
    sb.append("    referenceForPhoneTypeIDOther: ").append(toIndentedString(referenceForPhoneTypeIDOther)).append("\n");
    sb.append("    phoneVvStatus: ").append(toIndentedString(phoneVvStatus)).append("\n");
    sb.append("    phoneVvStatusBy: ").append(toIndentedString(phoneVvStatusBy)).append("\n");
    sb.append("    phoneVvDate: ").append(toIndentedString(phoneVvDate)).append("\n");
    sb.append("    isVerified: ").append(toIndentedString(isVerified)).append("\n");
    sb.append("    verifiedBy: ").append(toIndentedString(verifiedBy)).append("\n");
    sb.append("    verifiedDate: ").append(toIndentedString(verifiedDate)).append("\n");
    sb.append("    carrier: ").append(toIndentedString(carrier)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("phoneType");
    openapiFields.add("phoneSeq");
    openapiFields.add("phoneNumber");
    openapiFields.add("isdCode");
    openapiFields.add("iso2Code");
    openapiFields.add("iso3Code");
    openapiFields.add("phoneExtn");
    openapiFields.add("phoneProvider");
    openapiFields.add("referenceForPhoneTypeIDOther");
    openapiFields.add("phoneVvStatus");
    openapiFields.add("phoneVvStatusBy");
    openapiFields.add("phoneVvDate");
    openapiFields.add("isVerified");
    openapiFields.add("verifiedBy");
    openapiFields.add("verifiedDate");
    openapiFields.add("carrier");
    openapiFields.add("region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("phoneType");
    openapiRequiredFields.add("phoneSeq");
    openapiRequiredFields.add("phoneNumber");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Phone
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Phone.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Phone is not found in the empty JSON string", Phone.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Phone.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Phone` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Phone.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("isdCode") != null && !jsonObj.get("isdCode").isJsonNull()) && !jsonObj.get("isdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isdCode").toString()));
      }
      if ((jsonObj.get("iso2Code") != null && !jsonObj.get("iso2Code").isJsonNull()) && !jsonObj.get("iso2Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso2Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso2Code").toString()));
      }
      if ((jsonObj.get("iso3Code") != null && !jsonObj.get("iso3Code").isJsonNull()) && !jsonObj.get("iso3Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso3Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso3Code").toString()));
      }
      if ((jsonObj.get("phoneExtn") != null && !jsonObj.get("phoneExtn").isJsonNull()) && !jsonObj.get("phoneExtn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneExtn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneExtn").toString()));
      }
      if ((jsonObj.get("phoneProvider") != null && !jsonObj.get("phoneProvider").isJsonNull()) && !jsonObj.get("phoneProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneProvider").toString()));
      }
      if ((jsonObj.get("referenceForPhoneTypeIDOther") != null && !jsonObj.get("referenceForPhoneTypeIDOther").isJsonNull()) && !jsonObj.get("referenceForPhoneTypeIDOther").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceForPhoneTypeIDOther` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceForPhoneTypeIDOther").toString()));
      }
      if ((jsonObj.get("phoneVvStatus") != null && !jsonObj.get("phoneVvStatus").isJsonNull()) && !jsonObj.get("phoneVvStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneVvStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneVvStatus").toString()));
      }
      if ((jsonObj.get("phoneVvStatusBy") != null && !jsonObj.get("phoneVvStatusBy").isJsonNull()) && !jsonObj.get("phoneVvStatusBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneVvStatusBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneVvStatusBy").toString()));
      }
      if ((jsonObj.get("isVerified") != null && !jsonObj.get("isVerified").isJsonNull()) && !jsonObj.get("isVerified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isVerified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isVerified").toString()));
      }
      if ((jsonObj.get("verifiedBy") != null && !jsonObj.get("verifiedBy").isJsonNull()) && !jsonObj.get("verifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verifiedBy").toString()));
      }
      if ((jsonObj.get("carrier") != null && !jsonObj.get("carrier").isJsonNull()) && !jsonObj.get("carrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Phone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Phone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Phone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Phone.class));

       return (TypeAdapter<T>) new TypeAdapter<Phone>() {
           @Override
           public void write(JsonWriter out, Phone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Phone read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Phone given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Phone
  * @throws IOException if the JSON string is invalid with respect to Phone
  */
  public static Phone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Phone.class);
  }

 /**
  * Convert an instance of Phone to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

