/*
 * ucd_pmgmt_v1_api
 * Swagger documentation for UCD Profile Management Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.Name;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.profilemanagement.JSON;

/**
 * recevierSeq / receiverNo / recevierUniqueRef / lookup Hash (name + countrycode + qqcSenderAcct + d2bAcctNum) could be used to update Recevier Name. If multiple keys are passed, the first one will be considered.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T21:22:09.739306500+05:30[Asia/Calcutta]")
public class ReceiverNameExisting {
  public static final String SERIALIZED_NAME_RECEIVER_SEQ = "receiverSeq";
  @SerializedName(SERIALIZED_NAME_RECEIVER_SEQ)
  private Long receiverSeq;

  public static final String SERIALIZED_NAME_RECEIVER_NO = "receiverNo";
  @SerializedName(SERIALIZED_NAME_RECEIVER_NO)
  private Integer receiverNo;

  public static final String SERIALIZED_NAME_RECEIVER_UNIQUE_REF = "receiverUniqueRef";
  @SerializedName(SERIALIZED_NAME_RECEIVER_UNIQUE_REF)
  private String receiverUniqueRef;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Name name;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO2 = "countryCodeIso2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO2)
  private String countryCodeIso2;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO3 = "countryCodeIso3";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO3)
  private String countryCodeIso3;

  public static final String SERIALIZED_NAME_QQC_SENDER_ACCT = "qqcSenderAcct";
  @SerializedName(SERIALIZED_NAME_QQC_SENDER_ACCT)
  private String qqcSenderAcct;

  public static final String SERIALIZED_NAME_D2B_ACCT_NUM = "d2bAcctNum";
  @SerializedName(SERIALIZED_NAME_D2B_ACCT_NUM)
  private String d2bAcctNum;

  public ReceiverNameExisting() {
  }

  public ReceiverNameExisting receiverSeq(Long receiverSeq) {
    
    this.receiverSeq = receiverSeq;
    return this;
  }

   /**
   * This field indicates to return the customer&#39;s details and the receiver details for the given receiverSeq.
   * @return receiverSeq
  **/
  @javax.annotation.Nullable
  public Long getReceiverSeq() {
    return receiverSeq;
  }


  public void setReceiverSeq(Long receiverSeq) {
    this.receiverSeq = receiverSeq;
  }


  public ReceiverNameExisting receiverNo(Integer receiverNo) {
    
    this.receiverNo = receiverNo;
    return this;
  }

   /**
   * Serial number of the Receiver.
   * @return receiverNo
  **/
  @javax.annotation.Nullable
  public Integer getReceiverNo() {
    return receiverNo;
  }


  public void setReceiverNo(Integer receiverNo) {
    this.receiverNo = receiverNo;
  }


  public ReceiverNameExisting receiverUniqueRef(String receiverUniqueRef) {
    
    this.receiverUniqueRef = receiverUniqueRef;
    return this;
  }

   /**
   * Reference number stored by Application to Identify Receivers Uniquely across Payout Types.
   * @return receiverUniqueRef
  **/
  @javax.annotation.Nullable
  public String getReceiverUniqueRef() {
    return receiverUniqueRef;
  }


  public void setReceiverUniqueRef(String receiverUniqueRef) {
    this.receiverUniqueRef = receiverUniqueRef;
  }


  public ReceiverNameExisting name(Name name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public Name getName() {
    return name;
  }


  public void setName(Name name) {
    this.name = name;
  }


  public ReceiverNameExisting countryCodeIso2(String countryCodeIso2) {
    
    this.countryCodeIso2 = countryCodeIso2;
    return this;
  }

   /**
   * Country code in ISO2 format. e.g. AT,IN,US
   * @return countryCodeIso2
  **/
  @javax.annotation.Nullable
  public String getCountryCodeIso2() {
    return countryCodeIso2;
  }


  public void setCountryCodeIso2(String countryCodeIso2) {
    this.countryCodeIso2 = countryCodeIso2;
  }


  public ReceiverNameExisting countryCodeIso3(String countryCodeIso3) {
    
    this.countryCodeIso3 = countryCodeIso3;
    return this;
  }

   /**
   * Country code in ISO3 format. e.g. AUT,IND,USA
   * @return countryCodeIso3
  **/
  @javax.annotation.Nullable
  public String getCountryCodeIso3() {
    return countryCodeIso3;
  }


  public void setCountryCodeIso3(String countryCodeIso3) {
    this.countryCodeIso3 = countryCodeIso3;
  }


  public ReceiverNameExisting qqcSenderAcct(String qqcSenderAcct) {
    
    this.qqcSenderAcct = qqcSenderAcct;
    return this;
  }

   /**
   * QQC Biller Account Number for the receiver type Q
   * @return qqcSenderAcct
  **/
  @javax.annotation.Nullable
  public String getQqcSenderAcct() {
    return qqcSenderAcct;
  }


  public void setQqcSenderAcct(String qqcSenderAcct) {
    this.qqcSenderAcct = qqcSenderAcct;
  }


  public ReceiverNameExisting d2bAcctNum(String d2bAcctNum) {
    
    this.d2bAcctNum = d2bAcctNum;
    return this;
  }

   /**
   * Direct to Bank Account NUmber for the receiver type D
   * @return d2bAcctNum
  **/
  @javax.annotation.Nullable
  public String getD2bAcctNum() {
    return d2bAcctNum;
  }


  public void setD2bAcctNum(String d2bAcctNum) {
    this.d2bAcctNum = d2bAcctNum;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceiverNameExisting receiverNameExisting = (ReceiverNameExisting) o;
    return Objects.equals(this.receiverSeq, receiverNameExisting.receiverSeq) &&
        Objects.equals(this.receiverNo, receiverNameExisting.receiverNo) &&
        Objects.equals(this.receiverUniqueRef, receiverNameExisting.receiverUniqueRef) &&
        Objects.equals(this.name, receiverNameExisting.name) &&
        Objects.equals(this.countryCodeIso2, receiverNameExisting.countryCodeIso2) &&
        Objects.equals(this.countryCodeIso3, receiverNameExisting.countryCodeIso3) &&
        Objects.equals(this.qqcSenderAcct, receiverNameExisting.qqcSenderAcct) &&
        Objects.equals(this.d2bAcctNum, receiverNameExisting.d2bAcctNum);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(receiverSeq, receiverNo, receiverUniqueRef, name, countryCodeIso2, countryCodeIso3, qqcSenderAcct, d2bAcctNum);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceiverNameExisting {\n");
    sb.append("    receiverSeq: ").append(toIndentedString(receiverSeq)).append("\n");
    sb.append("    receiverNo: ").append(toIndentedString(receiverNo)).append("\n");
    sb.append("    receiverUniqueRef: ").append(toIndentedString(receiverUniqueRef)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    countryCodeIso2: ").append(toIndentedString(countryCodeIso2)).append("\n");
    sb.append("    countryCodeIso3: ").append(toIndentedString(countryCodeIso3)).append("\n");
    sb.append("    qqcSenderAcct: ").append(toIndentedString(qqcSenderAcct)).append("\n");
    sb.append("    d2bAcctNum: ").append(toIndentedString(d2bAcctNum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("receiverSeq");
    openapiFields.add("receiverNo");
    openapiFields.add("receiverUniqueRef");
    openapiFields.add("name");
    openapiFields.add("countryCodeIso2");
    openapiFields.add("countryCodeIso3");
    openapiFields.add("qqcSenderAcct");
    openapiFields.add("d2bAcctNum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReceiverNameExisting
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReceiverNameExisting.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceiverNameExisting is not found in the empty JSON string", ReceiverNameExisting.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReceiverNameExisting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReceiverNameExisting` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("receiverUniqueRef") != null && !jsonObj.get("receiverUniqueRef").isJsonNull()) && !jsonObj.get("receiverUniqueRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverUniqueRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverUniqueRef").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        Name.validateJsonObject(jsonObj.getAsJsonObject("name"));
      }
      if ((jsonObj.get("countryCodeIso2") != null && !jsonObj.get("countryCodeIso2").isJsonNull()) && !jsonObj.get("countryCodeIso2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCodeIso2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCodeIso2").toString()));
      }
      if ((jsonObj.get("countryCodeIso3") != null && !jsonObj.get("countryCodeIso3").isJsonNull()) && !jsonObj.get("countryCodeIso3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCodeIso3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCodeIso3").toString()));
      }
      if ((jsonObj.get("qqcSenderAcct") != null && !jsonObj.get("qqcSenderAcct").isJsonNull()) && !jsonObj.get("qqcSenderAcct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qqcSenderAcct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qqcSenderAcct").toString()));
      }
      if ((jsonObj.get("d2bAcctNum") != null && !jsonObj.get("d2bAcctNum").isJsonNull()) && !jsonObj.get("d2bAcctNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `d2bAcctNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("d2bAcctNum").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceiverNameExisting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceiverNameExisting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceiverNameExisting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceiverNameExisting.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceiverNameExisting>() {
           @Override
           public void write(JsonWriter out, ReceiverNameExisting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceiverNameExisting read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReceiverNameExisting given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReceiverNameExisting
  * @throws IOException if the JSON string is invalid with respect to ReceiverNameExisting
  */
  public static ReceiverNameExisting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceiverNameExisting.class);
  }

 /**
  * Convert an instance of ReceiverNameExisting to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

