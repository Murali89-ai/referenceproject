/*
 * ucd_cregn_v1_api
 * Swagger documentation for UCD Customer Registration Service API
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: UCDWSDevTeam@westernunion.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.wu.brwallet.customer.profile.model.common.ucd.customerregistration;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.wu.brwallet.customer.profile.model.common.ucd.customerregistration.JSON;

/**
 * Customer Verification Detail Model Schema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T20:58:59.701576900+05:30[Asia/Calcutta]")
public class CustomerVerificationDetail {
  public static final String SERIALIZED_NAME_PCP_NUMBER = "pcpNumber";
  @SerializedName(SERIALIZED_NAME_PCP_NUMBER)
  private String pcpNumber;

  public static final String SERIALIZED_NAME_CHANNEL_TYPE = "channelType";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TYPE)
  private Integer channelType;

  public static final String SERIALIZED_NAME_VERIFICATION_FLAG_TYPE_ID = "verificationFlagTypeId";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_FLAG_TYPE_ID)
  private Integer verificationFlagTypeId;

  public static final String SERIALIZED_NAME_VERIFICATION_FLAG_SUBTYPE_ID = "verificationFlagSubtypeId";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_FLAG_SUBTYPE_ID)
  private String verificationFlagSubtypeId;

  public static final String SERIALIZED_NAME_COUNTRY_ISO2 = "countryIso2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO2)
  private String countryIso2;

  public static final String SERIALIZED_NAME_DISPLAY_FLAG = "displayFlag";
  @SerializedName(SERIALIZED_NAME_DISPLAY_FLAG)
  private String displayFlag;

  public static final String SERIALIZED_NAME_DOC_REF_LOAD_DATE = "docRefLoadDate";
  @SerializedName(SERIALIZED_NAME_DOC_REF_LOAD_DATE)
  private OffsetDateTime docRefLoadDate;

  public static final String SERIALIZED_NAME_DOC_REF_NUM = "docRefNum";
  @SerializedName(SERIALIZED_NAME_DOC_REF_NUM)
  private String docRefNum;

  public static final String SERIALIZED_NAME_VERIFICATION_STATUS = "verificationStatus";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_STATUS)
  private String verificationStatus;

  public static final String SERIALIZED_NAME_VERIFICATION_SUBSTATUS = "verificationSubstatus";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_SUBSTATUS)
  private String verificationSubstatus;

  public static final String SERIALIZED_NAME_VERIFIED_STATUS_BY = "verifiedStatusBy";
  @SerializedName(SERIALIZED_NAME_VERIFIED_STATUS_BY)
  private String verifiedStatusBy;

  public static final String SERIALIZED_NAME_VERIFICATION_STATUS_EXPIRY_DATE = "verificationStatusExpiryDate";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_STATUS_EXPIRY_DATE)
  private LocalDate verificationStatusExpiryDate;

  public static final String SERIALIZED_NAME_OPERATER_ID = "operaterId";
  @SerializedName(SERIALIZED_NAME_OPERATER_ID)
  private String operaterId;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_VERIFICATION_DATE = "verificationDate";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_DATE)
  private OffsetDateTime verificationDate;

  public static final String SERIALIZED_NAME_PEP_CATEGORY = "pepCategory";
  @SerializedName(SERIALIZED_NAME_PEP_CATEGORY)
  private String pepCategory;

  public static final String SERIALIZED_NAME_F2F_VERIFICATION = "f2fVerification";
  @SerializedName(SERIALIZED_NAME_F2F_VERIFICATION)
  private String f2fVerification;

  public static final String SERIALIZED_NAME_VERIFICATION_METHOD = "verificationMethod";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_METHOD)
  private String verificationMethod;

  public static final String SERIALIZED_NAME_ANNUAL_CHECK_STATUS = "annualCheckStatus";
  @SerializedName(SERIALIZED_NAME_ANNUAL_CHECK_STATUS)
  private String annualCheckStatus;

  public static final String SERIALIZED_NAME_KYC_CONSENT_FLAG = "kycConsentFlag";
  @SerializedName(SERIALIZED_NAME_KYC_CONSENT_FLAG)
  private String kycConsentFlag;

  public static final String SERIALIZED_NAME_KYC_CONSENT_DATE = "kycConsentDate";
  @SerializedName(SERIALIZED_NAME_KYC_CONSENT_DATE)
  private OffsetDateTime kycConsentDate;

  public static final String SERIALIZED_NAME_REACCREDITION_FLAG = "reaccreditionFlag";
  @SerializedName(SERIALIZED_NAME_REACCREDITION_FLAG)
  private String reaccreditionFlag;

  public static final String SERIALIZED_NAME_REACCREDITATION_DUE_DATE = "reaccreditationDueDate";
  @SerializedName(SERIALIZED_NAME_REACCREDITATION_DUE_DATE)
  private OffsetDateTime reaccreditationDueDate;

  public static final String SERIALIZED_NAME_REACCREDITATION_STATUS_DATE = "reaccreditationStatusDate";
  @SerializedName(SERIALIZED_NAME_REACCREDITATION_STATUS_DATE)
  private OffsetDateTime reaccreditationStatusDate;

  public static final String SERIALIZED_NAME_REACCREDITATION_ATTRIBUTES = "reaccreditationAttributes";
  @SerializedName(SERIALIZED_NAME_REACCREDITATION_ATTRIBUTES)
  private String reaccreditationAttributes;

  public static final String SERIALIZED_NAME_VERIFICATION_REFERENCE = "verificationReference";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_REFERENCE)
  private String verificationReference;

  public static final String SERIALIZED_NAME_CROSS_CHANNEL_VERIFICATION_DATE = "crossChannelVerificationDate";
  @SerializedName(SERIALIZED_NAME_CROSS_CHANNEL_VERIFICATION_DATE)
  private OffsetDateTime crossChannelVerificationDate;

  public CustomerVerificationDetail() {
  }

  public CustomerVerificationDetail pcpNumber(String pcpNumber) {
    
    this.pcpNumber = pcpNumber;
    return this;
  }

   /**
   * PCP Number is the Loyalty card number. This is to uniquely identify the Customer&#39;s account profiles. It is populated in most of the systems (except Prepaid FIS). PCP Number and Account Key should be same for PCUST/Loyalty request.
   * @return pcpNumber
  **/
  @javax.annotation.Nonnull
  public String getPcpNumber() {
    return pcpNumber;
  }


  public void setPcpNumber(String pcpNumber) {
    this.pcpNumber = pcpNumber;
  }


  public CustomerVerificationDetail channelType(Integer channelType) {
    
    this.channelType = channelType;
    return this;
  }

   /**
   * Channel Type * 1 - Digital / Guest Checkout EU * 2 - Retail * 3 - Future Use * 4 - LBP/WUPSIL * 5 - WUPlus * 6 - Corrections Pay / Guest Checkout US / Wallet 
   * @return channelType
  **/
  @javax.annotation.Nonnull
  public Integer getChannelType() {
    return channelType;
  }


  public void setChannelType(Integer channelType) {
    this.channelType = channelType;
  }


  public CustomerVerificationDetail verificationFlagTypeId(Integer verificationFlagTypeId) {
    
    this.verificationFlagTypeId = verificationFlagTypeId;
    return this;
  }

   /**
   * Verification Flag Type Id. * 1 - Veda, EID, EUID * 2 - PEP Screening Status 
   * @return verificationFlagTypeId
  **/
  @javax.annotation.Nonnull
  public Integer getVerificationFlagTypeId() {
    return verificationFlagTypeId;
  }


  public void setVerificationFlagTypeId(Integer verificationFlagTypeId) {
    this.verificationFlagTypeId = verificationFlagTypeId;
  }


  public CustomerVerificationDetail verificationFlagSubtypeId(String verificationFlagSubtypeId) {
    
    this.verificationFlagSubtypeId = verificationFlagSubtypeId;
    return this;
  }

   /**
   * Verification Flag Sub Type Id.
   * @return verificationFlagSubtypeId
  **/
  @javax.annotation.Nullable
  public String getVerificationFlagSubtypeId() {
    return verificationFlagSubtypeId;
  }


  public void setVerificationFlagSubtypeId(String verificationFlagSubtypeId) {
    this.verificationFlagSubtypeId = verificationFlagSubtypeId;
  }


  public CustomerVerificationDetail countryIso2(String countryIso2) {
    
    this.countryIso2 = countryIso2;
    return this;
  }

   /**
   * Country code in ISO2 format. e.g. AT,IN,US
   * @return countryIso2
  **/
  @javax.annotation.Nullable
  public String getCountryIso2() {
    return countryIso2;
  }


  public void setCountryIso2(String countryIso2) {
    this.countryIso2 = countryIso2;
  }


  public CustomerVerificationDetail displayFlag(String displayFlag) {
    
    this.displayFlag = displayFlag;
    return this;
  }

   /**
   * This field indicates whether a message should be displayed or not.  * 1 - Display 
   * @return displayFlag
  **/
  @javax.annotation.Nullable
  public String getDisplayFlag() {
    return displayFlag;
  }


  public void setDisplayFlag(String displayFlag) {
    this.displayFlag = displayFlag;
  }


  public CustomerVerificationDetail docRefLoadDate(OffsetDateTime docRefLoadDate) {
    
    this.docRefLoadDate = docRefLoadDate;
    return this;
  }

   /**
   * Timestanp when the Customer uploaded the ID documents for verification purposes.
   * @return docRefLoadDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDocRefLoadDate() {
    return docRefLoadDate;
  }


  public void setDocRefLoadDate(OffsetDateTime docRefLoadDate) {
    this.docRefLoadDate = docRefLoadDate;
  }


  public CustomerVerificationDetail docRefNum(String docRefNum) {
    
    this.docRefNum = docRefNum;
    return this;
  }

   /**
   * Reference Number for the uploaded ID documents.
   * @return docRefNum
  **/
  @javax.annotation.Nullable
  public String getDocRefNum() {
    return docRefNum;
  }


  public void setDocRefNum(String docRefNum) {
    this.docRefNum = docRefNum;
  }


  public CustomerVerificationDetail verificationStatus(String verificationStatus) {
    
    this.verificationStatus = verificationStatus;
    return this;
  }

   /**
   * Status of the Verification.  **The below table defines the mapping between ChannelType &amp; VerificationStatus** | Channel Type                             | Verification Status   | Remarks                                                     | | ---------------------------------------- | --------------------- | ----------------------------------------------------------- | | 1 (Digital)                              | N                     | Not Approved                                                | | 1 (Digital)                              | Y                     | Approved                                                    | | 1 (Digital)                              |                       | Not Approved                                                | | 1 (Digital)                              | I                     | In Progress                                                 | | 1 (Digital)                              | U                     | Investigating (Under Review)                                | | 1 (Digital)                              | R                     | New Request                                                 | | 1 (Digital)                              | E                     | Only in India (indicates error)                             | | 1 (Digital)                              | M                     | Manual Review                                               | | 1 (Digital)                              | Z                     | Pre Qualified                                               | | 4 (LBP/WUPSIL)                           | N                     | Not Approved                                                | | 4 (LBP/WUPSIL)                           | Y                     | Approved                                                    | | 4 (LBP/WUPSIL)                           | I                     | In Progress                                                 | | 5 (WUPlus/Banking)                       | Y                     | Approved                                                    | | 5 (WUPlus/Banking)                       | P                     | Pending with Pharos / Pending Verification with Vendor      | | 5 (WUPlus/Banking)                       | B                     | Bad/Inconsistent data or Not set (Pharos interim status)    | | 5 (WUPlus/Banking)                       | X                     | Rejected                                                    | | 5 (WUPlus/Banking)                       | I                     | Pharos In Progress                                          | | 6 ((CorrectionsPay/GuestCheckout/Wallet) | Y                     | Approved                                                    | | 6 ((CorrectionsPay/GuestCheckout/Wallet) | P                     | Pending with Pharos / Pending Verification with Vendor      | | 6 ((CorrectionsPay/GuestCheckout/Wallet) | B                     | Bad/Inconsistent data or Not set (Pharos interim status)    | | 6 ((CorrectionsPay/GuestCheckout/Wallet) | X                     | Rejected                                                    | | 6 ((CorrectionsPay/GuestCheckout/Wallet) | I                     | Pharos In Progress                                          | |                                          | 0                     | Nullify the existing value                                  | 
   * @return verificationStatus
  **/
  @javax.annotation.Nullable
  public String getVerificationStatus() {
    return verificationStatus;
  }


  public void setVerificationStatus(String verificationStatus) {
    this.verificationStatus = verificationStatus;
  }


  public CustomerVerificationDetail verificationSubstatus(String verificationSubstatus) {
    
    this.verificationSubstatus = verificationSubstatus;
    return this;
  }

   /**
   * Verification Sub Status.
   * @return verificationSubstatus
  **/
  @javax.annotation.Nullable
  public String getVerificationSubstatus() {
    return verificationSubstatus;
  }


  public void setVerificationSubstatus(String verificationSubstatus) {
    this.verificationSubstatus = verificationSubstatus;
  }


  public CustomerVerificationDetail verifiedStatusBy(String verifiedStatusBy) {
    
    this.verifiedStatusBy = verifiedStatusBy;
    return this;
  }

   /**
   * Application/System/End User which verified the Customer.
   * @return verifiedStatusBy
  **/
  @javax.annotation.Nullable
  public String getVerifiedStatusBy() {
    return verifiedStatusBy;
  }


  public void setVerifiedStatusBy(String verifiedStatusBy) {
    this.verifiedStatusBy = verifiedStatusBy;
  }


  public CustomerVerificationDetail verificationStatusExpiryDate(LocalDate verificationStatusExpiryDate) {
    
    this.verificationStatusExpiryDate = verificationStatusExpiryDate;
    return this;
  }

   /**
   * Date on which Customer&#39;s Verification Status would expire.
   * @return verificationStatusExpiryDate
  **/
  @javax.annotation.Nullable
  public LocalDate getVerificationStatusExpiryDate() {
    return verificationStatusExpiryDate;
  }


  public void setVerificationStatusExpiryDate(LocalDate verificationStatusExpiryDate) {
    this.verificationStatusExpiryDate = verificationStatusExpiryDate;
  }


  public CustomerVerificationDetail operaterId(String operaterId) {
    
    this.operaterId = operaterId;
    return this;
  }

   /**
   * Operator ID.
   * @return operaterId
  **/
  @javax.annotation.Nullable
  public String getOperaterId() {
    return operaterId;
  }


  public void setOperaterId(String operaterId) {
    this.operaterId = operaterId;
  }


  public CustomerVerificationDetail comments(String comments) {
    
    this.comments = comments;
    return this;
  }

   /**
   * Comments by the Verification Team. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return comments
  **/
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }


  public void setComments(String comments) {
    this.comments = comments;
  }


  public CustomerVerificationDetail verificationDate(OffsetDateTime verificationDate) {
    
    this.verificationDate = verificationDate;
    return this;
  }

   /**
   * Timestamp when the Customer&#39;s Video Verification is completed. This field could be nullified by passing \&quot;1000-01-01T00:00:00.001-05:00\&quot;.
   * @return verificationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getVerificationDate() {
    return verificationDate;
  }


  public void setVerificationDate(OffsetDateTime verificationDate) {
    this.verificationDate = verificationDate;
  }


  public CustomerVerificationDetail pepCategory(String pepCategory) {
    
    this.pepCategory = pepCategory;
    return this;
  }

   /**
   * Politically Exposed Person&#39;s Category. PEP category gets populated when only PEP Status is Y. Customer can not have multiple PEP Categories. * A &#x3D; Head of State * B &#x3D; Senior government official * C &#x3D; Senior politician * D &#x3D; Senior judicial official * E &#x3D; Senior military official * F &#x3D; Ambassador, attaché or counsellor * G &#x3D; Executive of state-owned corporations * H &#x3D; Head of government agency * I &#x3D; Political party official * J &#x3D; Executive of international organizations * K &#x3D; Family member of a PEP * L &#x3D; Close associate of a PEP * M &#x3D; Regional/Provence level official * N &#x3D; Mayor * O &#x3D; Other 
   * @return pepCategory
  **/
  @javax.annotation.Nullable
  public String getPepCategory() {
    return pepCategory;
  }


  public void setPepCategory(String pepCategory) {
    this.pepCategory = pepCategory;
  }


  public CustomerVerificationDetail f2fVerification(String f2fVerification) {
    
    this.f2fVerification = f2fVerification;
    return this;
  }

   /**
   * F2F (Face to Face) Verification Status. * Y – VERIFIED FACE TO FACE * N – NOT VERIFIED 
   * @return f2fVerification
  **/
  @javax.annotation.Nullable
  public String getF2fVerification() {
    return f2fVerification;
  }


  public void setF2fVerification(String f2fVerification) {
    this.f2fVerification = f2fVerification;
  }


  public CustomerVerificationDetail verificationMethod(String verificationMethod) {
    
    this.verificationMethod = verificationMethod;
    return this;
  }

   /**
   * Verification Method. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return verificationMethod
  **/
  @javax.annotation.Nullable
  public String getVerificationMethod() {
    return verificationMethod;
  }


  public void setVerificationMethod(String verificationMethod) {
    this.verificationMethod = verificationMethod;
  }


  public CustomerVerificationDetail annualCheckStatus(String annualCheckStatus) {
    
    this.annualCheckStatus = annualCheckStatus;
    return this;
  }

   /**
   * Annual Check Status.
   * @return annualCheckStatus
  **/
  @javax.annotation.Nullable
  public String getAnnualCheckStatus() {
    return annualCheckStatus;
  }


  public void setAnnualCheckStatus(String annualCheckStatus) {
    this.annualCheckStatus = annualCheckStatus;
  }


  public CustomerVerificationDetail kycConsentFlag(String kycConsentFlag) {
    
    this.kycConsentFlag = kycConsentFlag;
    return this;
  }

   /**
   * KYC Consent Flag.
   * @return kycConsentFlag
  **/
  @javax.annotation.Nullable
  public String getKycConsentFlag() {
    return kycConsentFlag;
  }


  public void setKycConsentFlag(String kycConsentFlag) {
    this.kycConsentFlag = kycConsentFlag;
  }


  public CustomerVerificationDetail kycConsentDate(OffsetDateTime kycConsentDate) {
    
    this.kycConsentDate = kycConsentDate;
    return this;
  }

   /**
   * Timestanp when the KYC Consent is added/updated.
   * @return kycConsentDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getKycConsentDate() {
    return kycConsentDate;
  }


  public void setKycConsentDate(OffsetDateTime kycConsentDate) {
    this.kycConsentDate = kycConsentDate;
  }


  public CustomerVerificationDetail reaccreditionFlag(String reaccreditionFlag) {
    
    this.reaccreditionFlag = reaccreditionFlag;
    return this;
  }

   /**
   * This field represents the status of Reaccreditation.  * Not available/Blank – reaccreditation was never completed * I - Reaccreditation is in progress (This value is updated by Mule/Outsystems) * Y - Reaccreditation is completed (This value is updated by RAC) * 0 - Nullify the existing value 
   * @return reaccreditionFlag
  **/
  @javax.annotation.Nullable
  public String getReaccreditionFlag() {
    return reaccreditionFlag;
  }


  public void setReaccreditionFlag(String reaccreditionFlag) {
    this.reaccreditionFlag = reaccreditionFlag;
  }


  public CustomerVerificationDetail reaccreditationDueDate(OffsetDateTime reaccreditationDueDate) {
    
    this.reaccreditationDueDate = reaccreditationDueDate;
    return this;
  }

   /**
   * Timestamp when the Reaccreditation is due for the customer. This field could be nullified by passing \&quot;1000-01-01T00:00:00.001-05:00\&quot;. (This value is maintained by RAC)
   * @return reaccreditationDueDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getReaccreditationDueDate() {
    return reaccreditationDueDate;
  }


  public void setReaccreditationDueDate(OffsetDateTime reaccreditationDueDate) {
    this.reaccreditationDueDate = reaccreditationDueDate;
  }


  public CustomerVerificationDetail reaccreditationStatusDate(OffsetDateTime reaccreditationStatusDate) {
    
    this.reaccreditationStatusDate = reaccreditationStatusDate;
    return this;
  }

   /**
   * Timestamp when ReaccreditationFlag is added/updated. This field could be nullified by passing \&quot;1000-01-01T00:00:00.001-05:00\&quot;. (This value is maintained by RAC)
   * @return reaccreditationStatusDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getReaccreditationStatusDate() {
    return reaccreditationStatusDate;
  }


  public void setReaccreditationStatusDate(OffsetDateTime reaccreditationStatusDate) {
    this.reaccreditationStatusDate = reaccreditationStatusDate;
  }


  public CustomerVerificationDetail reaccreditationAttributes(String reaccreditationAttributes) {
    
    this.reaccreditationAttributes = reaccreditationAttributes;
    return this;
  }

   /**
   * Reaccreditation Attributes to be stored in JSON format. This field could be nullified by passing \&quot;NUL\&quot;. (This value is maintained by RAC)
   * @return reaccreditationAttributes
  **/
  @javax.annotation.Nullable
  public String getReaccreditationAttributes() {
    return reaccreditationAttributes;
  }


  public void setReaccreditationAttributes(String reaccreditationAttributes) {
    this.reaccreditationAttributes = reaccreditationAttributes;
  }


  public CustomerVerificationDetail verificationReference(String verificationReference) {
    
    this.verificationReference = verificationReference;
    return this;
  }

   /**
   * Verification Reference. This field could be nullified by passing \&quot;NUL\&quot;.
   * @return verificationReference
  **/
  @javax.annotation.Nullable
  public String getVerificationReference() {
    return verificationReference;
  }


  public void setVerificationReference(String verificationReference) {
    this.verificationReference = verificationReference;
  }


  public CustomerVerificationDetail crossChannelVerificationDate(OffsetDateTime crossChannelVerificationDate) {
    
    this.crossChannelVerificationDate = crossChannelVerificationDate;
    return this;
  }

   /**
   * Cross Channel KYC Onboarding Date for the customer.
   * @return crossChannelVerificationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCrossChannelVerificationDate() {
    return crossChannelVerificationDate;
  }


  public void setCrossChannelVerificationDate(OffsetDateTime crossChannelVerificationDate) {
    this.crossChannelVerificationDate = crossChannelVerificationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerVerificationDetail customerVerificationDetail = (CustomerVerificationDetail) o;
    return Objects.equals(this.pcpNumber, customerVerificationDetail.pcpNumber) &&
        Objects.equals(this.channelType, customerVerificationDetail.channelType) &&
        Objects.equals(this.verificationFlagTypeId, customerVerificationDetail.verificationFlagTypeId) &&
        Objects.equals(this.verificationFlagSubtypeId, customerVerificationDetail.verificationFlagSubtypeId) &&
        Objects.equals(this.countryIso2, customerVerificationDetail.countryIso2) &&
        Objects.equals(this.displayFlag, customerVerificationDetail.displayFlag) &&
        Objects.equals(this.docRefLoadDate, customerVerificationDetail.docRefLoadDate) &&
        Objects.equals(this.docRefNum, customerVerificationDetail.docRefNum) &&
        Objects.equals(this.verificationStatus, customerVerificationDetail.verificationStatus) &&
        Objects.equals(this.verificationSubstatus, customerVerificationDetail.verificationSubstatus) &&
        Objects.equals(this.verifiedStatusBy, customerVerificationDetail.verifiedStatusBy) &&
        Objects.equals(this.verificationStatusExpiryDate, customerVerificationDetail.verificationStatusExpiryDate) &&
        Objects.equals(this.operaterId, customerVerificationDetail.operaterId) &&
        Objects.equals(this.comments, customerVerificationDetail.comments) &&
        Objects.equals(this.verificationDate, customerVerificationDetail.verificationDate) &&
        Objects.equals(this.pepCategory, customerVerificationDetail.pepCategory) &&
        Objects.equals(this.f2fVerification, customerVerificationDetail.f2fVerification) &&
        Objects.equals(this.verificationMethod, customerVerificationDetail.verificationMethod) &&
        Objects.equals(this.annualCheckStatus, customerVerificationDetail.annualCheckStatus) &&
        Objects.equals(this.kycConsentFlag, customerVerificationDetail.kycConsentFlag) &&
        Objects.equals(this.kycConsentDate, customerVerificationDetail.kycConsentDate) &&
        Objects.equals(this.reaccreditionFlag, customerVerificationDetail.reaccreditionFlag) &&
        Objects.equals(this.reaccreditationDueDate, customerVerificationDetail.reaccreditationDueDate) &&
        Objects.equals(this.reaccreditationStatusDate, customerVerificationDetail.reaccreditationStatusDate) &&
        Objects.equals(this.reaccreditationAttributes, customerVerificationDetail.reaccreditationAttributes) &&
        Objects.equals(this.verificationReference, customerVerificationDetail.verificationReference) &&
        Objects.equals(this.crossChannelVerificationDate, customerVerificationDetail.crossChannelVerificationDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pcpNumber, channelType, verificationFlagTypeId, verificationFlagSubtypeId, countryIso2, displayFlag, docRefLoadDate, docRefNum, verificationStatus, verificationSubstatus, verifiedStatusBy, verificationStatusExpiryDate, operaterId, comments, verificationDate, pepCategory, f2fVerification, verificationMethod, annualCheckStatus, kycConsentFlag, kycConsentDate, reaccreditionFlag, reaccreditationDueDate, reaccreditationStatusDate, reaccreditationAttributes, verificationReference, crossChannelVerificationDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerVerificationDetail {\n");
    sb.append("    pcpNumber: ").append(toIndentedString(pcpNumber)).append("\n");
    sb.append("    channelType: ").append(toIndentedString(channelType)).append("\n");
    sb.append("    verificationFlagTypeId: ").append(toIndentedString(verificationFlagTypeId)).append("\n");
    sb.append("    verificationFlagSubtypeId: ").append(toIndentedString(verificationFlagSubtypeId)).append("\n");
    sb.append("    countryIso2: ").append(toIndentedString(countryIso2)).append("\n");
    sb.append("    displayFlag: ").append(toIndentedString(displayFlag)).append("\n");
    sb.append("    docRefLoadDate: ").append(toIndentedString(docRefLoadDate)).append("\n");
    sb.append("    docRefNum: ").append(toIndentedString(docRefNum)).append("\n");
    sb.append("    verificationStatus: ").append(toIndentedString(verificationStatus)).append("\n");
    sb.append("    verificationSubstatus: ").append(toIndentedString(verificationSubstatus)).append("\n");
    sb.append("    verifiedStatusBy: ").append(toIndentedString(verifiedStatusBy)).append("\n");
    sb.append("    verificationStatusExpiryDate: ").append(toIndentedString(verificationStatusExpiryDate)).append("\n");
    sb.append("    operaterId: ").append(toIndentedString(operaterId)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    verificationDate: ").append(toIndentedString(verificationDate)).append("\n");
    sb.append("    pepCategory: ").append(toIndentedString(pepCategory)).append("\n");
    sb.append("    f2fVerification: ").append(toIndentedString(f2fVerification)).append("\n");
    sb.append("    verificationMethod: ").append(toIndentedString(verificationMethod)).append("\n");
    sb.append("    annualCheckStatus: ").append(toIndentedString(annualCheckStatus)).append("\n");
    sb.append("    kycConsentFlag: ").append(toIndentedString(kycConsentFlag)).append("\n");
    sb.append("    kycConsentDate: ").append(toIndentedString(kycConsentDate)).append("\n");
    sb.append("    reaccreditionFlag: ").append(toIndentedString(reaccreditionFlag)).append("\n");
    sb.append("    reaccreditationDueDate: ").append(toIndentedString(reaccreditationDueDate)).append("\n");
    sb.append("    reaccreditationStatusDate: ").append(toIndentedString(reaccreditationStatusDate)).append("\n");
    sb.append("    reaccreditationAttributes: ").append(toIndentedString(reaccreditationAttributes)).append("\n");
    sb.append("    verificationReference: ").append(toIndentedString(verificationReference)).append("\n");
    sb.append("    crossChannelVerificationDate: ").append(toIndentedString(crossChannelVerificationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pcpNumber");
    openapiFields.add("channelType");
    openapiFields.add("verificationFlagTypeId");
    openapiFields.add("verificationFlagSubtypeId");
    openapiFields.add("countryIso2");
    openapiFields.add("displayFlag");
    openapiFields.add("docRefLoadDate");
    openapiFields.add("docRefNum");
    openapiFields.add("verificationStatus");
    openapiFields.add("verificationSubstatus");
    openapiFields.add("verifiedStatusBy");
    openapiFields.add("verificationStatusExpiryDate");
    openapiFields.add("operaterId");
    openapiFields.add("comments");
    openapiFields.add("verificationDate");
    openapiFields.add("pepCategory");
    openapiFields.add("f2fVerification");
    openapiFields.add("verificationMethod");
    openapiFields.add("annualCheckStatus");
    openapiFields.add("kycConsentFlag");
    openapiFields.add("kycConsentDate");
    openapiFields.add("reaccreditionFlag");
    openapiFields.add("reaccreditationDueDate");
    openapiFields.add("reaccreditationStatusDate");
    openapiFields.add("reaccreditationAttributes");
    openapiFields.add("verificationReference");
    openapiFields.add("crossChannelVerificationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pcpNumber");
    openapiRequiredFields.add("channelType");
    openapiRequiredFields.add("verificationFlagTypeId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerVerificationDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomerVerificationDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerVerificationDetail is not found in the empty JSON string", CustomerVerificationDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerVerificationDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerVerificationDetail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerVerificationDetail.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("pcpNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pcpNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pcpNumber").toString()));
      }
      if ((jsonObj.get("verificationFlagSubtypeId") != null && !jsonObj.get("verificationFlagSubtypeId").isJsonNull()) && !jsonObj.get("verificationFlagSubtypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationFlagSubtypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationFlagSubtypeId").toString()));
      }
      if ((jsonObj.get("countryIso2") != null && !jsonObj.get("countryIso2").isJsonNull()) && !jsonObj.get("countryIso2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryIso2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryIso2").toString()));
      }
      if ((jsonObj.get("displayFlag") != null && !jsonObj.get("displayFlag").isJsonNull()) && !jsonObj.get("displayFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayFlag").toString()));
      }
      if ((jsonObj.get("docRefNum") != null && !jsonObj.get("docRefNum").isJsonNull()) && !jsonObj.get("docRefNum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docRefNum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docRefNum").toString()));
      }
      if ((jsonObj.get("verificationStatus") != null && !jsonObj.get("verificationStatus").isJsonNull()) && !jsonObj.get("verificationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationStatus").toString()));
      }
      if ((jsonObj.get("verificationSubstatus") != null && !jsonObj.get("verificationSubstatus").isJsonNull()) && !jsonObj.get("verificationSubstatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationSubstatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationSubstatus").toString()));
      }
      if ((jsonObj.get("verifiedStatusBy") != null && !jsonObj.get("verifiedStatusBy").isJsonNull()) && !jsonObj.get("verifiedStatusBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifiedStatusBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verifiedStatusBy").toString()));
      }
      if ((jsonObj.get("operaterId") != null && !jsonObj.get("operaterId").isJsonNull()) && !jsonObj.get("operaterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operaterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operaterId").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("pepCategory") != null && !jsonObj.get("pepCategory").isJsonNull()) && !jsonObj.get("pepCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pepCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pepCategory").toString()));
      }
      if ((jsonObj.get("f2fVerification") != null && !jsonObj.get("f2fVerification").isJsonNull()) && !jsonObj.get("f2fVerification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `f2fVerification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("f2fVerification").toString()));
      }
      if ((jsonObj.get("verificationMethod") != null && !jsonObj.get("verificationMethod").isJsonNull()) && !jsonObj.get("verificationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationMethod").toString()));
      }
      if ((jsonObj.get("annualCheckStatus") != null && !jsonObj.get("annualCheckStatus").isJsonNull()) && !jsonObj.get("annualCheckStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annualCheckStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annualCheckStatus").toString()));
      }
      if ((jsonObj.get("kycConsentFlag") != null && !jsonObj.get("kycConsentFlag").isJsonNull()) && !jsonObj.get("kycConsentFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kycConsentFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kycConsentFlag").toString()));
      }
      if ((jsonObj.get("reaccreditionFlag") != null && !jsonObj.get("reaccreditionFlag").isJsonNull()) && !jsonObj.get("reaccreditionFlag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reaccreditionFlag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reaccreditionFlag").toString()));
      }
      if ((jsonObj.get("reaccreditationAttributes") != null && !jsonObj.get("reaccreditationAttributes").isJsonNull()) && !jsonObj.get("reaccreditationAttributes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reaccreditationAttributes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reaccreditationAttributes").toString()));
      }
      if ((jsonObj.get("verificationReference") != null && !jsonObj.get("verificationReference").isJsonNull()) && !jsonObj.get("verificationReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerVerificationDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerVerificationDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerVerificationDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerVerificationDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerVerificationDetail>() {
           @Override
           public void write(JsonWriter out, CustomerVerificationDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerVerificationDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerVerificationDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerVerificationDetail
  * @throws IOException if the JSON string is invalid with respect to CustomerVerificationDetail
  */
  public static CustomerVerificationDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerVerificationDetail.class);
  }

 /**
  * Convert an instance of CustomerVerificationDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

